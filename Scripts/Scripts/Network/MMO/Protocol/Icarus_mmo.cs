// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MmoNet
{

using global::System;
using global::FlatBuffers;

public enum Version : uint
{
 Num = 1778094681,
};

public enum MSG : int
{
 None = 0,
 JoinField = 1,
 InMapMsg = 2,
 GetServerTime = 3,
 MoveServer = 4,
 LogOut = 5,
 TestBotJoinReq = 6,
};

public enum MmoInteractMsg : int
{
 None = 0,
 DupLoginFromOther = 1,
};

/// C2S 클라이언트 가 서버에 전송
/// S2C 서버가 클라이언트에 전송
/// CS  클라가 보내고 서버로 부터 그대로 받는 경우. 
public enum InMapMsgUnion : byte
{
 NONE = 0,
  ///서버에서 보내는 에러 메세지
 S2C_Error = 1,
  ///C=>S
 ReqLoadMapOK = 2,
  ///S=>C ReqLoadMapOK 받은후 서버가 해당클라이언트에 전송..
 ResLoadMapOK = 3,
 CS_MapChat = 4,
 S2C_AddCharInfo = 5,
 S2C_AddMonsterInfo = 6,
 S2C_AddNPCInfo = 7,
 S2C_AddGatherObj = 8,
 S2C_DelObject = 9,
 CS_MoveToDir = 10,
 CS_MoveToDest = 11,
 CS_MoveToCollision = 12,
 CS_MoveStop = 13,
 CS_Attack = 14,
 S2C_Damage = 15,
 S2C_DotDamage = 16,
 S2C_AbilityNfy = 17,
 S2C_SkillAbility = 18,
 S2C_ForceMove = 19,
  ///S2C_GameTick 서버와 틱동기화를위해서 사용하는 패킷..
 S2C_GameTick = 20,
 S2C_ChangeMezState = 21,
 S2C_ChangeClass = 22,
 S2C_AddAbilAction = 23,
 S2C_DelAbilAction = 24,
 S2C_MoveMap = 25,
 C2S_ReqObjInfo = 26,
  ///유적에서 스킬 사용시 데미지 계산요청을 요구 하는 패킷..
 C2S_DamageReq = 27,
  ///드랍된 아이템 정보 패킷(드랍연출용)
 S2C_DropItemInfos = 28,
  ///펫장착 해제 동기화..
 S2C_ChangePet = 29,
 S2C_ChangeChange = 30,
 C2S_UseItem = 31,
 S2C_Cooltime = 32,
 S2C_RemainItemInfos = 33,
 S2C_LvExpTendencyUp = 34,
 S2C_LvExpDown = 35,
 S2C_TendencyDown = 36,
 S2C_Potion_CoolTime = 37,
 S2C_DisplayEffect = 38,
 C2S_MonsterSpawnReq = 39,
 C2S_MapClear = 40,
 CS_SkillCancle = 41,
 CS_EquipVehicle = 42,
 CS_RideVehicle = 43,
 S2C_ChangeGuildInfo = 44,
 S2C_ChangeTendency = 45,
 C2S_Gather = 46,
 S2C_Casting = 47,
 CS_AttackToPos = 48,
 S2C_UpdatePartyInfo = 49,
 C2S_SetPartyTarget = 50,
 S2C_StageState = 51,
 S2C_GameStart = 52,
 S2C_GameScore = 53,
 CS_StatPreview = 54,
 S2C_RoomInfo = 55,
 S2C_InstanceFinish = 56,
 C2S_PetStatReq = 57,
 S2C_PetStat = 58,
 S2C_GodLandStatInfo = 59,
 S2C_GodLandFinishInfo = 60,
 S2C_BossPointRankingList = 61,
 S2C_BossPointDeathPenalty = 62,
 S2C_ChangeTeam = 63,
 C2S_ReqBotSet = 64,
 S2C_ResBotSetInfo = 65,
 S2C_UserBossPoint = 66,
};

public enum E_DisplayEffect : ushort
{
 Teleport = 0,
 Level_Up = 1,
};

public enum E_ForeceMoveMap_Reason : ushort
{
 Not_Buff = 0,
 Close_Stage = 1,
};

public struct ServerPos3 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ServerPos3 GetRootAsServerPos3(ByteBuffer _bb) { return GetRootAsServerPos3(_bb, new ServerPos3()); }
  public static ServerPos3 GetRootAsServerPos3(ByteBuffer _bb, ServerPos3 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ServerPos3 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Y { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Z { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<ServerPos3> CreateServerPos3(FlatBufferBuilder builder,
      float x = 0.0f,
      float y = 0.0f,
      float z = 0.0f) {
    builder.StartObject(3);
    ServerPos3.AddZ(builder, z);
    ServerPos3.AddY(builder, y);
    ServerPos3.AddX(builder, x);
    return ServerPos3.EndServerPos3(builder);
  }

  public static void StartServerPos3(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddX(FlatBufferBuilder builder, float x) { builder.AddFloat(0, x, 0.0f); }
  public static void AddY(FlatBufferBuilder builder, float y) { builder.AddFloat(1, y, 0.0f); }
  public static void AddZ(FlatBufferBuilder builder, float z) { builder.AddFloat(2, z, 0.0f); }
  public static Offset<ServerPos3> EndServerPos3(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ServerPos3>(o);
  }
};

public struct Ability : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Ability GetRootAsAbility(ByteBuffer _bb) { return GetRootAsAbility(_bb, new Ability()); }
  public static Ability GetRootAsAbility(ByteBuffer _bb, Ability obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Ability __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ushort Type { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public float Value { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<Ability> CreateAbility(FlatBufferBuilder builder,
      ushort type = 0,
      float value = 0.0f) {
    builder.StartObject(2);
    Ability.AddValue(builder, value);
    Ability.AddType(builder, type);
    return Ability.EndAbility(builder);
  }

  public static void StartAbility(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddType(FlatBufferBuilder builder, ushort type) { builder.AddUshort(0, type, 0); }
  public static void AddValue(FlatBufferBuilder builder, float value) { builder.AddFloat(1, value, 0.0f); }
  public static Offset<Ability> EndAbility(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Ability>(o);
  }
};

public struct SkillAbility : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SkillAbility GetRootAsSkillAbility(ByteBuffer _bb) { return GetRootAsSkillAbility(_bb, new SkillAbility()); }
  public static SkillAbility GetRootAsSkillAbility(ByteBuffer _bb, SkillAbility obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SkillAbility __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Skilltid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public Ability? Abils(int j) { int o = __p.__offset(6); return o != 0 ? (Ability?)(new Ability()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AbilsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<SkillAbility> CreateSkillAbility(FlatBufferBuilder builder,
      uint skilltid = 0,
      VectorOffset abilsOffset = default(VectorOffset)) {
    builder.StartObject(2);
    SkillAbility.AddAbils(builder, abilsOffset);
    SkillAbility.AddSkilltid(builder, skilltid);
    return SkillAbility.EndSkillAbility(builder);
  }

  public static void StartSkillAbility(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddSkilltid(FlatBufferBuilder builder, uint skilltid) { builder.AddUint(0, skilltid, 0); }
  public static void AddAbils(FlatBufferBuilder builder, VectorOffset abilsOffset) { builder.AddOffset(1, abilsOffset.Value, 0); }
  public static VectorOffset CreateAbilsVector(FlatBufferBuilder builder, Offset<Ability>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAbilsVectorBlock(FlatBufferBuilder builder, Offset<Ability>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAbilsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<SkillAbility> EndSkillAbility(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SkillAbility>(o);
  }
};

public struct CharInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CharInfo GetRootAsCharInfo(ByteBuffer _bb) { return GetRootAsCharInfo(_bb, new CharInfo()); }
  public static CharInfo GetRootAsCharInfo(ByteBuffer _bb, CharInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CharInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong CharId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public ulong UserId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span(8); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  public uint CharTid { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Level { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Mapid { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  ///초기 능력치 정보들..
  public Ability? Abils(int j) { int o = __p.__offset(16); return o != 0 ? (Ability?)(new Ability()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AbilsLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public SkillAbility? Skillabils(int j) { int o = __p.__offset(18); return o != 0 ? (SkillAbility?)(new SkillAbility()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SkillabilsLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<CharInfo> CreateCharInfo(FlatBufferBuilder builder,
      ulong char_id = 0,
      ulong user_id = 0,
      StringOffset nameOffset = default(StringOffset),
      uint char_tid = 0,
      uint level = 0,
      uint mapid = 0,
      VectorOffset abilsOffset = default(VectorOffset),
      VectorOffset skillabilsOffset = default(VectorOffset)) {
    builder.StartObject(8);
    CharInfo.AddUserId(builder, user_id);
    CharInfo.AddCharId(builder, char_id);
    CharInfo.AddSkillabils(builder, skillabilsOffset);
    CharInfo.AddAbils(builder, abilsOffset);
    CharInfo.AddMapid(builder, mapid);
    CharInfo.AddLevel(builder, level);
    CharInfo.AddCharTid(builder, char_tid);
    CharInfo.AddName(builder, nameOffset);
    return CharInfo.EndCharInfo(builder);
  }

  public static void StartCharInfo(FlatBufferBuilder builder) { builder.StartObject(8); }
  public static void AddCharId(FlatBufferBuilder builder, ulong charId) { builder.AddUlong(0, charId, 0); }
  public static void AddUserId(FlatBufferBuilder builder, ulong userId) { builder.AddUlong(1, userId, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddCharTid(FlatBufferBuilder builder, uint charTid) { builder.AddUint(3, charTid, 0); }
  public static void AddLevel(FlatBufferBuilder builder, uint level) { builder.AddUint(4, level, 0); }
  public static void AddMapid(FlatBufferBuilder builder, uint mapid) { builder.AddUint(5, mapid, 0); }
  public static void AddAbils(FlatBufferBuilder builder, VectorOffset abilsOffset) { builder.AddOffset(6, abilsOffset.Value, 0); }
  public static VectorOffset CreateAbilsVector(FlatBufferBuilder builder, Offset<Ability>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAbilsVectorBlock(FlatBufferBuilder builder, Offset<Ability>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAbilsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSkillabils(FlatBufferBuilder builder, VectorOffset skillabilsOffset) { builder.AddOffset(7, skillabilsOffset.Value, 0); }
  public static VectorOffset CreateSkillabilsVector(FlatBufferBuilder builder, Offset<SkillAbility>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSkillabilsVectorBlock(FlatBufferBuilder builder, Offset<SkillAbility>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSkillabilsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<CharInfo> EndCharInfo(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 8);  // name
    return new Offset<CharInfo>(o);
  }
};

public struct InMapMsgBase : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static InMapMsgBase GetRootAsInMapMsgBase(ByteBuffer _bb) { return GetRootAsInMapMsgBase(_bb, new InMapMsgBase()); }
  public static InMapMsgBase GetRootAsInMapMsgBase(ByteBuffer _bb, InMapMsgBase obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public InMapMsgBase __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public InMapMsgUnion MsgType { get { int o = __p.__offset(4); return o != 0 ? (InMapMsgUnion)__p.bb.Get(o + __p.bb_pos) : InMapMsgUnion.NONE; } }
  public TTable? Msg<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o) : null; }

  public static Offset<InMapMsgBase> CreateInMapMsgBase(FlatBufferBuilder builder,
      InMapMsgUnion msg_type = InMapMsgUnion.NONE,
      int msgOffset = 0) {
    builder.StartObject(2);
    InMapMsgBase.AddMsg(builder, msgOffset);
    InMapMsgBase.AddMsgType(builder, msg_type);
    return InMapMsgBase.EndInMapMsgBase(builder);
  }

  public static void StartInMapMsgBase(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddMsgType(FlatBufferBuilder builder, InMapMsgUnion msgType) { builder.AddByte(0, (byte)msgType, 0); }
  public static void AddMsg(FlatBufferBuilder builder, int msgOffset) { builder.AddOffset(1, msgOffset, 0); }
  public static Offset<InMapMsgBase> EndInMapMsgBase(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<InMapMsgBase>(o);
  }
};

public struct ItemEquipment : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ItemEquipment GetRootAsItemEquipment(ByteBuffer _bb) { return GetRootAsItemEquipment(_bb, new ItemEquipment()); }
  public static ItemEquipment GetRootAsItemEquipment(ByteBuffer _bb, ItemEquipment obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ItemEquipment __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong ItemId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public uint ItemTid { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Option(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int OptionLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOptionBytes() { return __p.__vector_as_span(8); }
#else
  public ArraySegment<byte>? GetOptionBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public uint[] GetOptionArray() { return __p.__vector_as_array<uint>(8); }
  public uint Sockets(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int SocketsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSocketsBytes() { return __p.__vector_as_span(10); }
#else
  public ArraySegment<byte>? GetSocketsBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public uint[] GetSocketsArray() { return __p.__vector_as_array<uint>(10); }
  public byte SlotIdx { get { int o = __p.__offset(12); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte IsLock { get { int o = __p.__offset(14); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public ulong ExpireDt { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public ulong CreateDt { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }

  public static Offset<ItemEquipment> CreateItemEquipment(FlatBufferBuilder builder,
      ulong item_id = 0,
      uint item_tid = 0,
      VectorOffset optionOffset = default(VectorOffset),
      VectorOffset socketsOffset = default(VectorOffset),
      byte slot_idx = 0,
      byte is_lock = 0,
      ulong expire_dt = 0,
      ulong create_dt = 0) {
    builder.StartObject(8);
    ItemEquipment.AddCreateDt(builder, create_dt);
    ItemEquipment.AddExpireDt(builder, expire_dt);
    ItemEquipment.AddItemId(builder, item_id);
    ItemEquipment.AddSockets(builder, socketsOffset);
    ItemEquipment.AddOption(builder, optionOffset);
    ItemEquipment.AddItemTid(builder, item_tid);
    ItemEquipment.AddIsLock(builder, is_lock);
    ItemEquipment.AddSlotIdx(builder, slot_idx);
    return ItemEquipment.EndItemEquipment(builder);
  }

  public static void StartItemEquipment(FlatBufferBuilder builder) { builder.StartObject(8); }
  public static void AddItemId(FlatBufferBuilder builder, ulong itemId) { builder.AddUlong(0, itemId, 0); }
  public static void AddItemTid(FlatBufferBuilder builder, uint itemTid) { builder.AddUint(1, itemTid, 0); }
  public static void AddOption(FlatBufferBuilder builder, VectorOffset optionOffset) { builder.AddOffset(2, optionOffset.Value, 0); }
  public static VectorOffset CreateOptionVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateOptionVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartOptionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSockets(FlatBufferBuilder builder, VectorOffset socketsOffset) { builder.AddOffset(3, socketsOffset.Value, 0); }
  public static VectorOffset CreateSocketsVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSocketsVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSocketsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSlotIdx(FlatBufferBuilder builder, byte slotIdx) { builder.AddByte(4, slotIdx, 0); }
  public static void AddIsLock(FlatBufferBuilder builder, byte isLock) { builder.AddByte(5, isLock, 0); }
  public static void AddExpireDt(FlatBufferBuilder builder, ulong expireDt) { builder.AddUlong(6, expireDt, 0); }
  public static void AddCreateDt(FlatBufferBuilder builder, ulong createDt) { builder.AddUlong(7, createDt, 0); }
  public static Offset<ItemEquipment> EndItemEquipment(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ItemEquipment>(o);
  }
};

public struct ItemStack : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ItemStack GetRootAsItemStack(ByteBuffer _bb) { return GetRootAsItemStack(_bb, new ItemStack()); }
  public static ItemStack GetRootAsItemStack(ByteBuffer _bb, ItemStack obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ItemStack __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong ItemId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public uint ItemTid { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Cnt { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public byte IsLock { get { int o = __p.__offset(10); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public ulong CreateDt { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }

  public static Offset<ItemStack> CreateItemStack(FlatBufferBuilder builder,
      ulong item_id = 0,
      uint item_tid = 0,
      uint cnt = 0,
      byte is_lock = 0,
      ulong create_dt = 0) {
    builder.StartObject(5);
    ItemStack.AddCreateDt(builder, create_dt);
    ItemStack.AddItemId(builder, item_id);
    ItemStack.AddCnt(builder, cnt);
    ItemStack.AddItemTid(builder, item_tid);
    ItemStack.AddIsLock(builder, is_lock);
    return ItemStack.EndItemStack(builder);
  }

  public static void StartItemStack(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddItemId(FlatBufferBuilder builder, ulong itemId) { builder.AddUlong(0, itemId, 0); }
  public static void AddItemTid(FlatBufferBuilder builder, uint itemTid) { builder.AddUint(1, itemTid, 0); }
  public static void AddCnt(FlatBufferBuilder builder, uint cnt) { builder.AddUint(2, cnt, 0); }
  public static void AddIsLock(FlatBufferBuilder builder, byte isLock) { builder.AddByte(3, isLock, 0); }
  public static void AddCreateDt(FlatBufferBuilder builder, ulong createDt) { builder.AddUlong(4, createDt, 0); }
  public static Offset<ItemStack> EndItemStack(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ItemStack>(o);
  }
};

public struct AccountItemStack : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AccountItemStack GetRootAsAccountItemStack(ByteBuffer _bb) { return GetRootAsAccountItemStack(_bb, new AccountItemStack()); }
  public static AccountItemStack GetRootAsAccountItemStack(ByteBuffer _bb, AccountItemStack obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AccountItemStack __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong ItemId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public uint ItemTid { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public ulong Cnt { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public byte IsLock { get { int o = __p.__offset(10); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public ulong CreateDt { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }

  public static Offset<AccountItemStack> CreateAccountItemStack(FlatBufferBuilder builder,
      ulong item_id = 0,
      uint item_tid = 0,
      ulong cnt = 0,
      byte is_lock = 0,
      ulong create_dt = 0) {
    builder.StartObject(5);
    AccountItemStack.AddCreateDt(builder, create_dt);
    AccountItemStack.AddCnt(builder, cnt);
    AccountItemStack.AddItemId(builder, item_id);
    AccountItemStack.AddItemTid(builder, item_tid);
    AccountItemStack.AddIsLock(builder, is_lock);
    return AccountItemStack.EndAccountItemStack(builder);
  }

  public static void StartAccountItemStack(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddItemId(FlatBufferBuilder builder, ulong itemId) { builder.AddUlong(0, itemId, 0); }
  public static void AddItemTid(FlatBufferBuilder builder, uint itemTid) { builder.AddUint(1, itemTid, 0); }
  public static void AddCnt(FlatBufferBuilder builder, ulong cnt) { builder.AddUlong(2, cnt, 0); }
  public static void AddIsLock(FlatBufferBuilder builder, byte isLock) { builder.AddByte(3, isLock, 0); }
  public static void AddCreateDt(FlatBufferBuilder builder, ulong createDt) { builder.AddUlong(4, createDt, 0); }
  public static Offset<AccountItemStack> EndAccountItemStack(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AccountItemStack>(o);
  }
};

public struct Rune : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Rune GetRootAsRune(ByteBuffer _bb) { return GetRootAsRune(_bb, new Rune()); }
  public static Rune GetRootAsRune(ByteBuffer _bb, Rune obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Rune __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong ItemId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public uint ItemTid { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public byte SlotIdx { get { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte IsLock { get { int o = __p.__offset(10); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public uint EquipPetTid { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint BaseEnchantTid { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint FirstOptTid { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint OptTidList1(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int OptTidList1Length { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOptTidList1Bytes() { return __p.__vector_as_span(18); }
#else
  public ArraySegment<byte>? GetOptTidList1Bytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public uint[] GetOptTidList1Array() { return __p.__vector_as_array<uint>(18); }
  public uint OptTidList2(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int OptTidList2Length { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOptTidList2Bytes() { return __p.__vector_as_span(20); }
#else
  public ArraySegment<byte>? GetOptTidList2Bytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public uint[] GetOptTidList2Array() { return __p.__vector_as_array<uint>(20); }
  public uint OptTidList3(int j) { int o = __p.__offset(22); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int OptTidList3Length { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOptTidList3Bytes() { return __p.__vector_as_span(22); }
#else
  public ArraySegment<byte>? GetOptTidList3Bytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public uint[] GetOptTidList3Array() { return __p.__vector_as_array<uint>(22); }
  public uint OptTidList4(int j) { int o = __p.__offset(24); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int OptTidList4Length { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOptTidList4Bytes() { return __p.__vector_as_span(24); }
#else
  public ArraySegment<byte>? GetOptTidList4Bytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public uint[] GetOptTidList4Array() { return __p.__vector_as_array<uint>(24); }
  public ulong CreateDt { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }

  public static Offset<Rune> CreateRune(FlatBufferBuilder builder,
      ulong item_id = 0,
      uint item_tid = 0,
      byte slot_idx = 0,
      byte is_lock = 0,
      uint equip_pet_tid = 0,
      uint base_enchant_tid = 0,
      uint first_opt_tid = 0,
      VectorOffset opt_tid_list_1Offset = default(VectorOffset),
      VectorOffset opt_tid_list_2Offset = default(VectorOffset),
      VectorOffset opt_tid_list_3Offset = default(VectorOffset),
      VectorOffset opt_tid_list_4Offset = default(VectorOffset),
      ulong create_dt = 0) {
    builder.StartObject(12);
    Rune.AddCreateDt(builder, create_dt);
    Rune.AddItemId(builder, item_id);
    Rune.AddOptTidList4(builder, opt_tid_list_4Offset);
    Rune.AddOptTidList3(builder, opt_tid_list_3Offset);
    Rune.AddOptTidList2(builder, opt_tid_list_2Offset);
    Rune.AddOptTidList1(builder, opt_tid_list_1Offset);
    Rune.AddFirstOptTid(builder, first_opt_tid);
    Rune.AddBaseEnchantTid(builder, base_enchant_tid);
    Rune.AddEquipPetTid(builder, equip_pet_tid);
    Rune.AddItemTid(builder, item_tid);
    Rune.AddIsLock(builder, is_lock);
    Rune.AddSlotIdx(builder, slot_idx);
    return Rune.EndRune(builder);
  }

  public static void StartRune(FlatBufferBuilder builder) { builder.StartObject(12); }
  public static void AddItemId(FlatBufferBuilder builder, ulong itemId) { builder.AddUlong(0, itemId, 0); }
  public static void AddItemTid(FlatBufferBuilder builder, uint itemTid) { builder.AddUint(1, itemTid, 0); }
  public static void AddSlotIdx(FlatBufferBuilder builder, byte slotIdx) { builder.AddByte(2, slotIdx, 0); }
  public static void AddIsLock(FlatBufferBuilder builder, byte isLock) { builder.AddByte(3, isLock, 0); }
  public static void AddEquipPetTid(FlatBufferBuilder builder, uint equipPetTid) { builder.AddUint(4, equipPetTid, 0); }
  public static void AddBaseEnchantTid(FlatBufferBuilder builder, uint baseEnchantTid) { builder.AddUint(5, baseEnchantTid, 0); }
  public static void AddFirstOptTid(FlatBufferBuilder builder, uint firstOptTid) { builder.AddUint(6, firstOptTid, 0); }
  public static void AddOptTidList1(FlatBufferBuilder builder, VectorOffset optTidList1Offset) { builder.AddOffset(7, optTidList1Offset.Value, 0); }
  public static VectorOffset CreateOptTidList1Vector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateOptTidList1VectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartOptTidList1Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOptTidList2(FlatBufferBuilder builder, VectorOffset optTidList2Offset) { builder.AddOffset(8, optTidList2Offset.Value, 0); }
  public static VectorOffset CreateOptTidList2Vector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateOptTidList2VectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartOptTidList2Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOptTidList3(FlatBufferBuilder builder, VectorOffset optTidList3Offset) { builder.AddOffset(9, optTidList3Offset.Value, 0); }
  public static VectorOffset CreateOptTidList3Vector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateOptTidList3VectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartOptTidList3Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOptTidList4(FlatBufferBuilder builder, VectorOffset optTidList4Offset) { builder.AddOffset(10, optTidList4Offset.Value, 0); }
  public static VectorOffset CreateOptTidList4Vector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateOptTidList4VectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartOptTidList4Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCreateDt(FlatBufferBuilder builder, ulong createDt) { builder.AddUlong(11, createDt, 0); }
  public static Offset<Rune> EndRune(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Rune>(o);
  }
};

public struct BossRankerData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BossRankerData GetRootAsBossRankerData(ByteBuffer _bb) { return GetRootAsBossRankerData(_bb, new BossRankerData()); }
  public static BossRankerData GetRootAsBossRankerData(ByteBuffer _bb, BossRankerData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BossRankerData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong CharId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public float Point { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public uint ServerIdx { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<BossRankerData> CreateBossRankerData(FlatBufferBuilder builder,
      ulong char_id = 0,
      float point = 0.0f,
      uint server_idx = 0) {
    builder.StartObject(3);
    BossRankerData.AddCharId(builder, char_id);
    BossRankerData.AddServerIdx(builder, server_idx);
    BossRankerData.AddPoint(builder, point);
    return BossRankerData.EndBossRankerData(builder);
  }

  public static void StartBossRankerData(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddCharId(FlatBufferBuilder builder, ulong charId) { builder.AddUlong(0, charId, 0); }
  public static void AddPoint(FlatBufferBuilder builder, float point) { builder.AddFloat(1, point, 0.0f); }
  public static void AddServerIdx(FlatBufferBuilder builder, uint serverIdx) { builder.AddUint(2, serverIdx, 0); }
  public static Offset<BossRankerData> EndBossRankerData(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BossRankerData>(o);
  }
};

public struct CS_MapChat : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CS_MapChat GetRootAsCS_MapChat(ByteBuffer _bb) { return GetRootAsCS_MapChat(_bb, new CS_MapChat()); }
  public static CS_MapChat GetRootAsCS_MapChat(ByteBuffer _bb, CS_MapChat obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CS_MapChat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Chat { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetChatBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetChatBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetChatArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<CS_MapChat> CreateCS_MapChat(FlatBufferBuilder builder,
      uint objectid = 0,
      StringOffset chatOffset = default(StringOffset)) {
    builder.StartObject(2);
    CS_MapChat.AddChat(builder, chatOffset);
    CS_MapChat.AddObjectid(builder, objectid);
    return CS_MapChat.EndCS_MapChat(builder);
  }

  public static void StartCS_MapChat(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static void AddChat(FlatBufferBuilder builder, StringOffset chatOffset) { builder.AddOffset(1, chatOffset.Value, 0); }
  public static Offset<CS_MapChat> EndCS_MapChat(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CS_MapChat>(o);
  }
};

public struct AbilActionInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AbilActionInfo GetRootAsAbilActionInfo(ByteBuffer _bb) { return GetRootAsAbilActionInfo(_bb, new AbilActionInfo()); }
  public static AbilActionInfo GetRootAsAbilActionInfo(ByteBuffer _bb, AbilActionInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AbilActionInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  ///ability_action table id;
  public uint AbilactionTid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public ulong ExpireDt { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public bool NotConsume { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<AbilActionInfo> CreateAbilActionInfo(FlatBufferBuilder builder,
      uint abilaction_tid = 0,
      ulong expire_dt = 0,
      bool not_consume = false) {
    builder.StartObject(3);
    AbilActionInfo.AddExpireDt(builder, expire_dt);
    AbilActionInfo.AddAbilactionTid(builder, abilaction_tid);
    AbilActionInfo.AddNotConsume(builder, not_consume);
    return AbilActionInfo.EndAbilActionInfo(builder);
  }

  public static void StartAbilActionInfo(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddAbilactionTid(FlatBufferBuilder builder, uint abilactionTid) { builder.AddUint(0, abilactionTid, 0); }
  public static void AddExpireDt(FlatBufferBuilder builder, ulong expireDt) { builder.AddUlong(1, expireDt, 0); }
  public static void AddNotConsume(FlatBufferBuilder builder, bool notConsume) { builder.AddBool(2, notConsume, false); }
  public static Offset<AbilActionInfo> EndAbilActionInfo(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AbilActionInfo>(o);
  }
};

public struct S2C_Error : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_Error GetRootAsS2C_Error(ByteBuffer _bb) { return GetRootAsS2C_Error(_bb, new S2C_Error()); }
  public static S2C_Error GetRootAsS2C_Error(ByteBuffer _bb, S2C_Error obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_Error __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint ErrorCode { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint MsgType { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<S2C_Error> CreateS2C_Error(FlatBufferBuilder builder,
      uint error_code = 0,
      uint msg_type = 0) {
    builder.StartObject(2);
    S2C_Error.AddMsgType(builder, msg_type);
    S2C_Error.AddErrorCode(builder, error_code);
    return S2C_Error.EndS2C_Error(builder);
  }

  public static void StartS2C_Error(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddErrorCode(FlatBufferBuilder builder, uint errorCode) { builder.AddUint(0, errorCode, 0); }
  public static void AddMsgType(FlatBufferBuilder builder, uint msgType) { builder.AddUint(1, msgType, 0); }
  public static Offset<S2C_Error> EndS2C_Error(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_Error>(o);
  }
};

public struct S2C_AddCharInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_AddCharInfo GetRootAsS2C_AddCharInfo(ByteBuffer _bb) { return GetRootAsS2C_AddCharInfo(_bb, new S2C_AddCharInfo()); }
  public static S2C_AddCharInfo GetRootAsS2C_AddCharInfo(ByteBuffer _bb, S2C_AddCharInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_AddCharInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public uint CharTid { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public ServerPos3? Pos { get { int o = __p.__offset(10); return o != 0 ? (ServerPos3?)(new ServerPos3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public float Dir { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  ///movespeed >0 일경우 이동 중이기 때문에 이동처리를 해줘야 함..
  public float Movespeed { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public ServerPos3? DestPos { get { int o = __p.__offset(16); return o != 0 ? (ServerPos3?)(new ServerPos3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  ///change_id에 값이 있을 경우 변신을 우선시.
  public uint ChangeId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public float CurHp { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float MaxHp { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CurMp { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float MaxMp { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public uint Mezstate { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  /// 성향치
  public int Tendency { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  ///메인펫 tid
  public uint Pettid { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  ///탈것 탑승상태 값이 있을 경우 탑승상태..
  public uint Vehicletid { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  ///길드마크
  public ulong GuildId { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public uint GuildmarkTid { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  ///서버아이디
  public uint Serverid { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  ///캐릭터 DB고유아이디
  public ulong CharId { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  ///팀플래그
  public uint Team { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public AbilActionInfo? Abilactions(int j) { int o = __p.__offset(46); return o != 0 ? (AbilActionInfo?)(new AbilActionInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AbilactionsLength { get { int o = __p.__offset(46); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<S2C_AddCharInfo> CreateS2C_AddCharInfo(FlatBufferBuilder builder,
      uint objectid = 0,
      StringOffset nameOffset = default(StringOffset),
      uint char_tid = 0,
      Offset<ServerPos3> posOffset = default(Offset<ServerPos3>),
      float dir = 0.0f,
      float movespeed = 0.0f,
      Offset<ServerPos3> destPosOffset = default(Offset<ServerPos3>),
      uint change_id = 0,
      float cur_hp = 0.0f,
      float max_hp = 0.0f,
      float cur_mp = 0.0f,
      float max_mp = 0.0f,
      uint mezstate = 0,
      int tendency = 0,
      uint pettid = 0,
      uint vehicletid = 0,
      ulong guild_id = 0,
      uint guildmark_tid = 0,
      uint serverid = 0,
      ulong char_id = 0,
      uint team = 0,
      VectorOffset abilactionsOffset = default(VectorOffset)) {
    builder.StartObject(22);
    S2C_AddCharInfo.AddCharId(builder, char_id);
    S2C_AddCharInfo.AddGuildId(builder, guild_id);
    S2C_AddCharInfo.AddAbilactions(builder, abilactionsOffset);
    S2C_AddCharInfo.AddTeam(builder, team);
    S2C_AddCharInfo.AddServerid(builder, serverid);
    S2C_AddCharInfo.AddGuildmarkTid(builder, guildmark_tid);
    S2C_AddCharInfo.AddVehicletid(builder, vehicletid);
    S2C_AddCharInfo.AddPettid(builder, pettid);
    S2C_AddCharInfo.AddTendency(builder, tendency);
    S2C_AddCharInfo.AddMezstate(builder, mezstate);
    S2C_AddCharInfo.AddMaxMp(builder, max_mp);
    S2C_AddCharInfo.AddCurMp(builder, cur_mp);
    S2C_AddCharInfo.AddMaxHp(builder, max_hp);
    S2C_AddCharInfo.AddCurHp(builder, cur_hp);
    S2C_AddCharInfo.AddChangeId(builder, change_id);
    S2C_AddCharInfo.AddDestPos(builder, destPosOffset);
    S2C_AddCharInfo.AddMovespeed(builder, movespeed);
    S2C_AddCharInfo.AddDir(builder, dir);
    S2C_AddCharInfo.AddPos(builder, posOffset);
    S2C_AddCharInfo.AddCharTid(builder, char_tid);
    S2C_AddCharInfo.AddName(builder, nameOffset);
    S2C_AddCharInfo.AddObjectid(builder, objectid);
    return S2C_AddCharInfo.EndS2C_AddCharInfo(builder);
  }

  public static void StartS2C_AddCharInfo(FlatBufferBuilder builder) { builder.StartObject(22); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddCharTid(FlatBufferBuilder builder, uint charTid) { builder.AddUint(2, charTid, 0); }
  public static void AddPos(FlatBufferBuilder builder, Offset<ServerPos3> posOffset) { builder.AddOffset(3, posOffset.Value, 0); }
  public static void AddDir(FlatBufferBuilder builder, float dir) { builder.AddFloat(4, dir, 0.0f); }
  public static void AddMovespeed(FlatBufferBuilder builder, float movespeed) { builder.AddFloat(5, movespeed, 0.0f); }
  public static void AddDestPos(FlatBufferBuilder builder, Offset<ServerPos3> destPosOffset) { builder.AddOffset(6, destPosOffset.Value, 0); }
  public static void AddChangeId(FlatBufferBuilder builder, uint changeId) { builder.AddUint(7, changeId, 0); }
  public static void AddCurHp(FlatBufferBuilder builder, float curHp) { builder.AddFloat(8, curHp, 0.0f); }
  public static void AddMaxHp(FlatBufferBuilder builder, float maxHp) { builder.AddFloat(9, maxHp, 0.0f); }
  public static void AddCurMp(FlatBufferBuilder builder, float curMp) { builder.AddFloat(10, curMp, 0.0f); }
  public static void AddMaxMp(FlatBufferBuilder builder, float maxMp) { builder.AddFloat(11, maxMp, 0.0f); }
  public static void AddMezstate(FlatBufferBuilder builder, uint mezstate) { builder.AddUint(12, mezstate, 0); }
  public static void AddTendency(FlatBufferBuilder builder, int tendency) { builder.AddInt(13, tendency, 0); }
  public static void AddPettid(FlatBufferBuilder builder, uint pettid) { builder.AddUint(14, pettid, 0); }
  public static void AddVehicletid(FlatBufferBuilder builder, uint vehicletid) { builder.AddUint(15, vehicletid, 0); }
  public static void AddGuildId(FlatBufferBuilder builder, ulong guildId) { builder.AddUlong(16, guildId, 0); }
  public static void AddGuildmarkTid(FlatBufferBuilder builder, uint guildmarkTid) { builder.AddUint(17, guildmarkTid, 0); }
  public static void AddServerid(FlatBufferBuilder builder, uint serverid) { builder.AddUint(18, serverid, 0); }
  public static void AddCharId(FlatBufferBuilder builder, ulong charId) { builder.AddUlong(19, charId, 0); }
  public static void AddTeam(FlatBufferBuilder builder, uint team) { builder.AddUint(20, team, 0); }
  public static void AddAbilactions(FlatBufferBuilder builder, VectorOffset abilactionsOffset) { builder.AddOffset(21, abilactionsOffset.Value, 0); }
  public static VectorOffset CreateAbilactionsVector(FlatBufferBuilder builder, Offset<AbilActionInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAbilactionsVectorBlock(FlatBufferBuilder builder, Offset<AbilActionInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAbilactionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<S2C_AddCharInfo> EndS2C_AddCharInfo(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 6);  // name
    builder.Required(o, 10);  // pos
    return new Offset<S2C_AddCharInfo>(o);
  }
};

public struct S2C_AddMonsterInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_AddMonsterInfo GetRootAsS2C_AddMonsterInfo(ByteBuffer _bb) { return GetRootAsS2C_AddMonsterInfo(_bb, new S2C_AddMonsterInfo()); }
  public static S2C_AddMonsterInfo GetRootAsS2C_AddMonsterInfo(ByteBuffer _bb, S2C_AddMonsterInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_AddMonsterInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint MonsterTid { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public ServerPos3? Pos { get { int o = __p.__offset(8); return o != 0 ? (ServerPos3?)(new ServerPos3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public float Dir { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Movespeed { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  ///destPos 좌표가 있을 경우 이동이기 때문에 이동처리를 해줘야 함..
  public ServerPos3? DestPos(int j) { int o = __p.__offset(14); return o != 0 ? (ServerPos3?)(new ServerPos3()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DestPosLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public float CurHp { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float MaxHp { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CurMp { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float MaxMp { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public uint Mezstate { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Parentid { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  ///팀플래그
  public uint Team { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public AbilActionInfo? Abilactions(int j) { int o = __p.__offset(30); return o != 0 ? (AbilActionInfo?)(new AbilActionInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AbilactionsLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<S2C_AddMonsterInfo> CreateS2C_AddMonsterInfo(FlatBufferBuilder builder,
      uint objectid = 0,
      uint monster_tid = 0,
      Offset<ServerPos3> posOffset = default(Offset<ServerPos3>),
      float dir = 0.0f,
      float movespeed = 0.0f,
      VectorOffset destPosOffset = default(VectorOffset),
      float cur_hp = 0.0f,
      float max_hp = 0.0f,
      float cur_mp = 0.0f,
      float max_mp = 0.0f,
      uint mezstate = 0,
      uint parentid = 0,
      uint team = 0,
      VectorOffset abilactionsOffset = default(VectorOffset)) {
    builder.StartObject(14);
    S2C_AddMonsterInfo.AddAbilactions(builder, abilactionsOffset);
    S2C_AddMonsterInfo.AddTeam(builder, team);
    S2C_AddMonsterInfo.AddParentid(builder, parentid);
    S2C_AddMonsterInfo.AddMezstate(builder, mezstate);
    S2C_AddMonsterInfo.AddMaxMp(builder, max_mp);
    S2C_AddMonsterInfo.AddCurMp(builder, cur_mp);
    S2C_AddMonsterInfo.AddMaxHp(builder, max_hp);
    S2C_AddMonsterInfo.AddCurHp(builder, cur_hp);
    S2C_AddMonsterInfo.AddDestPos(builder, destPosOffset);
    S2C_AddMonsterInfo.AddMovespeed(builder, movespeed);
    S2C_AddMonsterInfo.AddDir(builder, dir);
    S2C_AddMonsterInfo.AddPos(builder, posOffset);
    S2C_AddMonsterInfo.AddMonsterTid(builder, monster_tid);
    S2C_AddMonsterInfo.AddObjectid(builder, objectid);
    return S2C_AddMonsterInfo.EndS2C_AddMonsterInfo(builder);
  }

  public static void StartS2C_AddMonsterInfo(FlatBufferBuilder builder) { builder.StartObject(14); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static void AddMonsterTid(FlatBufferBuilder builder, uint monsterTid) { builder.AddUint(1, monsterTid, 0); }
  public static void AddPos(FlatBufferBuilder builder, Offset<ServerPos3> posOffset) { builder.AddOffset(2, posOffset.Value, 0); }
  public static void AddDir(FlatBufferBuilder builder, float dir) { builder.AddFloat(3, dir, 0.0f); }
  public static void AddMovespeed(FlatBufferBuilder builder, float movespeed) { builder.AddFloat(4, movespeed, 0.0f); }
  public static void AddDestPos(FlatBufferBuilder builder, VectorOffset destPosOffset) { builder.AddOffset(5, destPosOffset.Value, 0); }
  public static VectorOffset CreateDestPosVector(FlatBufferBuilder builder, Offset<ServerPos3>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDestPosVectorBlock(FlatBufferBuilder builder, Offset<ServerPos3>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDestPosVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCurHp(FlatBufferBuilder builder, float curHp) { builder.AddFloat(6, curHp, 0.0f); }
  public static void AddMaxHp(FlatBufferBuilder builder, float maxHp) { builder.AddFloat(7, maxHp, 0.0f); }
  public static void AddCurMp(FlatBufferBuilder builder, float curMp) { builder.AddFloat(8, curMp, 0.0f); }
  public static void AddMaxMp(FlatBufferBuilder builder, float maxMp) { builder.AddFloat(9, maxMp, 0.0f); }
  public static void AddMezstate(FlatBufferBuilder builder, uint mezstate) { builder.AddUint(10, mezstate, 0); }
  public static void AddParentid(FlatBufferBuilder builder, uint parentid) { builder.AddUint(11, parentid, 0); }
  public static void AddTeam(FlatBufferBuilder builder, uint team) { builder.AddUint(12, team, 0); }
  public static void AddAbilactions(FlatBufferBuilder builder, VectorOffset abilactionsOffset) { builder.AddOffset(13, abilactionsOffset.Value, 0); }
  public static VectorOffset CreateAbilactionsVector(FlatBufferBuilder builder, Offset<AbilActionInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAbilactionsVectorBlock(FlatBufferBuilder builder, Offset<AbilActionInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAbilactionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<S2C_AddMonsterInfo> EndS2C_AddMonsterInfo(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 8);  // pos
    return new Offset<S2C_AddMonsterInfo>(o);
  }
};

public struct S2C_AddNPCInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_AddNPCInfo GetRootAsS2C_AddNPCInfo(ByteBuffer _bb) { return GetRootAsS2C_AddNPCInfo(_bb, new S2C_AddNPCInfo()); }
  public static S2C_AddNPCInfo GetRootAsS2C_AddNPCInfo(ByteBuffer _bb, S2C_AddNPCInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_AddNPCInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint NpcTid { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public ServerPos3? Pos { get { int o = __p.__offset(8); return o != 0 ? (ServerPos3?)(new ServerPos3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public float Dir { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Movespeed { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  ///destPos 좌표가 있을 경우 이동이기 때문에 이동처리를 해줘야 함..
  public ServerPos3? DestPos(int j) { int o = __p.__offset(14); return o != 0 ? (ServerPos3?)(new ServerPos3()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DestPosLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<S2C_AddNPCInfo> CreateS2C_AddNPCInfo(FlatBufferBuilder builder,
      uint objectid = 0,
      uint npc_tid = 0,
      Offset<ServerPos3> posOffset = default(Offset<ServerPos3>),
      float dir = 0.0f,
      float movespeed = 0.0f,
      VectorOffset destPosOffset = default(VectorOffset)) {
    builder.StartObject(6);
    S2C_AddNPCInfo.AddDestPos(builder, destPosOffset);
    S2C_AddNPCInfo.AddMovespeed(builder, movespeed);
    S2C_AddNPCInfo.AddDir(builder, dir);
    S2C_AddNPCInfo.AddPos(builder, posOffset);
    S2C_AddNPCInfo.AddNpcTid(builder, npc_tid);
    S2C_AddNPCInfo.AddObjectid(builder, objectid);
    return S2C_AddNPCInfo.EndS2C_AddNPCInfo(builder);
  }

  public static void StartS2C_AddNPCInfo(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static void AddNpcTid(FlatBufferBuilder builder, uint npcTid) { builder.AddUint(1, npcTid, 0); }
  public static void AddPos(FlatBufferBuilder builder, Offset<ServerPos3> posOffset) { builder.AddOffset(2, posOffset.Value, 0); }
  public static void AddDir(FlatBufferBuilder builder, float dir) { builder.AddFloat(3, dir, 0.0f); }
  public static void AddMovespeed(FlatBufferBuilder builder, float movespeed) { builder.AddFloat(4, movespeed, 0.0f); }
  public static void AddDestPos(FlatBufferBuilder builder, VectorOffset destPosOffset) { builder.AddOffset(5, destPosOffset.Value, 0); }
  public static VectorOffset CreateDestPosVector(FlatBufferBuilder builder, Offset<ServerPos3>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDestPosVectorBlock(FlatBufferBuilder builder, Offset<ServerPos3>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDestPosVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<S2C_AddNPCInfo> EndS2C_AddNPCInfo(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 8);  // pos
    return new Offset<S2C_AddNPCInfo>(o);
  }
};

public struct S2C_AddGatherObj : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_AddGatherObj GetRootAsS2C_AddGatherObj(ByteBuffer _bb) { return GetRootAsS2C_AddGatherObj(_bb, new S2C_AddGatherObj()); }
  public static S2C_AddGatherObj GetRootAsS2C_AddGatherObj(ByteBuffer _bb, S2C_AddGatherObj obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_AddGatherObj __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint GatherTid { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public ServerPos3? Pos { get { int o = __p.__offset(8); return o != 0 ? (ServerPos3?)(new ServerPos3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public float Dir { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<S2C_AddGatherObj> CreateS2C_AddGatherObj(FlatBufferBuilder builder,
      uint objectid = 0,
      uint gather_tid = 0,
      Offset<ServerPos3> posOffset = default(Offset<ServerPos3>),
      float dir = 0.0f) {
    builder.StartObject(4);
    S2C_AddGatherObj.AddDir(builder, dir);
    S2C_AddGatherObj.AddPos(builder, posOffset);
    S2C_AddGatherObj.AddGatherTid(builder, gather_tid);
    S2C_AddGatherObj.AddObjectid(builder, objectid);
    return S2C_AddGatherObj.EndS2C_AddGatherObj(builder);
  }

  public static void StartS2C_AddGatherObj(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static void AddGatherTid(FlatBufferBuilder builder, uint gatherTid) { builder.AddUint(1, gatherTid, 0); }
  public static void AddPos(FlatBufferBuilder builder, Offset<ServerPos3> posOffset) { builder.AddOffset(2, posOffset.Value, 0); }
  public static void AddDir(FlatBufferBuilder builder, float dir) { builder.AddFloat(3, dir, 0.0f); }
  public static Offset<S2C_AddGatherObj> EndS2C_AddGatherObj(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 8);  // pos
    return new Offset<S2C_AddGatherObj>(o);
  }
};

public struct S2C_DelObject : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_DelObject GetRootAsS2C_DelObject(ByteBuffer _bb) { return GetRootAsS2C_DelObject(_bb, new S2C_DelObject()); }
  public static S2C_DelObject GetRootAsS2C_DelObject(ByteBuffer _bb, S2C_DelObject obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_DelObject __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int ObjectidLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObjectidBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetObjectidBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public uint[] GetObjectidArray() { return __p.__vector_as_array<uint>(4); }

  public static Offset<S2C_DelObject> CreateS2C_DelObject(FlatBufferBuilder builder,
      VectorOffset objectidOffset = default(VectorOffset)) {
    builder.StartObject(1);
    S2C_DelObject.AddObjectid(builder, objectidOffset);
    return S2C_DelObject.EndS2C_DelObject(builder);
  }

  public static void StartS2C_DelObject(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddObjectid(FlatBufferBuilder builder, VectorOffset objectidOffset) { builder.AddOffset(0, objectidOffset.Value, 0); }
  public static VectorOffset CreateObjectidVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateObjectidVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartObjectidVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<S2C_DelObject> EndS2C_DelObject(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_DelObject>(o);
  }
};

public struct CS_MoveToDir : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CS_MoveToDir GetRootAsCS_MoveToDir(ByteBuffer _bb) { return GetRootAsCS_MoveToDir(_bb, new CS_MoveToDir()); }
  public static CS_MoveToDir GetRootAsCS_MoveToDir(ByteBuffer _bb, CS_MoveToDir obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CS_MoveToDir __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public ServerPos3? Pos { get { int o = __p.__offset(6); return o != 0 ? (ServerPos3?)(new ServerPos3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  ///이동방향(Y축 각도)
  public float Dir { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  ///이동스피드
  public float Speed { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  ///바라보는 방향
  public float Lookdir { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<CS_MoveToDir> CreateCS_MoveToDir(FlatBufferBuilder builder,
      uint objectid = 0,
      Offset<ServerPos3> posOffset = default(Offset<ServerPos3>),
      float dir = 0.0f,
      float speed = 0.0f,
      float lookdir = 0.0f) {
    builder.StartObject(5);
    CS_MoveToDir.AddLookdir(builder, lookdir);
    CS_MoveToDir.AddSpeed(builder, speed);
    CS_MoveToDir.AddDir(builder, dir);
    CS_MoveToDir.AddPos(builder, posOffset);
    CS_MoveToDir.AddObjectid(builder, objectid);
    return CS_MoveToDir.EndCS_MoveToDir(builder);
  }

  public static void StartCS_MoveToDir(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static void AddPos(FlatBufferBuilder builder, Offset<ServerPos3> posOffset) { builder.AddOffset(1, posOffset.Value, 0); }
  public static void AddDir(FlatBufferBuilder builder, float dir) { builder.AddFloat(2, dir, 0.0f); }
  public static void AddSpeed(FlatBufferBuilder builder, float speed) { builder.AddFloat(3, speed, 0.0f); }
  public static void AddLookdir(FlatBufferBuilder builder, float lookdir) { builder.AddFloat(4, lookdir, 0.0f); }
  public static Offset<CS_MoveToDir> EndCS_MoveToDir(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 6);  // pos
    return new Offset<CS_MoveToDir>(o);
  }
};

public struct CS_MoveToDest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CS_MoveToDest GetRootAsCS_MoveToDest(ByteBuffer _bb) { return GetRootAsCS_MoveToDest(_bb, new CS_MoveToDest()); }
  public static CS_MoveToDest GetRootAsCS_MoveToDest(ByteBuffer _bb, CS_MoveToDest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CS_MoveToDest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  ///현재 위치.
  public ServerPos3? Pos { get { int o = __p.__offset(6); return o != 0 ? (ServerPos3?)(new ServerPos3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public float Speed { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  ///이동 좌표 노드 리스트
  public ServerPos3? Dest(int j) { int o = __p.__offset(10); return o != 0 ? (ServerPos3?)(new ServerPos3()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DestLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<CS_MoveToDest> CreateCS_MoveToDest(FlatBufferBuilder builder,
      uint objectid = 0,
      Offset<ServerPos3> posOffset = default(Offset<ServerPos3>),
      float speed = 0.0f,
      VectorOffset destOffset = default(VectorOffset)) {
    builder.StartObject(4);
    CS_MoveToDest.AddDest(builder, destOffset);
    CS_MoveToDest.AddSpeed(builder, speed);
    CS_MoveToDest.AddPos(builder, posOffset);
    CS_MoveToDest.AddObjectid(builder, objectid);
    return CS_MoveToDest.EndCS_MoveToDest(builder);
  }

  public static void StartCS_MoveToDest(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static void AddPos(FlatBufferBuilder builder, Offset<ServerPos3> posOffset) { builder.AddOffset(1, posOffset.Value, 0); }
  public static void AddSpeed(FlatBufferBuilder builder, float speed) { builder.AddFloat(2, speed, 0.0f); }
  public static void AddDest(FlatBufferBuilder builder, VectorOffset destOffset) { builder.AddOffset(3, destOffset.Value, 0); }
  public static VectorOffset CreateDestVector(FlatBufferBuilder builder, Offset<ServerPos3>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDestVectorBlock(FlatBufferBuilder builder, Offset<ServerPos3>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDestVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<CS_MoveToDest> EndCS_MoveToDest(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 6);  // pos
    return new Offset<CS_MoveToDest>(o);
  }
};

///이동시 일정 시간의 이동 경로를 미리 체크 해서 충돌일 경우.. 해당 패킷을 보내준다..
public struct CS_MoveToCollision : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CS_MoveToCollision GetRootAsCS_MoveToCollision(ByteBuffer _bb) { return GetRootAsCS_MoveToCollision(_bb, new CS_MoveToCollision()); }
  public static CS_MoveToCollision GetRootAsCS_MoveToCollision(ByteBuffer _bb, CS_MoveToCollision obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CS_MoveToCollision __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  ///현재 위치
  public ServerPos3? Pos { get { int o = __p.__offset(6); return o != 0 ? (ServerPos3?)(new ServerPos3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public float Speed { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Lookdir { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  ///충돌좌표..
  public ServerPos3? Dest { get { int o = __p.__offset(12); return o != 0 ? (ServerPos3?)(new ServerPos3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<CS_MoveToCollision> CreateCS_MoveToCollision(FlatBufferBuilder builder,
      uint objectid = 0,
      Offset<ServerPos3> posOffset = default(Offset<ServerPos3>),
      float speed = 0.0f,
      float lookdir = 0.0f,
      Offset<ServerPos3> destOffset = default(Offset<ServerPos3>)) {
    builder.StartObject(5);
    CS_MoveToCollision.AddDest(builder, destOffset);
    CS_MoveToCollision.AddLookdir(builder, lookdir);
    CS_MoveToCollision.AddSpeed(builder, speed);
    CS_MoveToCollision.AddPos(builder, posOffset);
    CS_MoveToCollision.AddObjectid(builder, objectid);
    return CS_MoveToCollision.EndCS_MoveToCollision(builder);
  }

  public static void StartCS_MoveToCollision(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static void AddPos(FlatBufferBuilder builder, Offset<ServerPos3> posOffset) { builder.AddOffset(1, posOffset.Value, 0); }
  public static void AddSpeed(FlatBufferBuilder builder, float speed) { builder.AddFloat(2, speed, 0.0f); }
  public static void AddLookdir(FlatBufferBuilder builder, float lookdir) { builder.AddFloat(3, lookdir, 0.0f); }
  public static void AddDest(FlatBufferBuilder builder, Offset<ServerPos3> destOffset) { builder.AddOffset(4, destOffset.Value, 0); }
  public static Offset<CS_MoveToCollision> EndCS_MoveToCollision(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 6);  // pos
    builder.Required(o, 12);  // dest
    return new Offset<CS_MoveToCollision>(o);
  }
};

public struct CS_MoveStop : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CS_MoveStop GetRootAsCS_MoveStop(ByteBuffer _bb) { return GetRootAsCS_MoveStop(_bb, new CS_MoveStop()); }
  public static CS_MoveStop GetRootAsCS_MoveStop(ByteBuffer _bb, CS_MoveStop obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CS_MoveStop __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  ///현재 위치
  public ServerPos3? Pos { get { int o = __p.__offset(6); return o != 0 ? (ServerPos3?)(new ServerPos3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public float Lookdir { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<CS_MoveStop> CreateCS_MoveStop(FlatBufferBuilder builder,
      uint objectid = 0,
      Offset<ServerPos3> posOffset = default(Offset<ServerPos3>),
      float lookdir = 0.0f) {
    builder.StartObject(3);
    CS_MoveStop.AddLookdir(builder, lookdir);
    CS_MoveStop.AddPos(builder, posOffset);
    CS_MoveStop.AddObjectid(builder, objectid);
    return CS_MoveStop.EndCS_MoveStop(builder);
  }

  public static void StartCS_MoveStop(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static void AddPos(FlatBufferBuilder builder, Offset<ServerPos3> posOffset) { builder.AddOffset(1, posOffset.Value, 0); }
  public static void AddLookdir(FlatBufferBuilder builder, float lookdir) { builder.AddFloat(2, lookdir, 0.0f); }
  public static Offset<CS_MoveStop> EndCS_MoveStop(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 6);  // pos
    return new Offset<CS_MoveStop>(o);
  }
};

public struct CS_Attack : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CS_Attack GetRootAsCS_Attack(ByteBuffer _bb) { return GetRootAsCS_Attack(_bb, new CS_Attack()); }
  public static CS_Attack GetRootAsCS_Attack(ByteBuffer _bb, CS_Attack obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CS_Attack __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public ServerPos3? Pos { get { int o = __p.__offset(6); return o != 0 ? (ServerPos3?)(new ServerPos3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public float Dir { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public uint Skillno { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  ///타켓 아이디
  public uint Targetid { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  ///콤보 번호
  public byte Combo { get { int o = __p.__offset(14); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  ///공속
  public float Attackspeed { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public uint Endtime { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<CS_Attack> CreateCS_Attack(FlatBufferBuilder builder,
      uint objectid = 0,
      Offset<ServerPos3> posOffset = default(Offset<ServerPos3>),
      float dir = 0.0f,
      uint skillno = 0,
      uint targetid = 0,
      byte combo = 0,
      float attackspeed = 0.0f,
      uint endtime = 0) {
    builder.StartObject(8);
    CS_Attack.AddEndtime(builder, endtime);
    CS_Attack.AddAttackspeed(builder, attackspeed);
    CS_Attack.AddTargetid(builder, targetid);
    CS_Attack.AddSkillno(builder, skillno);
    CS_Attack.AddDir(builder, dir);
    CS_Attack.AddPos(builder, posOffset);
    CS_Attack.AddObjectid(builder, objectid);
    CS_Attack.AddCombo(builder, combo);
    return CS_Attack.EndCS_Attack(builder);
  }

  public static void StartCS_Attack(FlatBufferBuilder builder) { builder.StartObject(8); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static void AddPos(FlatBufferBuilder builder, Offset<ServerPos3> posOffset) { builder.AddOffset(1, posOffset.Value, 0); }
  public static void AddDir(FlatBufferBuilder builder, float dir) { builder.AddFloat(2, dir, 0.0f); }
  public static void AddSkillno(FlatBufferBuilder builder, uint skillno) { builder.AddUint(3, skillno, 0); }
  public static void AddTargetid(FlatBufferBuilder builder, uint targetid) { builder.AddUint(4, targetid, 0); }
  public static void AddCombo(FlatBufferBuilder builder, byte combo) { builder.AddByte(5, combo, 0); }
  public static void AddAttackspeed(FlatBufferBuilder builder, float attackspeed) { builder.AddFloat(6, attackspeed, 0.0f); }
  public static void AddEndtime(FlatBufferBuilder builder, uint endtime) { builder.AddUint(7, endtime, 0); }
  public static Offset<CS_Attack> EndCS_Attack(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 6);  // pos
    return new Offset<CS_Attack>(o);
  }
};

public struct CS_AttackToPos : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CS_AttackToPos GetRootAsCS_AttackToPos(ByteBuffer _bb) { return GetRootAsCS_AttackToPos(_bb, new CS_AttackToPos()); }
  public static CS_AttackToPos GetRootAsCS_AttackToPos(ByteBuffer _bb, CS_AttackToPos obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CS_AttackToPos __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public ServerPos3? Pos { get { int o = __p.__offset(6); return o != 0 ? (ServerPos3?)(new ServerPos3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public float Dir { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public uint Skillno { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  ///타켓 죄표
  public ServerPos3? Targetpos { get { int o = __p.__offset(12); return o != 0 ? (ServerPos3?)(new ServerPos3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  ///콤보 번호
  public byte Combo { get { int o = __p.__offset(14); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  ///공속
  public float Attackspeed { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public uint Endtime { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<CS_AttackToPos> CreateCS_AttackToPos(FlatBufferBuilder builder,
      uint objectid = 0,
      Offset<ServerPos3> posOffset = default(Offset<ServerPos3>),
      float dir = 0.0f,
      uint skillno = 0,
      Offset<ServerPos3> targetposOffset = default(Offset<ServerPos3>),
      byte combo = 0,
      float attackspeed = 0.0f,
      uint endtime = 0) {
    builder.StartObject(8);
    CS_AttackToPos.AddEndtime(builder, endtime);
    CS_AttackToPos.AddAttackspeed(builder, attackspeed);
    CS_AttackToPos.AddTargetpos(builder, targetposOffset);
    CS_AttackToPos.AddSkillno(builder, skillno);
    CS_AttackToPos.AddDir(builder, dir);
    CS_AttackToPos.AddPos(builder, posOffset);
    CS_AttackToPos.AddObjectid(builder, objectid);
    CS_AttackToPos.AddCombo(builder, combo);
    return CS_AttackToPos.EndCS_AttackToPos(builder);
  }

  public static void StartCS_AttackToPos(FlatBufferBuilder builder) { builder.StartObject(8); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static void AddPos(FlatBufferBuilder builder, Offset<ServerPos3> posOffset) { builder.AddOffset(1, posOffset.Value, 0); }
  public static void AddDir(FlatBufferBuilder builder, float dir) { builder.AddFloat(2, dir, 0.0f); }
  public static void AddSkillno(FlatBufferBuilder builder, uint skillno) { builder.AddUint(3, skillno, 0); }
  public static void AddTargetpos(FlatBufferBuilder builder, Offset<ServerPos3> targetposOffset) { builder.AddOffset(4, targetposOffset.Value, 0); }
  public static void AddCombo(FlatBufferBuilder builder, byte combo) { builder.AddByte(5, combo, 0); }
  public static void AddAttackspeed(FlatBufferBuilder builder, float attackspeed) { builder.AddFloat(6, attackspeed, 0.0f); }
  public static void AddEndtime(FlatBufferBuilder builder, uint endtime) { builder.AddUint(7, endtime, 0); }
  public static Offset<CS_AttackToPos> EndCS_AttackToPos(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 6);  // pos
    return new Offset<CS_AttackToPos>(o);
  }
};

public struct C2S_ReqSkill : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static C2S_ReqSkill GetRootAsC2S_ReqSkill(ByteBuffer _bb) { return GetRootAsC2S_ReqSkill(_bb, new C2S_ReqSkill()); }
  public static C2S_ReqSkill GetRootAsC2S_ReqSkill(ByteBuffer _bb, C2S_ReqSkill obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public C2S_ReqSkill __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public ServerPos3? Pos { get { int o = __p.__offset(6); return o != 0 ? (ServerPos3?)(new ServerPos3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public float Dir { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public uint Skillno { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  ///타켓 아이디
  public uint Targetid { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  ///공속
  public float Attackspeed { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<C2S_ReqSkill> CreateC2S_ReqSkill(FlatBufferBuilder builder,
      uint objectid = 0,
      Offset<ServerPos3> posOffset = default(Offset<ServerPos3>),
      float dir = 0.0f,
      uint skillno = 0,
      uint targetid = 0,
      float attackspeed = 0.0f) {
    builder.StartObject(6);
    C2S_ReqSkill.AddAttackspeed(builder, attackspeed);
    C2S_ReqSkill.AddTargetid(builder, targetid);
    C2S_ReqSkill.AddSkillno(builder, skillno);
    C2S_ReqSkill.AddDir(builder, dir);
    C2S_ReqSkill.AddPos(builder, posOffset);
    C2S_ReqSkill.AddObjectid(builder, objectid);
    return C2S_ReqSkill.EndC2S_ReqSkill(builder);
  }

  public static void StartC2S_ReqSkill(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static void AddPos(FlatBufferBuilder builder, Offset<ServerPos3> posOffset) { builder.AddOffset(1, posOffset.Value, 0); }
  public static void AddDir(FlatBufferBuilder builder, float dir) { builder.AddFloat(2, dir, 0.0f); }
  public static void AddSkillno(FlatBufferBuilder builder, uint skillno) { builder.AddUint(3, skillno, 0); }
  public static void AddTargetid(FlatBufferBuilder builder, uint targetid) { builder.AddUint(4, targetid, 0); }
  public static void AddAttackspeed(FlatBufferBuilder builder, float attackspeed) { builder.AddFloat(5, attackspeed, 0.0f); }
  public static Offset<C2S_ReqSkill> EndC2S_ReqSkill(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 6);  // pos
    return new Offset<C2S_ReqSkill>(o);
  }
};

public struct S2C_Damage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_Damage GetRootAsS2C_Damage(ByteBuffer _bb) { return GetRootAsS2C_Damage(_bb, new S2C_Damage()); }
  public static S2C_Damage GetRootAsS2C_Damage(ByteBuffer _bb, S2C_Damage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_Damage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Atkobjid { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Dmg { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Skillno { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public byte Damagetype { get { int o = __p.__offset(12); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  ///데미지 적용후 최종 HP 0이거나 작으면 죽은 상태..
  public float Currhp { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  ///경직 시간
  public float StiffenDuration { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<S2C_Damage> CreateS2C_Damage(FlatBufferBuilder builder,
      uint objectid = 0,
      uint atkobjid = 0,
      uint dmg = 0,
      uint skillno = 0,
      byte damagetype = 0,
      float currhp = 0.0f,
      float stiffen_duration = 0.0f) {
    builder.StartObject(7);
    S2C_Damage.AddStiffenDuration(builder, stiffen_duration);
    S2C_Damage.AddCurrhp(builder, currhp);
    S2C_Damage.AddSkillno(builder, skillno);
    S2C_Damage.AddDmg(builder, dmg);
    S2C_Damage.AddAtkobjid(builder, atkobjid);
    S2C_Damage.AddObjectid(builder, objectid);
    S2C_Damage.AddDamagetype(builder, damagetype);
    return S2C_Damage.EndS2C_Damage(builder);
  }

  public static void StartS2C_Damage(FlatBufferBuilder builder) { builder.StartObject(7); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static void AddAtkobjid(FlatBufferBuilder builder, uint atkobjid) { builder.AddUint(1, atkobjid, 0); }
  public static void AddDmg(FlatBufferBuilder builder, uint dmg) { builder.AddUint(2, dmg, 0); }
  public static void AddSkillno(FlatBufferBuilder builder, uint skillno) { builder.AddUint(3, skillno, 0); }
  public static void AddDamagetype(FlatBufferBuilder builder, byte damagetype) { builder.AddByte(4, damagetype, 0); }
  public static void AddCurrhp(FlatBufferBuilder builder, float currhp) { builder.AddFloat(5, currhp, 0.0f); }
  public static void AddStiffenDuration(FlatBufferBuilder builder, float stiffenDuration) { builder.AddFloat(6, stiffenDuration, 0.0f); }
  public static Offset<S2C_Damage> EndS2C_Damage(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_Damage>(o);
  }
};

public struct S2C_AbilityNfy : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_AbilityNfy GetRootAsS2C_AbilityNfy(ByteBuffer _bb) { return GetRootAsS2C_AbilityNfy(_bb, new S2C_AbilityNfy()); }
  public static S2C_AbilityNfy GetRootAsS2C_AbilityNfy(ByteBuffer _bb, S2C_AbilityNfy obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_AbilityNfy __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public Ability? Abils(int j) { int o = __p.__offset(6); return o != 0 ? (Ability?)(new Ability()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AbilsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<S2C_AbilityNfy> CreateS2C_AbilityNfy(FlatBufferBuilder builder,
      uint objectid = 0,
      VectorOffset abilsOffset = default(VectorOffset)) {
    builder.StartObject(2);
    S2C_AbilityNfy.AddAbils(builder, abilsOffset);
    S2C_AbilityNfy.AddObjectid(builder, objectid);
    return S2C_AbilityNfy.EndS2C_AbilityNfy(builder);
  }

  public static void StartS2C_AbilityNfy(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static void AddAbils(FlatBufferBuilder builder, VectorOffset abilsOffset) { builder.AddOffset(1, abilsOffset.Value, 0); }
  public static VectorOffset CreateAbilsVector(FlatBufferBuilder builder, Offset<Ability>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAbilsVectorBlock(FlatBufferBuilder builder, Offset<Ability>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAbilsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<S2C_AbilityNfy> EndS2C_AbilityNfy(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_AbilityNfy>(o);
  }
};

public struct S2C_SkillAbility : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_SkillAbility GetRootAsS2C_SkillAbility(ByteBuffer _bb) { return GetRootAsS2C_SkillAbility(_bb, new S2C_SkillAbility()); }
  public static S2C_SkillAbility GetRootAsS2C_SkillAbility(ByteBuffer _bb, S2C_SkillAbility obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_SkillAbility __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public SkillAbility? Skillabils(int j) { int o = __p.__offset(6); return o != 0 ? (SkillAbility?)(new SkillAbility()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SkillabilsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<S2C_SkillAbility> CreateS2C_SkillAbility(FlatBufferBuilder builder,
      uint objectid = 0,
      VectorOffset skillabilsOffset = default(VectorOffset)) {
    builder.StartObject(2);
    S2C_SkillAbility.AddSkillabils(builder, skillabilsOffset);
    S2C_SkillAbility.AddObjectid(builder, objectid);
    return S2C_SkillAbility.EndS2C_SkillAbility(builder);
  }

  public static void StartS2C_SkillAbility(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static void AddSkillabils(FlatBufferBuilder builder, VectorOffset skillabilsOffset) { builder.AddOffset(1, skillabilsOffset.Value, 0); }
  public static VectorOffset CreateSkillabilsVector(FlatBufferBuilder builder, Offset<SkillAbility>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSkillabilsVectorBlock(FlatBufferBuilder builder, Offset<SkillAbility>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSkillabilsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<S2C_SkillAbility> EndS2C_SkillAbility(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_SkillAbility>(o);
  }
};

public struct S2C_ForceMove : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_ForceMove GetRootAsS2C_ForceMove(ByteBuffer _bb) { return GetRootAsS2C_ForceMove(_bb, new S2C_ForceMove()); }
  public static S2C_ForceMove GetRootAsS2C_ForceMove(ByteBuffer _bb, S2C_ForceMove obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_ForceMove __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  ///최종목적지
  public ServerPos3? Pos { get { int o = __p.__offset(6); return o != 0 ? (ServerPos3?)(new ServerPos3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  ///이동시간
  public float Duration { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  ///바라보는 방향
  public float Dir { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  ///PosMoveType
  public byte Movetype { get { int o = __p.__offset(12); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }

  public static Offset<S2C_ForceMove> CreateS2C_ForceMove(FlatBufferBuilder builder,
      uint objectid = 0,
      Offset<ServerPos3> posOffset = default(Offset<ServerPos3>),
      float duration = 0.0f,
      float dir = 0.0f,
      byte movetype = 0) {
    builder.StartObject(5);
    S2C_ForceMove.AddDir(builder, dir);
    S2C_ForceMove.AddDuration(builder, duration);
    S2C_ForceMove.AddPos(builder, posOffset);
    S2C_ForceMove.AddObjectid(builder, objectid);
    S2C_ForceMove.AddMovetype(builder, movetype);
    return S2C_ForceMove.EndS2C_ForceMove(builder);
  }

  public static void StartS2C_ForceMove(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static void AddPos(FlatBufferBuilder builder, Offset<ServerPos3> posOffset) { builder.AddOffset(1, posOffset.Value, 0); }
  public static void AddDuration(FlatBufferBuilder builder, float duration) { builder.AddFloat(2, duration, 0.0f); }
  public static void AddDir(FlatBufferBuilder builder, float dir) { builder.AddFloat(3, dir, 0.0f); }
  public static void AddMovetype(FlatBufferBuilder builder, byte movetype) { builder.AddByte(4, movetype, 0); }
  public static Offset<S2C_ForceMove> EndS2C_ForceMove(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 6);  // pos
    return new Offset<S2C_ForceMove>(o);
  }
};

///서버에서 틱동기화를 위해서 보내주는 패킷.
public struct S2C_GameTick : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_GameTick GetRootAsS2C_GameTick(ByteBuffer _bb) { return GetRootAsS2C_GameTick(_bb, new S2C_GameTick()); }
  public static S2C_GameTick GetRootAsS2C_GameTick(ByteBuffer _bb, S2C_GameTick obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_GameTick __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  ///서버의 현재 틱
  public uint Tick { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  ///틱의 간격(예: 50ms 일경우 0.05)
  public float Inteval { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<S2C_GameTick> CreateS2C_GameTick(FlatBufferBuilder builder,
      uint tick = 0,
      float inteval = 0.0f) {
    builder.StartObject(2);
    S2C_GameTick.AddInteval(builder, inteval);
    S2C_GameTick.AddTick(builder, tick);
    return S2C_GameTick.EndS2C_GameTick(builder);
  }

  public static void StartS2C_GameTick(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddTick(FlatBufferBuilder builder, uint tick) { builder.AddUint(0, tick, 0); }
  public static void AddInteval(FlatBufferBuilder builder, float inteval) { builder.AddFloat(1, inteval, 0.0f); }
  public static Offset<S2C_GameTick> EndS2C_GameTick(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_GameTick>(o);
  }
};

public struct S2C_ChangeMezState : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_ChangeMezState GetRootAsS2C_ChangeMezState(ByteBuffer _bb) { return GetRootAsS2C_ChangeMezState(_bb, new S2C_ChangeMezState()); }
  public static S2C_ChangeMezState GetRootAsS2C_ChangeMezState(ByteBuffer _bb, S2C_ChangeMezState obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_ChangeMezState __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Mezstate { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<S2C_ChangeMezState> CreateS2C_ChangeMezState(FlatBufferBuilder builder,
      uint objectid = 0,
      uint mezstate = 0) {
    builder.StartObject(2);
    S2C_ChangeMezState.AddMezstate(builder, mezstate);
    S2C_ChangeMezState.AddObjectid(builder, objectid);
    return S2C_ChangeMezState.EndS2C_ChangeMezState(builder);
  }

  public static void StartS2C_ChangeMezState(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static void AddMezstate(FlatBufferBuilder builder, uint mezstate) { builder.AddUint(1, mezstate, 0); }
  public static Offset<S2C_ChangeMezState> EndS2C_ChangeMezState(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_ChangeMezState>(o);
  }
};

public struct S2C_MoveMap : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_MoveMap GetRootAsS2C_MoveMap(ByteBuffer _bb) { return GetRootAsS2C_MoveMap(_bb, new S2C_MoveMap()); }
  public static S2C_MoveMap GetRootAsS2C_MoveMap(ByteBuffer _bb, S2C_MoveMap obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_MoveMap __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Stagetid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public E_ForeceMoveMap_Reason Reason { get { int o = __p.__offset(6); return o != 0 ? (E_ForeceMoveMap_Reason)__p.bb.GetUshort(o + __p.bb_pos) : E_ForeceMoveMap_Reason.Not_Buff; } }

  public static Offset<S2C_MoveMap> CreateS2C_MoveMap(FlatBufferBuilder builder,
      uint stagetid = 0,
      E_ForeceMoveMap_Reason reason = E_ForeceMoveMap_Reason.Not_Buff) {
    builder.StartObject(2);
    S2C_MoveMap.AddStagetid(builder, stagetid);
    S2C_MoveMap.AddReason(builder, reason);
    return S2C_MoveMap.EndS2C_MoveMap(builder);
  }

  public static void StartS2C_MoveMap(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddStagetid(FlatBufferBuilder builder, uint stagetid) { builder.AddUint(0, stagetid, 0); }
  public static void AddReason(FlatBufferBuilder builder, E_ForeceMoveMap_Reason reason) { builder.AddUshort(1, (ushort)reason, 0); }
  public static Offset<S2C_MoveMap> EndS2C_MoveMap(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_MoveMap>(o);
  }
};

public struct S2C_ChangeClass : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_ChangeClass GetRootAsS2C_ChangeClass(ByteBuffer _bb) { return GetRootAsS2C_ChangeClass(_bb, new S2C_ChangeClass()); }
  public static S2C_ChangeClass GetRootAsS2C_ChangeClass(ByteBuffer _bb, S2C_ChangeClass obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_ChangeClass __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint ChangeTid { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<S2C_ChangeClass> CreateS2C_ChangeClass(FlatBufferBuilder builder,
      uint objectid = 0,
      uint change_tid = 0) {
    builder.StartObject(2);
    S2C_ChangeClass.AddChangeTid(builder, change_tid);
    S2C_ChangeClass.AddObjectid(builder, objectid);
    return S2C_ChangeClass.EndS2C_ChangeClass(builder);
  }

  public static void StartS2C_ChangeClass(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static void AddChangeTid(FlatBufferBuilder builder, uint changeTid) { builder.AddUint(1, changeTid, 0); }
  public static Offset<S2C_ChangeClass> EndS2C_ChangeClass(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_ChangeClass>(o);
  }
};

public struct C2S_ReqObjInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static C2S_ReqObjInfo GetRootAsC2S_ReqObjInfo(ByteBuffer _bb) { return GetRootAsC2S_ReqObjInfo(_bb, new C2S_ReqObjInfo()); }
  public static C2S_ReqObjInfo GetRootAsC2S_ReqObjInfo(ByteBuffer _bb, C2S_ReqObjInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public C2S_ReqObjInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<C2S_ReqObjInfo> CreateC2S_ReqObjInfo(FlatBufferBuilder builder,
      uint objectid = 0) {
    builder.StartObject(1);
    C2S_ReqObjInfo.AddObjectid(builder, objectid);
    return C2S_ReqObjInfo.EndC2S_ReqObjInfo(builder);
  }

  public static void StartC2S_ReqObjInfo(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static Offset<C2S_ReqObjInfo> EndC2S_ReqObjInfo(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<C2S_ReqObjInfo>(o);
  }
};

public struct S2C_AddAbilAction : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_AddAbilAction GetRootAsS2C_AddAbilAction(ByteBuffer _bb) { return GetRootAsS2C_AddAbilAction(_bb, new S2C_AddAbilAction()); }
  public static S2C_AddAbilAction GetRootAsS2C_AddAbilAction(ByteBuffer _bb, S2C_AddAbilAction obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_AddAbilAction __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Abilactiontid { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Restsec { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public bool NotConsume { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<S2C_AddAbilAction> CreateS2C_AddAbilAction(FlatBufferBuilder builder,
      uint objectid = 0,
      uint abilactiontid = 0,
      uint restsec = 0,
      bool not_consume = false) {
    builder.StartObject(4);
    S2C_AddAbilAction.AddRestsec(builder, restsec);
    S2C_AddAbilAction.AddAbilactiontid(builder, abilactiontid);
    S2C_AddAbilAction.AddObjectid(builder, objectid);
    S2C_AddAbilAction.AddNotConsume(builder, not_consume);
    return S2C_AddAbilAction.EndS2C_AddAbilAction(builder);
  }

  public static void StartS2C_AddAbilAction(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static void AddAbilactiontid(FlatBufferBuilder builder, uint abilactiontid) { builder.AddUint(1, abilactiontid, 0); }
  public static void AddRestsec(FlatBufferBuilder builder, uint restsec) { builder.AddUint(2, restsec, 0); }
  public static void AddNotConsume(FlatBufferBuilder builder, bool notConsume) { builder.AddBool(3, notConsume, false); }
  public static Offset<S2C_AddAbilAction> EndS2C_AddAbilAction(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_AddAbilAction>(o);
  }
};

public struct S2C_DelAbilAction : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_DelAbilAction GetRootAsS2C_DelAbilAction(ByteBuffer _bb) { return GetRootAsS2C_DelAbilAction(_bb, new S2C_DelAbilAction()); }
  public static S2C_DelAbilAction GetRootAsS2C_DelAbilAction(ByteBuffer _bb, S2C_DelAbilAction obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_DelAbilAction __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Abilactiontid { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<S2C_DelAbilAction> CreateS2C_DelAbilAction(FlatBufferBuilder builder,
      uint objectid = 0,
      uint abilactiontid = 0) {
    builder.StartObject(2);
    S2C_DelAbilAction.AddAbilactiontid(builder, abilactiontid);
    S2C_DelAbilAction.AddObjectid(builder, objectid);
    return S2C_DelAbilAction.EndS2C_DelAbilAction(builder);
  }

  public static void StartS2C_DelAbilAction(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static void AddAbilactiontid(FlatBufferBuilder builder, uint abilactiontid) { builder.AddUint(1, abilactiontid, 0); }
  public static Offset<S2C_DelAbilAction> EndS2C_DelAbilAction(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_DelAbilAction>(o);
  }
};

public struct DropItem : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DropItem GetRootAsDropItem(ByteBuffer _bb) { return GetRootAsDropItem(_bb, new DropItem()); }
  public static DropItem GetRootAsDropItem(ByteBuffer _bb, DropItem obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DropItem __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint ItemTid { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public ulong Cnt { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public uint BreakItemTid { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint SellItemTid { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<DropItem> CreateDropItem(FlatBufferBuilder builder,
      uint objectid = 0,
      uint item_tid = 0,
      ulong cnt = 0,
      uint break_item_tid = 0,
      uint sell_item_tid = 0) {
    builder.StartObject(5);
    DropItem.AddCnt(builder, cnt);
    DropItem.AddSellItemTid(builder, sell_item_tid);
    DropItem.AddBreakItemTid(builder, break_item_tid);
    DropItem.AddItemTid(builder, item_tid);
    DropItem.AddObjectid(builder, objectid);
    return DropItem.EndDropItem(builder);
  }

  public static void StartDropItem(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static void AddItemTid(FlatBufferBuilder builder, uint itemTid) { builder.AddUint(1, itemTid, 0); }
  public static void AddCnt(FlatBufferBuilder builder, ulong cnt) { builder.AddUlong(2, cnt, 0); }
  public static void AddBreakItemTid(FlatBufferBuilder builder, uint breakItemTid) { builder.AddUint(3, breakItemTid, 0); }
  public static void AddSellItemTid(FlatBufferBuilder builder, uint sellItemTid) { builder.AddUint(4, sellItemTid, 0); }
  public static Offset<DropItem> EndDropItem(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DropItem>(o);
  }
};

public struct S2C_DropItemInfos : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_DropItemInfos GetRootAsS2C_DropItemInfos(ByteBuffer _bb) { return GetRootAsS2C_DropItemInfos(_bb, new S2C_DropItemInfos()); }
  public static S2C_DropItemInfos GetRootAsS2C_DropItemInfos(ByteBuffer _bb, S2C_DropItemInfos obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_DropItemInfos __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ServerPos3? Pos { get { int o = __p.__offset(4); return o != 0 ? (ServerPos3?)(new ServerPos3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public DropItem? Items(int j) { int o = __p.__offset(6); return o != 0 ? (DropItem?)(new DropItem()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ItemsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<S2C_DropItemInfos> CreateS2C_DropItemInfos(FlatBufferBuilder builder,
      Offset<ServerPos3> posOffset = default(Offset<ServerPos3>),
      VectorOffset itemsOffset = default(VectorOffset)) {
    builder.StartObject(2);
    S2C_DropItemInfos.AddItems(builder, itemsOffset);
    S2C_DropItemInfos.AddPos(builder, posOffset);
    return S2C_DropItemInfos.EndS2C_DropItemInfos(builder);
  }

  public static void StartS2C_DropItemInfos(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddPos(FlatBufferBuilder builder, Offset<ServerPos3> posOffset) { builder.AddOffset(0, posOffset.Value, 0); }
  public static void AddItems(FlatBufferBuilder builder, VectorOffset itemsOffset) { builder.AddOffset(1, itemsOffset.Value, 0); }
  public static VectorOffset CreateItemsVector(FlatBufferBuilder builder, Offset<DropItem>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateItemsVectorBlock(FlatBufferBuilder builder, Offset<DropItem>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartItemsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<S2C_DropItemInfos> EndS2C_DropItemInfos(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // pos
    return new Offset<S2C_DropItemInfos>(o);
  }
};

public struct S2C_RemainItemInfos : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_RemainItemInfos GetRootAsS2C_RemainItemInfos(ByteBuffer _bb) { return GetRootAsS2C_RemainItemInfos(_bb, new S2C_RemainItemInfos()); }
  public static S2C_RemainItemInfos GetRootAsS2C_RemainItemInfos(ByteBuffer _bb, S2C_RemainItemInfos obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_RemainItemInfos __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public AccountItemStack? AccountStack(int j) { int o = __p.__offset(4); return o != 0 ? (AccountItemStack?)(new AccountItemStack()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AccountStackLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ItemStack? Stack(int j) { int o = __p.__offset(6); return o != 0 ? (ItemStack?)(new ItemStack()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int StackLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ItemEquipment? Equip(int j) { int o = __p.__offset(8); return o != 0 ? (ItemEquipment?)(new ItemEquipment()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int EquipLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Rune? Rune(int j) { int o = __p.__offset(10); return o != 0 ? (Rune?)(new Rune()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RuneLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<S2C_RemainItemInfos> CreateS2C_RemainItemInfos(FlatBufferBuilder builder,
      VectorOffset account_stackOffset = default(VectorOffset),
      VectorOffset stackOffset = default(VectorOffset),
      VectorOffset equipOffset = default(VectorOffset),
      VectorOffset runeOffset = default(VectorOffset)) {
    builder.StartObject(4);
    S2C_RemainItemInfos.AddRune(builder, runeOffset);
    S2C_RemainItemInfos.AddEquip(builder, equipOffset);
    S2C_RemainItemInfos.AddStack(builder, stackOffset);
    S2C_RemainItemInfos.AddAccountStack(builder, account_stackOffset);
    return S2C_RemainItemInfos.EndS2C_RemainItemInfos(builder);
  }

  public static void StartS2C_RemainItemInfos(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddAccountStack(FlatBufferBuilder builder, VectorOffset accountStackOffset) { builder.AddOffset(0, accountStackOffset.Value, 0); }
  public static VectorOffset CreateAccountStackVector(FlatBufferBuilder builder, Offset<AccountItemStack>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAccountStackVectorBlock(FlatBufferBuilder builder, Offset<AccountItemStack>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAccountStackVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddStack(FlatBufferBuilder builder, VectorOffset stackOffset) { builder.AddOffset(1, stackOffset.Value, 0); }
  public static VectorOffset CreateStackVector(FlatBufferBuilder builder, Offset<ItemStack>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateStackVectorBlock(FlatBufferBuilder builder, Offset<ItemStack>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartStackVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEquip(FlatBufferBuilder builder, VectorOffset equipOffset) { builder.AddOffset(2, equipOffset.Value, 0); }
  public static VectorOffset CreateEquipVector(FlatBufferBuilder builder, Offset<ItemEquipment>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEquipVectorBlock(FlatBufferBuilder builder, Offset<ItemEquipment>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEquipVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRune(FlatBufferBuilder builder, VectorOffset runeOffset) { builder.AddOffset(3, runeOffset.Value, 0); }
  public static VectorOffset CreateRuneVector(FlatBufferBuilder builder, Offset<Rune>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRuneVectorBlock(FlatBufferBuilder builder, Offset<Rune>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRuneVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<S2C_RemainItemInfos> EndS2C_RemainItemInfos(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_RemainItemInfos>(o);
  }
};

public struct S2C_LvExpTendencyUp : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_LvExpTendencyUp GetRootAsS2C_LvExpTendencyUp(ByteBuffer _bb) { return GetRootAsS2C_LvExpTendencyUp(_bb, new S2C_LvExpTendencyUp()); }
  public static S2C_LvExpTendencyUp GetRootAsS2C_LvExpTendencyUp(ByteBuffer _bb, S2C_LvExpTendencyUp obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_LvExpTendencyUp __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Lv { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint LastLv { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public ulong Exp { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public ulong LastExp { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public int Tendency { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsMonsterKill { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<S2C_LvExpTendencyUp> CreateS2C_LvExpTendencyUp(FlatBufferBuilder builder,
      uint lv = 0,
      uint last_lv = 0,
      ulong exp = 0,
      ulong last_exp = 0,
      int tendency = 0,
      bool IsMonsterKill = false) {
    builder.StartObject(6);
    S2C_LvExpTendencyUp.AddLastExp(builder, last_exp);
    S2C_LvExpTendencyUp.AddExp(builder, exp);
    S2C_LvExpTendencyUp.AddTendency(builder, tendency);
    S2C_LvExpTendencyUp.AddLastLv(builder, last_lv);
    S2C_LvExpTendencyUp.AddLv(builder, lv);
    S2C_LvExpTendencyUp.AddIsMonsterKill(builder, IsMonsterKill);
    return S2C_LvExpTendencyUp.EndS2C_LvExpTendencyUp(builder);
  }

  public static void StartS2C_LvExpTendencyUp(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddLv(FlatBufferBuilder builder, uint lv) { builder.AddUint(0, lv, 0); }
  public static void AddLastLv(FlatBufferBuilder builder, uint lastLv) { builder.AddUint(1, lastLv, 0); }
  public static void AddExp(FlatBufferBuilder builder, ulong exp) { builder.AddUlong(2, exp, 0); }
  public static void AddLastExp(FlatBufferBuilder builder, ulong lastExp) { builder.AddUlong(3, lastExp, 0); }
  public static void AddTendency(FlatBufferBuilder builder, int tendency) { builder.AddInt(4, tendency, 0); }
  public static void AddIsMonsterKill(FlatBufferBuilder builder, bool IsMonsterKill) { builder.AddBool(5, IsMonsterKill, false); }
  public static Offset<S2C_LvExpTendencyUp> EndS2C_LvExpTendencyUp(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_LvExpTendencyUp>(o);
  }
};

public struct S2C_LvExpDown : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_LvExpDown GetRootAsS2C_LvExpDown(ByteBuffer _bb) { return GetRootAsS2C_LvExpDown(_bb, new S2C_LvExpDown()); }
  public static S2C_LvExpDown GetRootAsS2C_LvExpDown(ByteBuffer _bb, S2C_LvExpDown obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_LvExpDown __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Lv { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public ulong Exp { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }

  public static Offset<S2C_LvExpDown> CreateS2C_LvExpDown(FlatBufferBuilder builder,
      uint lv = 0,
      ulong exp = 0) {
    builder.StartObject(2);
    S2C_LvExpDown.AddExp(builder, exp);
    S2C_LvExpDown.AddLv(builder, lv);
    return S2C_LvExpDown.EndS2C_LvExpDown(builder);
  }

  public static void StartS2C_LvExpDown(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddLv(FlatBufferBuilder builder, uint lv) { builder.AddUint(0, lv, 0); }
  public static void AddExp(FlatBufferBuilder builder, ulong exp) { builder.AddUlong(1, exp, 0); }
  public static Offset<S2C_LvExpDown> EndS2C_LvExpDown(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_LvExpDown>(o);
  }
};

public struct S2C_TendencyDown : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_TendencyDown GetRootAsS2C_TendencyDown(ByteBuffer _bb) { return GetRootAsS2C_TendencyDown(_bb, new S2C_TendencyDown()); }
  public static S2C_TendencyDown GetRootAsS2C_TendencyDown(ByteBuffer _bb, S2C_TendencyDown obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_TendencyDown __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Tendency { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<S2C_TendencyDown> CreateS2C_TendencyDown(FlatBufferBuilder builder,
      int tendency = 0) {
    builder.StartObject(1);
    S2C_TendencyDown.AddTendency(builder, tendency);
    return S2C_TendencyDown.EndS2C_TendencyDown(builder);
  }

  public static void StartS2C_TendencyDown(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddTendency(FlatBufferBuilder builder, int tendency) { builder.AddInt(0, tendency, 0); }
  public static Offset<S2C_TendencyDown> EndS2C_TendencyDown(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_TendencyDown>(o);
  }
};

public struct S2C_ChangePet : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_ChangePet GetRootAsS2C_ChangePet(ByteBuffer _bb) { return GetRootAsS2C_ChangePet(_bb, new S2C_ChangePet()); }
  public static S2C_ChangePet GetRootAsS2C_ChangePet(ByteBuffer _bb, S2C_ChangePet obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_ChangePet __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint PetTid { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<S2C_ChangePet> CreateS2C_ChangePet(FlatBufferBuilder builder,
      uint objectid = 0,
      uint pet_tid = 0) {
    builder.StartObject(2);
    S2C_ChangePet.AddPetTid(builder, pet_tid);
    S2C_ChangePet.AddObjectid(builder, objectid);
    return S2C_ChangePet.EndS2C_ChangePet(builder);
  }

  public static void StartS2C_ChangePet(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static void AddPetTid(FlatBufferBuilder builder, uint petTid) { builder.AddUint(1, petTid, 0); }
  public static Offset<S2C_ChangePet> EndS2C_ChangePet(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_ChangePet>(o);
  }
};

public struct S2C_ChangeChange : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_ChangeChange GetRootAsS2C_ChangeChange(ByteBuffer _bb) { return GetRootAsS2C_ChangeChange(_bb, new S2C_ChangeChange()); }
  public static S2C_ChangeChange GetRootAsS2C_ChangeChange(ByteBuffer _bb, S2C_ChangeChange obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_ChangeChange __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint ChangeTid { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<S2C_ChangeChange> CreateS2C_ChangeChange(FlatBufferBuilder builder,
      uint objectid = 0,
      uint change_tid = 0) {
    builder.StartObject(2);
    S2C_ChangeChange.AddChangeTid(builder, change_tid);
    S2C_ChangeChange.AddObjectid(builder, objectid);
    return S2C_ChangeChange.EndS2C_ChangeChange(builder);
  }

  public static void StartS2C_ChangeChange(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static void AddChangeTid(FlatBufferBuilder builder, uint changeTid) { builder.AddUint(1, changeTid, 0); }
  public static Offset<S2C_ChangeChange> EndS2C_ChangeChange(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_ChangeChange>(o);
  }
};

public struct C2S_UseItem : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static C2S_UseItem GetRootAsC2S_UseItem(ByteBuffer _bb) { return GetRootAsC2S_UseItem(_bb, new C2S_UseItem()); }
  public static C2S_UseItem GetRootAsC2S_UseItem(ByteBuffer _bb, C2S_UseItem obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public C2S_UseItem __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint ItemTid { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<C2S_UseItem> CreateC2S_UseItem(FlatBufferBuilder builder,
      uint objectid = 0,
      uint item_tid = 0) {
    builder.StartObject(2);
    C2S_UseItem.AddItemTid(builder, item_tid);
    C2S_UseItem.AddObjectid(builder, objectid);
    return C2S_UseItem.EndC2S_UseItem(builder);
  }

  public static void StartC2S_UseItem(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static void AddItemTid(FlatBufferBuilder builder, uint itemTid) { builder.AddUint(1, itemTid, 0); }
  public static Offset<C2S_UseItem> EndC2S_UseItem(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<C2S_UseItem>(o);
  }
};

public struct S2C_Cooltime : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_Cooltime GetRootAsS2C_Cooltime(ByteBuffer _bb) { return GetRootAsS2C_Cooltime(_bb, new S2C_Cooltime()); }
  public static S2C_Cooltime GetRootAsS2C_Cooltime(ByteBuffer _bb, S2C_Cooltime obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_Cooltime __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Skilltid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public float Cooltime { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<S2C_Cooltime> CreateS2C_Cooltime(FlatBufferBuilder builder,
      uint skilltid = 0,
      float cooltime = 0.0f) {
    builder.StartObject(2);
    S2C_Cooltime.AddCooltime(builder, cooltime);
    S2C_Cooltime.AddSkilltid(builder, skilltid);
    return S2C_Cooltime.EndS2C_Cooltime(builder);
  }

  public static void StartS2C_Cooltime(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddSkilltid(FlatBufferBuilder builder, uint skilltid) { builder.AddUint(0, skilltid, 0); }
  public static void AddCooltime(FlatBufferBuilder builder, float cooltime) { builder.AddFloat(1, cooltime, 0.0f); }
  public static Offset<S2C_Cooltime> EndS2C_Cooltime(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_Cooltime>(o);
  }
};

public struct C2S_DamageReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static C2S_DamageReq GetRootAsC2S_DamageReq(ByteBuffer _bb) { return GetRootAsC2S_DamageReq(_bb, new C2S_DamageReq()); }
  public static C2S_DamageReq GetRootAsC2S_DamageReq(ByteBuffer _bb, C2S_DamageReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public C2S_DamageReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Attackerid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Targetid { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Skilltid { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Damage { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<C2S_DamageReq> CreateC2S_DamageReq(FlatBufferBuilder builder,
      uint attackerid = 0,
      uint targetid = 0,
      uint skilltid = 0,
      uint damage = 0) {
    builder.StartObject(4);
    C2S_DamageReq.AddDamage(builder, damage);
    C2S_DamageReq.AddSkilltid(builder, skilltid);
    C2S_DamageReq.AddTargetid(builder, targetid);
    C2S_DamageReq.AddAttackerid(builder, attackerid);
    return C2S_DamageReq.EndC2S_DamageReq(builder);
  }

  public static void StartC2S_DamageReq(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddAttackerid(FlatBufferBuilder builder, uint attackerid) { builder.AddUint(0, attackerid, 0); }
  public static void AddTargetid(FlatBufferBuilder builder, uint targetid) { builder.AddUint(1, targetid, 0); }
  public static void AddSkilltid(FlatBufferBuilder builder, uint skilltid) { builder.AddUint(2, skilltid, 0); }
  public static void AddDamage(FlatBufferBuilder builder, uint damage) { builder.AddUint(3, damage, 0); }
  public static Offset<C2S_DamageReq> EndC2S_DamageReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<C2S_DamageReq>(o);
  }
};

public struct C2S_MonsterSpawnReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static C2S_MonsterSpawnReq GetRootAsC2S_MonsterSpawnReq(ByteBuffer _bb) { return GetRootAsC2S_MonsterSpawnReq(_bb, new C2S_MonsterSpawnReq()); }
  public static C2S_MonsterSpawnReq GetRootAsC2S_MonsterSpawnReq(ByteBuffer _bb, C2S_MonsterSpawnReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public C2S_MonsterSpawnReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint MonsterTid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public ServerPos3? Pos { get { int o = __p.__offset(6); return o != 0 ? (ServerPos3?)(new ServerPos3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public float Lookdir { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<C2S_MonsterSpawnReq> CreateC2S_MonsterSpawnReq(FlatBufferBuilder builder,
      uint monster_tid = 0,
      Offset<ServerPos3> posOffset = default(Offset<ServerPos3>),
      float lookdir = 0.0f) {
    builder.StartObject(3);
    C2S_MonsterSpawnReq.AddLookdir(builder, lookdir);
    C2S_MonsterSpawnReq.AddPos(builder, posOffset);
    C2S_MonsterSpawnReq.AddMonsterTid(builder, monster_tid);
    return C2S_MonsterSpawnReq.EndC2S_MonsterSpawnReq(builder);
  }

  public static void StartC2S_MonsterSpawnReq(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddMonsterTid(FlatBufferBuilder builder, uint monsterTid) { builder.AddUint(0, monsterTid, 0); }
  public static void AddPos(FlatBufferBuilder builder, Offset<ServerPos3> posOffset) { builder.AddOffset(1, posOffset.Value, 0); }
  public static void AddLookdir(FlatBufferBuilder builder, float lookdir) { builder.AddFloat(2, lookdir, 0.0f); }
  public static Offset<C2S_MonsterSpawnReq> EndC2S_MonsterSpawnReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<C2S_MonsterSpawnReq>(o);
  }
};

public struct C2S_MapClear : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static C2S_MapClear GetRootAsC2S_MapClear(ByteBuffer _bb) { return GetRootAsC2S_MapClear(_bb, new C2S_MapClear()); }
  public static C2S_MapClear GetRootAsC2S_MapClear(ByteBuffer _bb, C2S_MapClear obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public C2S_MapClear __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Stagetid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<C2S_MapClear> CreateC2S_MapClear(FlatBufferBuilder builder,
      uint stagetid = 0) {
    builder.StartObject(1);
    C2S_MapClear.AddStagetid(builder, stagetid);
    return C2S_MapClear.EndC2S_MapClear(builder);
  }

  public static void StartC2S_MapClear(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddStagetid(FlatBufferBuilder builder, uint stagetid) { builder.AddUint(0, stagetid, 0); }
  public static Offset<C2S_MapClear> EndC2S_MapClear(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<C2S_MapClear>(o);
  }
};

public struct S2C_Potion_CoolTime : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_Potion_CoolTime GetRootAsS2C_Potion_CoolTime(ByteBuffer _bb) { return GetRootAsS2C_Potion_CoolTime(_bb, new S2C_Potion_CoolTime()); }
  public static S2C_Potion_CoolTime GetRootAsS2C_Potion_CoolTime(ByteBuffer _bb, S2C_Potion_CoolTime obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_Potion_CoolTime __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint ItemTid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public float Cooltime { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<S2C_Potion_CoolTime> CreateS2C_Potion_CoolTime(FlatBufferBuilder builder,
      uint item_tid = 0,
      float cooltime = 0.0f) {
    builder.StartObject(2);
    S2C_Potion_CoolTime.AddCooltime(builder, cooltime);
    S2C_Potion_CoolTime.AddItemTid(builder, item_tid);
    return S2C_Potion_CoolTime.EndS2C_Potion_CoolTime(builder);
  }

  public static void StartS2C_Potion_CoolTime(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddItemTid(FlatBufferBuilder builder, uint itemTid) { builder.AddUint(0, itemTid, 0); }
  public static void AddCooltime(FlatBufferBuilder builder, float cooltime) { builder.AddFloat(1, cooltime, 0.0f); }
  public static Offset<S2C_Potion_CoolTime> EndS2C_Potion_CoolTime(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_Potion_CoolTime>(o);
  }
};

public struct CS_SkillCancle : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CS_SkillCancle GetRootAsCS_SkillCancle(ByteBuffer _bb) { return GetRootAsCS_SkillCancle(_bb, new CS_SkillCancle()); }
  public static CS_SkillCancle GetRootAsCS_SkillCancle(ByteBuffer _bb, CS_SkillCancle obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CS_SkillCancle __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<CS_SkillCancle> CreateCS_SkillCancle(FlatBufferBuilder builder,
      uint objectid = 0) {
    builder.StartObject(1);
    CS_SkillCancle.AddObjectid(builder, objectid);
    return CS_SkillCancle.EndCS_SkillCancle(builder);
  }

  public static void StartCS_SkillCancle(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static Offset<CS_SkillCancle> EndCS_SkillCancle(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CS_SkillCancle>(o);
  }
};

public struct CS_EquipVehicle : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CS_EquipVehicle GetRootAsCS_EquipVehicle(ByteBuffer _bb) { return GetRootAsCS_EquipVehicle(_bb, new CS_EquipVehicle()); }
  public static CS_EquipVehicle GetRootAsCS_EquipVehicle(ByteBuffer _bb, CS_EquipVehicle obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CS_EquipVehicle __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Vehicletid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<CS_EquipVehicle> CreateCS_EquipVehicle(FlatBufferBuilder builder,
      uint vehicletid = 0) {
    builder.StartObject(1);
    CS_EquipVehicle.AddVehicletid(builder, vehicletid);
    return CS_EquipVehicle.EndCS_EquipVehicle(builder);
  }

  public static void StartCS_EquipVehicle(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddVehicletid(FlatBufferBuilder builder, uint vehicletid) { builder.AddUint(0, vehicletid, 0); }
  public static Offset<CS_EquipVehicle> EndCS_EquipVehicle(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CS_EquipVehicle>(o);
  }
};

public struct CS_RideVehicle : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CS_RideVehicle GetRootAsCS_RideVehicle(ByteBuffer _bb) { return GetRootAsCS_RideVehicle(_bb, new CS_RideVehicle()); }
  public static CS_RideVehicle GetRootAsCS_RideVehicle(ByteBuffer _bb, CS_RideVehicle obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CS_RideVehicle __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  /// 0 이면 탑승해제
  public uint Vehicletid { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<CS_RideVehicle> CreateCS_RideVehicle(FlatBufferBuilder builder,
      uint objectid = 0,
      uint vehicletid = 0) {
    builder.StartObject(2);
    CS_RideVehicle.AddVehicletid(builder, vehicletid);
    CS_RideVehicle.AddObjectid(builder, objectid);
    return CS_RideVehicle.EndCS_RideVehicle(builder);
  }

  public static void StartCS_RideVehicle(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static void AddVehicletid(FlatBufferBuilder builder, uint vehicletid) { builder.AddUint(1, vehicletid, 0); }
  public static Offset<CS_RideVehicle> EndCS_RideVehicle(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CS_RideVehicle>(o);
  }
};

public struct S2C_DisplayEffect : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_DisplayEffect GetRootAsS2C_DisplayEffect(ByteBuffer _bb) { return GetRootAsS2C_DisplayEffect(_bb, new S2C_DisplayEffect()); }
  public static S2C_DisplayEffect GetRootAsS2C_DisplayEffect(ByteBuffer _bb, S2C_DisplayEffect obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_DisplayEffect __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint EffectTid { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<S2C_DisplayEffect> CreateS2C_DisplayEffect(FlatBufferBuilder builder,
      uint objectid = 0,
      uint effect_tid = 0) {
    builder.StartObject(2);
    S2C_DisplayEffect.AddEffectTid(builder, effect_tid);
    S2C_DisplayEffect.AddObjectid(builder, objectid);
    return S2C_DisplayEffect.EndS2C_DisplayEffect(builder);
  }

  public static void StartS2C_DisplayEffect(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static void AddEffectTid(FlatBufferBuilder builder, uint effectTid) { builder.AddUint(1, effectTid, 0); }
  public static Offset<S2C_DisplayEffect> EndS2C_DisplayEffect(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_DisplayEffect>(o);
  }
};

public struct S2C_ChangeGuildInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_ChangeGuildInfo GetRootAsS2C_ChangeGuildInfo(ByteBuffer _bb) { return GetRootAsS2C_ChangeGuildInfo(_bb, new S2C_ChangeGuildInfo()); }
  public static S2C_ChangeGuildInfo GetRootAsS2C_ChangeGuildInfo(ByteBuffer _bb, S2C_ChangeGuildInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_ChangeGuildInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  ///가입된 길드마크  0일경우 가입된 길드 없음.
  public ulong GuildId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public uint GuildmarkTid { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<S2C_ChangeGuildInfo> CreateS2C_ChangeGuildInfo(FlatBufferBuilder builder,
      uint objectid = 0,
      ulong guild_id = 0,
      uint guildmark_tid = 0) {
    builder.StartObject(3);
    S2C_ChangeGuildInfo.AddGuildId(builder, guild_id);
    S2C_ChangeGuildInfo.AddGuildmarkTid(builder, guildmark_tid);
    S2C_ChangeGuildInfo.AddObjectid(builder, objectid);
    return S2C_ChangeGuildInfo.EndS2C_ChangeGuildInfo(builder);
  }

  public static void StartS2C_ChangeGuildInfo(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static void AddGuildId(FlatBufferBuilder builder, ulong guildId) { builder.AddUlong(1, guildId, 0); }
  public static void AddGuildmarkTid(FlatBufferBuilder builder, uint guildmarkTid) { builder.AddUint(2, guildmarkTid, 0); }
  public static Offset<S2C_ChangeGuildInfo> EndS2C_ChangeGuildInfo(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_ChangeGuildInfo>(o);
  }
};

public struct C2S_Gather : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static C2S_Gather GetRootAsC2S_Gather(ByteBuffer _bb) { return GetRootAsC2S_Gather(_bb, new C2S_Gather()); }
  public static C2S_Gather GetRootAsC2S_Gather(ByteBuffer _bb, C2S_Gather obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public C2S_Gather __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Target { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<C2S_Gather> CreateC2S_Gather(FlatBufferBuilder builder,
      uint objectid = 0,
      uint target = 0) {
    builder.StartObject(2);
    C2S_Gather.AddTarget(builder, target);
    C2S_Gather.AddObjectid(builder, objectid);
    return C2S_Gather.EndC2S_Gather(builder);
  }

  public static void StartC2S_Gather(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static void AddTarget(FlatBufferBuilder builder, uint target) { builder.AddUint(1, target, 0); }
  public static Offset<C2S_Gather> EndC2S_Gather(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<C2S_Gather>(o);
  }
};

public struct S2C_Casting : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_Casting GetRootAsS2C_Casting(ByteBuffer _bb) { return GetRootAsS2C_Casting(_bb, new S2C_Casting()); }
  public static S2C_Casting GetRootAsS2C_Casting(ByteBuffer _bb, S2C_Casting obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_Casting __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Target { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public float Duration { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<S2C_Casting> CreateS2C_Casting(FlatBufferBuilder builder,
      uint objectid = 0,
      uint target = 0,
      float duration = 0.0f) {
    builder.StartObject(3);
    S2C_Casting.AddDuration(builder, duration);
    S2C_Casting.AddTarget(builder, target);
    S2C_Casting.AddObjectid(builder, objectid);
    return S2C_Casting.EndS2C_Casting(builder);
  }

  public static void StartS2C_Casting(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static void AddTarget(FlatBufferBuilder builder, uint target) { builder.AddUint(1, target, 0); }
  public static void AddDuration(FlatBufferBuilder builder, float duration) { builder.AddFloat(2, duration, 0.0f); }
  public static Offset<S2C_Casting> EndS2C_Casting(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_Casting>(o);
  }
};

public struct S2C_DotDamage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_DotDamage GetRootAsS2C_DotDamage(ByteBuffer _bb) { return GetRootAsS2C_DotDamage(_bb, new S2C_DotDamage()); }
  public static S2C_DotDamage GetRootAsS2C_DotDamage(ByteBuffer _bb, S2C_DotDamage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_DotDamage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Atkobjid { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Dmg { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  /// 어빌리티엑션 TID
  public uint Abilactid { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public float Currhp { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<S2C_DotDamage> CreateS2C_DotDamage(FlatBufferBuilder builder,
      uint objectid = 0,
      uint atkobjid = 0,
      uint dmg = 0,
      uint abilactid = 0,
      float currhp = 0.0f) {
    builder.StartObject(5);
    S2C_DotDamage.AddCurrhp(builder, currhp);
    S2C_DotDamage.AddAbilactid(builder, abilactid);
    S2C_DotDamage.AddDmg(builder, dmg);
    S2C_DotDamage.AddAtkobjid(builder, atkobjid);
    S2C_DotDamage.AddObjectid(builder, objectid);
    return S2C_DotDamage.EndS2C_DotDamage(builder);
  }

  public static void StartS2C_DotDamage(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static void AddAtkobjid(FlatBufferBuilder builder, uint atkobjid) { builder.AddUint(1, atkobjid, 0); }
  public static void AddDmg(FlatBufferBuilder builder, uint dmg) { builder.AddUint(2, dmg, 0); }
  public static void AddAbilactid(FlatBufferBuilder builder, uint abilactid) { builder.AddUint(3, abilactid, 0); }
  public static void AddCurrhp(FlatBufferBuilder builder, float currhp) { builder.AddFloat(4, currhp, 0.0f); }
  public static Offset<S2C_DotDamage> EndS2C_DotDamage(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_DotDamage>(o);
  }
};

public struct S2C_ChangeTendency : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_ChangeTendency GetRootAsS2C_ChangeTendency(ByteBuffer _bb) { return GetRootAsS2C_ChangeTendency(_bb, new S2C_ChangeTendency()); }
  public static S2C_ChangeTendency GetRootAsS2C_ChangeTendency(ByteBuffer _bb, S2C_ChangeTendency obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_ChangeTendency __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public int Tendency { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<S2C_ChangeTendency> CreateS2C_ChangeTendency(FlatBufferBuilder builder,
      uint objectid = 0,
      int tendency = 0) {
    builder.StartObject(2);
    S2C_ChangeTendency.AddTendency(builder, tendency);
    S2C_ChangeTendency.AddObjectid(builder, objectid);
    return S2C_ChangeTendency.EndS2C_ChangeTendency(builder);
  }

  public static void StartS2C_ChangeTendency(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static void AddTendency(FlatBufferBuilder builder, int tendency) { builder.AddInt(1, tendency, 0); }
  public static Offset<S2C_ChangeTendency> EndS2C_ChangeTendency(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_ChangeTendency>(o);
  }
};

public struct PartyMemberInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static PartyMemberInfo GetRootAsPartyMemberInfo(ByteBuffer _bb) { return GetRootAsPartyMemberInfo(_bb, new PartyMemberInfo()); }
  public static PartyMemberInfo GetRootAsPartyMemberInfo(ByteBuffer _bb, PartyMemberInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public PartyMemberInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public ulong CharId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public ServerPos3? Pos { get { int o = __p.__offset(8); return o != 0 ? (ServerPos3?)(new ServerPos3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public float CurHp { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float MaxHp { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CurMp { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float MaxMp { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<PartyMemberInfo> CreatePartyMemberInfo(FlatBufferBuilder builder,
      uint objectid = 0,
      ulong char_id = 0,
      Offset<ServerPos3> posOffset = default(Offset<ServerPos3>),
      float cur_hp = 0.0f,
      float max_hp = 0.0f,
      float cur_mp = 0.0f,
      float max_mp = 0.0f) {
    builder.StartObject(7);
    PartyMemberInfo.AddCharId(builder, char_id);
    PartyMemberInfo.AddMaxMp(builder, max_mp);
    PartyMemberInfo.AddCurMp(builder, cur_mp);
    PartyMemberInfo.AddMaxHp(builder, max_hp);
    PartyMemberInfo.AddCurHp(builder, cur_hp);
    PartyMemberInfo.AddPos(builder, posOffset);
    PartyMemberInfo.AddObjectid(builder, objectid);
    return PartyMemberInfo.EndPartyMemberInfo(builder);
  }

  public static void StartPartyMemberInfo(FlatBufferBuilder builder) { builder.StartObject(7); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static void AddCharId(FlatBufferBuilder builder, ulong charId) { builder.AddUlong(1, charId, 0); }
  public static void AddPos(FlatBufferBuilder builder, Offset<ServerPos3> posOffset) { builder.AddOffset(2, posOffset.Value, 0); }
  public static void AddCurHp(FlatBufferBuilder builder, float curHp) { builder.AddFloat(3, curHp, 0.0f); }
  public static void AddMaxHp(FlatBufferBuilder builder, float maxHp) { builder.AddFloat(4, maxHp, 0.0f); }
  public static void AddCurMp(FlatBufferBuilder builder, float curMp) { builder.AddFloat(5, curMp, 0.0f); }
  public static void AddMaxMp(FlatBufferBuilder builder, float maxMp) { builder.AddFloat(6, maxMp, 0.0f); }
  public static Offset<PartyMemberInfo> EndPartyMemberInfo(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 8);  // pos
    return new Offset<PartyMemberInfo>(o);
  }
};

public struct S2C_UpdatePartyInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_UpdatePartyInfo GetRootAsS2C_UpdatePartyInfo(ByteBuffer _bb) { return GetRootAsS2C_UpdatePartyInfo(_bb, new S2C_UpdatePartyInfo()); }
  public static S2C_UpdatePartyInfo GetRootAsS2C_UpdatePartyInfo(ByteBuffer _bb, S2C_UpdatePartyInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_UpdatePartyInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public PartyMemberInfo? Partymembers(int j) { int o = __p.__offset(4); return o != 0 ? (PartyMemberInfo?)(new PartyMemberInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PartymembersLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public uint TargetobjId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<S2C_UpdatePartyInfo> CreateS2C_UpdatePartyInfo(FlatBufferBuilder builder,
      VectorOffset partymembersOffset = default(VectorOffset),
      uint targetobj_id = 0) {
    builder.StartObject(2);
    S2C_UpdatePartyInfo.AddTargetobjId(builder, targetobj_id);
    S2C_UpdatePartyInfo.AddPartymembers(builder, partymembersOffset);
    return S2C_UpdatePartyInfo.EndS2C_UpdatePartyInfo(builder);
  }

  public static void StartS2C_UpdatePartyInfo(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddPartymembers(FlatBufferBuilder builder, VectorOffset partymembersOffset) { builder.AddOffset(0, partymembersOffset.Value, 0); }
  public static VectorOffset CreatePartymembersVector(FlatBufferBuilder builder, Offset<PartyMemberInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePartymembersVectorBlock(FlatBufferBuilder builder, Offset<PartyMemberInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPartymembersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTargetobjId(FlatBufferBuilder builder, uint targetobjId) { builder.AddUint(1, targetobjId, 0); }
  public static Offset<S2C_UpdatePartyInfo> EndS2C_UpdatePartyInfo(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_UpdatePartyInfo>(o);
  }
};

public struct C2S_SetPartyTarget : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static C2S_SetPartyTarget GetRootAsC2S_SetPartyTarget(ByteBuffer _bb) { return GetRootAsC2S_SetPartyTarget(_bb, new C2S_SetPartyTarget()); }
  public static C2S_SetPartyTarget GetRootAsC2S_SetPartyTarget(ByteBuffer _bb, C2S_SetPartyTarget obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public C2S_SetPartyTarget __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<C2S_SetPartyTarget> CreateC2S_SetPartyTarget(FlatBufferBuilder builder,
      uint objectid = 0) {
    builder.StartObject(1);
    C2S_SetPartyTarget.AddObjectid(builder, objectid);
    return C2S_SetPartyTarget.EndC2S_SetPartyTarget(builder);
  }

  public static void StartC2S_SetPartyTarget(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static Offset<C2S_SetPartyTarget> EndC2S_SetPartyTarget(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<C2S_SetPartyTarget>(o);
  }
};

public struct S2C_StageState : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_StageState GetRootAsS2C_StageState(ByteBuffer _bb) { return GetRootAsS2C_StageState(_bb, new S2C_StageState()); }
  public static S2C_StageState GetRootAsS2C_StageState(ByteBuffer _bb, S2C_StageState obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_StageState __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte State { get { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public uint RemainSec { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public ulong ExpireDt { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }

  public static Offset<S2C_StageState> CreateS2C_StageState(FlatBufferBuilder builder,
      byte state = 0,
      uint remain_sec = 0,
      ulong expire_dt = 0) {
    builder.StartObject(3);
    S2C_StageState.AddExpireDt(builder, expire_dt);
    S2C_StageState.AddRemainSec(builder, remain_sec);
    S2C_StageState.AddState(builder, state);
    return S2C_StageState.EndS2C_StageState(builder);
  }

  public static void StartS2C_StageState(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddState(FlatBufferBuilder builder, byte state) { builder.AddByte(0, state, 0); }
  public static void AddRemainSec(FlatBufferBuilder builder, uint remainSec) { builder.AddUint(1, remainSec, 0); }
  public static void AddExpireDt(FlatBufferBuilder builder, ulong expireDt) { builder.AddUlong(2, expireDt, 0); }
  public static Offset<S2C_StageState> EndS2C_StageState(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_StageState>(o);
  }
};

public struct S2C_GameStart : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_GameStart GetRootAsS2C_GameStart(ByteBuffer _bb) { return GetRootAsS2C_GameStart(_bb, new S2C_GameStart()); }
  public static S2C_GameStart GetRootAsS2C_GameStart(ByteBuffer _bb, S2C_GameStart obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_GameStart __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte Countdown { get { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }

  public static Offset<S2C_GameStart> CreateS2C_GameStart(FlatBufferBuilder builder,
      byte countdown = 0) {
    builder.StartObject(1);
    S2C_GameStart.AddCountdown(builder, countdown);
    return S2C_GameStart.EndS2C_GameStart(builder);
  }

  public static void StartS2C_GameStart(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddCountdown(FlatBufferBuilder builder, byte countdown) { builder.AddByte(0, countdown, 0); }
  public static Offset<S2C_GameStart> EndS2C_GameStart(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_GameStart>(o);
  }
};

public struct S2C_GameScore : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_GameScore GetRootAsS2C_GameScore(ByteBuffer _bb) { return GetRootAsS2C_GameScore(_bb, new S2C_GameScore()); }
  public static S2C_GameScore GetRootAsS2C_GameScore(ByteBuffer _bb, S2C_GameScore obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_GameScore __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte GameEnd { get { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public int Score(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ScoreLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScoreBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetScoreBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetScoreArray() { return __p.__vector_as_array<int>(6); }

  public static Offset<S2C_GameScore> CreateS2C_GameScore(FlatBufferBuilder builder,
      byte game_end = 0,
      VectorOffset scoreOffset = default(VectorOffset)) {
    builder.StartObject(2);
    S2C_GameScore.AddScore(builder, scoreOffset);
    S2C_GameScore.AddGameEnd(builder, game_end);
    return S2C_GameScore.EndS2C_GameScore(builder);
  }

  public static void StartS2C_GameScore(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddGameEnd(FlatBufferBuilder builder, byte gameEnd) { builder.AddByte(0, gameEnd, 0); }
  public static void AddScore(FlatBufferBuilder builder, VectorOffset scoreOffset) { builder.AddOffset(1, scoreOffset.Value, 0); }
  public static VectorOffset CreateScoreVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateScoreVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartScoreVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<S2C_GameScore> EndS2C_GameScore(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_GameScore>(o);
  }
};

///능력치 미리보기 요청/결과
public struct CS_StatPreview : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CS_StatPreview GetRootAsCS_StatPreview(ByteBuffer _bb) { return GetRootAsCS_StatPreview(_bb, new CS_StatPreview()); }
  public static CS_StatPreview GetRootAsCS_StatPreview(ByteBuffer _bb, CS_StatPreview obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CS_StatPreview __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Ability? Abils(int j) { int o = __p.__offset(4); return o != 0 ? (Ability?)(new Ability()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AbilsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<CS_StatPreview> CreateCS_StatPreview(FlatBufferBuilder builder,
      VectorOffset abilsOffset = default(VectorOffset)) {
    builder.StartObject(1);
    CS_StatPreview.AddAbils(builder, abilsOffset);
    return CS_StatPreview.EndCS_StatPreview(builder);
  }

  public static void StartCS_StatPreview(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddAbils(FlatBufferBuilder builder, VectorOffset abilsOffset) { builder.AddOffset(0, abilsOffset.Value, 0); }
  public static VectorOffset CreateAbilsVector(FlatBufferBuilder builder, Offset<Ability>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAbilsVectorBlock(FlatBufferBuilder builder, Offset<Ability>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAbilsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<CS_StatPreview> EndCS_StatPreview(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CS_StatPreview>(o);
  }
};

public struct RoomUser : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static RoomUser GetRootAsRoomUser(ByteBuffer _bb) { return GetRootAsRoomUser(_bb, new RoomUser()); }
  public static RoomUser GetRootAsRoomUser(ByteBuffer _bb, RoomUser obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public RoomUser __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong CharId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public byte TeamNo { get { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte TeamOrder { get { int o = __p.__offset(10); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public uint Greade { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Rank { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Score { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<RoomUser> CreateRoomUser(FlatBufferBuilder builder,
      ulong char_id = 0,
      StringOffset nameOffset = default(StringOffset),
      byte team_no = 0,
      byte team_order = 0,
      uint greade = 0,
      uint rank = 0,
      uint score = 0) {
    builder.StartObject(7);
    RoomUser.AddCharId(builder, char_id);
    RoomUser.AddScore(builder, score);
    RoomUser.AddRank(builder, rank);
    RoomUser.AddGreade(builder, greade);
    RoomUser.AddName(builder, nameOffset);
    RoomUser.AddTeamOrder(builder, team_order);
    RoomUser.AddTeamNo(builder, team_no);
    return RoomUser.EndRoomUser(builder);
  }

  public static void StartRoomUser(FlatBufferBuilder builder) { builder.StartObject(7); }
  public static void AddCharId(FlatBufferBuilder builder, ulong charId) { builder.AddUlong(0, charId, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddTeamNo(FlatBufferBuilder builder, byte teamNo) { builder.AddByte(2, teamNo, 0); }
  public static void AddTeamOrder(FlatBufferBuilder builder, byte teamOrder) { builder.AddByte(3, teamOrder, 0); }
  public static void AddGreade(FlatBufferBuilder builder, uint greade) { builder.AddUint(4, greade, 0); }
  public static void AddRank(FlatBufferBuilder builder, uint rank) { builder.AddUint(5, rank, 0); }
  public static void AddScore(FlatBufferBuilder builder, uint score) { builder.AddUint(6, score, 0); }
  public static Offset<RoomUser> EndRoomUser(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 6);  // name
    return new Offset<RoomUser>(o);
  }
};

public struct S2C_RoomInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_RoomInfo GetRootAsS2C_RoomInfo(ByteBuffer _bb) { return GetRootAsS2C_RoomInfo(_bb, new S2C_RoomInfo()); }
  public static S2C_RoomInfo GetRootAsS2C_RoomInfo(ByteBuffer _bb, S2C_RoomInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_RoomInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public RoomUser? RoomUsers(int j) { int o = __p.__offset(4); return o != 0 ? (RoomUser?)(new RoomUser()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RoomUsersLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<S2C_RoomInfo> CreateS2C_RoomInfo(FlatBufferBuilder builder,
      VectorOffset room_usersOffset = default(VectorOffset)) {
    builder.StartObject(1);
    S2C_RoomInfo.AddRoomUsers(builder, room_usersOffset);
    return S2C_RoomInfo.EndS2C_RoomInfo(builder);
  }

  public static void StartS2C_RoomInfo(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddRoomUsers(FlatBufferBuilder builder, VectorOffset roomUsersOffset) { builder.AddOffset(0, roomUsersOffset.Value, 0); }
  public static VectorOffset CreateRoomUsersVector(FlatBufferBuilder builder, Offset<RoomUser>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRoomUsersVectorBlock(FlatBufferBuilder builder, Offset<RoomUser>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRoomUsersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<S2C_RoomInfo> EndS2C_RoomInfo(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_RoomInfo>(o);
  }
};

public struct S2C_InstanceFinish : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_InstanceFinish GetRootAsS2C_InstanceFinish(ByteBuffer _bb) { return GetRootAsS2C_InstanceFinish(_bb, new S2C_InstanceFinish()); }
  public static S2C_InstanceFinish GetRootAsS2C_InstanceFinish(ByteBuffer _bb, S2C_InstanceFinish obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_InstanceFinish __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool IsClear { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<S2C_InstanceFinish> CreateS2C_InstanceFinish(FlatBufferBuilder builder,
      bool IsClear = false) {
    builder.StartObject(1);
    S2C_InstanceFinish.AddIsClear(builder, IsClear);
    return S2C_InstanceFinish.EndS2C_InstanceFinish(builder);
  }

  public static void StartS2C_InstanceFinish(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddIsClear(FlatBufferBuilder builder, bool IsClear) { builder.AddBool(0, IsClear, false); }
  public static Offset<S2C_InstanceFinish> EndS2C_InstanceFinish(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_InstanceFinish>(o);
  }
};

public struct C2S_PetStatReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static C2S_PetStatReq GetRootAsC2S_PetStatReq(ByteBuffer _bb) { return GetRootAsC2S_PetStatReq(_bb, new C2S_PetStatReq()); }
  public static C2S_PetStatReq GetRootAsC2S_PetStatReq(ByteBuffer _bb, C2S_PetStatReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public C2S_PetStatReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint PetTid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint PetLv { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  ///룬 tid
  public uint Runes(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int RunesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRunesBytes() { return __p.__vector_as_span(8); }
#else
  public ArraySegment<byte>? GetRunesBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public uint[] GetRunesArray() { return __p.__vector_as_array<uint>(8); }

  public static Offset<C2S_PetStatReq> CreateC2S_PetStatReq(FlatBufferBuilder builder,
      uint pet_tid = 0,
      uint pet_lv = 0,
      VectorOffset runesOffset = default(VectorOffset)) {
    builder.StartObject(3);
    C2S_PetStatReq.AddRunes(builder, runesOffset);
    C2S_PetStatReq.AddPetLv(builder, pet_lv);
    C2S_PetStatReq.AddPetTid(builder, pet_tid);
    return C2S_PetStatReq.EndC2S_PetStatReq(builder);
  }

  public static void StartC2S_PetStatReq(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddPetTid(FlatBufferBuilder builder, uint petTid) { builder.AddUint(0, petTid, 0); }
  public static void AddPetLv(FlatBufferBuilder builder, uint petLv) { builder.AddUint(1, petLv, 0); }
  public static void AddRunes(FlatBufferBuilder builder, VectorOffset runesOffset) { builder.AddOffset(2, runesOffset.Value, 0); }
  public static VectorOffset CreateRunesVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRunesVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRunesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<C2S_PetStatReq> EndC2S_PetStatReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<C2S_PetStatReq>(o);
  }
};

public struct S2C_PetStat : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_PetStat GetRootAsS2C_PetStat(ByteBuffer _bb) { return GetRootAsS2C_PetStat(_bb, new S2C_PetStat()); }
  public static S2C_PetStat GetRootAsS2C_PetStat(ByteBuffer _bb, S2C_PetStat obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_PetStat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Ability? Abils(int j) { int o = __p.__offset(4); return o != 0 ? (Ability?)(new Ability()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AbilsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<S2C_PetStat> CreateS2C_PetStat(FlatBufferBuilder builder,
      VectorOffset abilsOffset = default(VectorOffset)) {
    builder.StartObject(1);
    S2C_PetStat.AddAbils(builder, abilsOffset);
    return S2C_PetStat.EndS2C_PetStat(builder);
  }

  public static void StartS2C_PetStat(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddAbils(FlatBufferBuilder builder, VectorOffset abilsOffset) { builder.AddOffset(0, abilsOffset.Value, 0); }
  public static VectorOffset CreateAbilsVector(FlatBufferBuilder builder, Offset<Ability>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAbilsVectorBlock(FlatBufferBuilder builder, Offset<Ability>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAbilsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<S2C_PetStat> EndS2C_PetStat(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_PetStat>(o);
  }
};

public struct S2C_GodLandStatInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_GodLandStatInfo GetRootAsS2C_GodLandStatInfo(ByteBuffer _bb) { return GetRootAsS2C_GodLandStatInfo(_bb, new S2C_GodLandStatInfo()); }
  public static S2C_GodLandStatInfo GetRootAsS2C_GodLandStatInfo(ByteBuffer _bb, S2C_GodLandStatInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_GodLandStatInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint ObjectID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Level { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public float Attack { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float MeleeDefence { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float MagicDefence { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<S2C_GodLandStatInfo> CreateS2C_GodLandStatInfo(FlatBufferBuilder builder,
      uint ObjectID = 0,
      uint Level = 0,
      float Attack = 0.0f,
      float MeleeDefence = 0.0f,
      float MagicDefence = 0.0f) {
    builder.StartObject(5);
    S2C_GodLandStatInfo.AddMagicDefence(builder, MagicDefence);
    S2C_GodLandStatInfo.AddMeleeDefence(builder, MeleeDefence);
    S2C_GodLandStatInfo.AddAttack(builder, Attack);
    S2C_GodLandStatInfo.AddLevel(builder, Level);
    S2C_GodLandStatInfo.AddObjectID(builder, ObjectID);
    return S2C_GodLandStatInfo.EndS2C_GodLandStatInfo(builder);
  }

  public static void StartS2C_GodLandStatInfo(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddObjectID(FlatBufferBuilder builder, uint ObjectID) { builder.AddUint(0, ObjectID, 0); }
  public static void AddLevel(FlatBufferBuilder builder, uint Level) { builder.AddUint(1, Level, 0); }
  public static void AddAttack(FlatBufferBuilder builder, float Attack) { builder.AddFloat(2, Attack, 0.0f); }
  public static void AddMeleeDefence(FlatBufferBuilder builder, float MeleeDefence) { builder.AddFloat(3, MeleeDefence, 0.0f); }
  public static void AddMagicDefence(FlatBufferBuilder builder, float MagicDefence) { builder.AddFloat(4, MagicDefence, 0.0f); }
  public static Offset<S2C_GodLandStatInfo> EndS2C_GodLandStatInfo(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_GodLandStatInfo>(o);
  }
};

public struct S2C_GodLandFinishInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_GodLandFinishInfo GetRootAsS2C_GodLandFinishInfo(ByteBuffer _bb) { return GetRootAsS2C_GodLandFinishInfo(_bb, new S2C_GodLandFinishInfo()); }
  public static S2C_GodLandFinishInfo GetRootAsS2C_GodLandFinishInfo(ByteBuffer _bb, S2C_GodLandFinishInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_GodLandFinishInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool IsWin { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public uint GodLandTid { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<S2C_GodLandFinishInfo> CreateS2C_GodLandFinishInfo(FlatBufferBuilder builder,
      bool IsWin = false,
      uint GodLandTid = 0) {
    builder.StartObject(2);
    S2C_GodLandFinishInfo.AddGodLandTid(builder, GodLandTid);
    S2C_GodLandFinishInfo.AddIsWin(builder, IsWin);
    return S2C_GodLandFinishInfo.EndS2C_GodLandFinishInfo(builder);
  }

  public static void StartS2C_GodLandFinishInfo(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddIsWin(FlatBufferBuilder builder, bool IsWin) { builder.AddBool(0, IsWin, false); }
  public static void AddGodLandTid(FlatBufferBuilder builder, uint GodLandTid) { builder.AddUint(1, GodLandTid, 0); }
  public static Offset<S2C_GodLandFinishInfo> EndS2C_GodLandFinishInfo(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_GodLandFinishInfo>(o);
  }
};

public struct S2C_BossPointRankingList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_BossPointRankingList GetRootAsS2C_BossPointRankingList(ByteBuffer _bb) { return GetRootAsS2C_BossPointRankingList(_bb, new S2C_BossPointRankingList()); }
  public static S2C_BossPointRankingList GetRootAsS2C_BossPointRankingList(ByteBuffer _bb, S2C_BossPointRankingList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_BossPointRankingList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public BossRankerData? PointList(int j) { int o = __p.__offset(4); return o != 0 ? (BossRankerData?)(new BossRankerData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PointListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<S2C_BossPointRankingList> CreateS2C_BossPointRankingList(FlatBufferBuilder builder,
      VectorOffset PointListOffset = default(VectorOffset)) {
    builder.StartObject(1);
    S2C_BossPointRankingList.AddPointList(builder, PointListOffset);
    return S2C_BossPointRankingList.EndS2C_BossPointRankingList(builder);
  }

  public static void StartS2C_BossPointRankingList(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddPointList(FlatBufferBuilder builder, VectorOffset PointListOffset) { builder.AddOffset(0, PointListOffset.Value, 0); }
  public static VectorOffset CreatePointListVector(FlatBufferBuilder builder, Offset<BossRankerData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePointListVectorBlock(FlatBufferBuilder builder, Offset<BossRankerData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPointListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<S2C_BossPointRankingList> EndS2C_BossPointRankingList(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_BossPointRankingList>(o);
  }
};

public struct S2C_BossPointDeathPenalty : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_BossPointDeathPenalty GetRootAsS2C_BossPointDeathPenalty(ByteBuffer _bb) { return GetRootAsS2C_BossPointDeathPenalty(_bb, new S2C_BossPointDeathPenalty()); }
  public static S2C_BossPointDeathPenalty GetRootAsS2C_BossPointDeathPenalty(ByteBuffer _bb, S2C_BossPointDeathPenalty obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_BossPointDeathPenalty __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool IsGet { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float Point { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<S2C_BossPointDeathPenalty> CreateS2C_BossPointDeathPenalty(FlatBufferBuilder builder,
      bool IsGet = false,
      float Point = 0.0f) {
    builder.StartObject(2);
    S2C_BossPointDeathPenalty.AddPoint(builder, Point);
    S2C_BossPointDeathPenalty.AddIsGet(builder, IsGet);
    return S2C_BossPointDeathPenalty.EndS2C_BossPointDeathPenalty(builder);
  }

  public static void StartS2C_BossPointDeathPenalty(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddIsGet(FlatBufferBuilder builder, bool IsGet) { builder.AddBool(0, IsGet, false); }
  public static void AddPoint(FlatBufferBuilder builder, float Point) { builder.AddFloat(1, Point, 0.0f); }
  public static Offset<S2C_BossPointDeathPenalty> EndS2C_BossPointDeathPenalty(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_BossPointDeathPenalty>(o);
  }
};

public struct S2C_ChangeTeam : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_ChangeTeam GetRootAsS2C_ChangeTeam(ByteBuffer _bb) { return GetRootAsS2C_ChangeTeam(_bb, new S2C_ChangeTeam()); }
  public static S2C_ChangeTeam GetRootAsS2C_ChangeTeam(ByteBuffer _bb, S2C_ChangeTeam obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_ChangeTeam __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Objectid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Team { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<S2C_ChangeTeam> CreateS2C_ChangeTeam(FlatBufferBuilder builder,
      uint objectid = 0,
      uint team = 0) {
    builder.StartObject(2);
    S2C_ChangeTeam.AddTeam(builder, team);
    S2C_ChangeTeam.AddObjectid(builder, objectid);
    return S2C_ChangeTeam.EndS2C_ChangeTeam(builder);
  }

  public static void StartS2C_ChangeTeam(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(0, objectid, 0); }
  public static void AddTeam(FlatBufferBuilder builder, uint team) { builder.AddUint(1, team, 0); }
  public static Offset<S2C_ChangeTeam> EndS2C_ChangeTeam(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_ChangeTeam>(o);
  }
};

///봇 기본셋팅 요청
public struct C2S_ReqBotSet : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static C2S_ReqBotSet GetRootAsC2S_ReqBotSet(ByteBuffer _bb) { return GetRootAsC2S_ReqBotSet(_bb, new C2S_ReqBotSet()); }
  public static C2S_ReqBotSet GetRootAsC2S_ReqBotSet(ByteBuffer _bb, C2S_ReqBotSet obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public C2S_ReqBotSet __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Dummy { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<C2S_ReqBotSet> CreateC2S_ReqBotSet(FlatBufferBuilder builder,
      uint dummy = 0) {
    builder.StartObject(1);
    C2S_ReqBotSet.AddDummy(builder, dummy);
    return C2S_ReqBotSet.EndC2S_ReqBotSet(builder);
  }

  public static void StartC2S_ReqBotSet(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddDummy(FlatBufferBuilder builder, uint dummy) { builder.AddUint(0, dummy, 0); }
  public static Offset<C2S_ReqBotSet> EndC2S_ReqBotSet(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<C2S_ReqBotSet>(o);
  }
};

public struct S2C_ResBotSetInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_ResBotSetInfo GetRootAsS2C_ResBotSetInfo(ByteBuffer _bb) { return GetRootAsS2C_ResBotSetInfo(_bb, new S2C_ResBotSetInfo()); }
  public static S2C_ResBotSetInfo GetRootAsS2C_ResBotSetInfo(ByteBuffer _bb, S2C_ResBotSetInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_ResBotSetInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Classid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Skills(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int SkillsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillsBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetSkillsBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public uint[] GetSkillsArray() { return __p.__vector_as_array<uint>(6); }

  public static Offset<S2C_ResBotSetInfo> CreateS2C_ResBotSetInfo(FlatBufferBuilder builder,
      uint classid = 0,
      VectorOffset skillsOffset = default(VectorOffset)) {
    builder.StartObject(2);
    S2C_ResBotSetInfo.AddSkills(builder, skillsOffset);
    S2C_ResBotSetInfo.AddClassid(builder, classid);
    return S2C_ResBotSetInfo.EndS2C_ResBotSetInfo(builder);
  }

  public static void StartS2C_ResBotSetInfo(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddClassid(FlatBufferBuilder builder, uint classid) { builder.AddUint(0, classid, 0); }
  public static void AddSkills(FlatBufferBuilder builder, VectorOffset skillsOffset) { builder.AddOffset(1, skillsOffset.Value, 0); }
  public static VectorOffset CreateSkillsVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSkillsVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSkillsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<S2C_ResBotSetInfo> EndS2C_ResBotSetInfo(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_ResBotSetInfo>(o);
  }
};

public struct S2C_UserBossPoint : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static S2C_UserBossPoint GetRootAsS2C_UserBossPoint(ByteBuffer _bb) { return GetRootAsS2C_UserBossPoint(_bb, new S2C_UserBossPoint()); }
  public static S2C_UserBossPoint GetRootAsS2C_UserBossPoint(ByteBuffer _bb, S2C_UserBossPoint obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public S2C_UserBossPoint __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Point { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<S2C_UserBossPoint> CreateS2C_UserBossPoint(FlatBufferBuilder builder,
      float point = 0.0f) {
    builder.StartObject(1);
    S2C_UserBossPoint.AddPoint(builder, point);
    return S2C_UserBossPoint.EndS2C_UserBossPoint(builder);
  }

  public static void StartS2C_UserBossPoint(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddPoint(FlatBufferBuilder builder, float point) { builder.AddFloat(0, point, 0.0f); }
  public static Offset<S2C_UserBossPoint> EndS2C_UserBossPoint(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<S2C_UserBossPoint>(o);
  }
};

public struct JoinFieldReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static JoinFieldReq GetRootAsJoinFieldReq(ByteBuffer _bb) { return GetRootAsJoinFieldReq(_bb, new JoinFieldReq()); }
  public static JoinFieldReq GetRootAsJoinFieldReq(ByteBuffer _bb, JoinFieldReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public JoinFieldReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong CharId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public ulong UserId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public string Userid { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUseridBytes() { return __p.__vector_as_span(8); }
#else
  public ArraySegment<byte>? GetUseridBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetUseridArray() { return __p.__vector_as_array<byte>(8); }
  public uint Authkey { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  ///서버아이디
  public uint Serverid { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  ///들어갈 방번호 0이면 고정 맵필드..
  public long RoomNo { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<JoinFieldReq> CreateJoinFieldReq(FlatBufferBuilder builder,
      ulong char_id = 0,
      ulong user_id = 0,
      StringOffset useridOffset = default(StringOffset),
      uint authkey = 0,
      uint serverid = 0,
      long room_no = 0) {
    builder.StartObject(6);
    JoinFieldReq.AddRoomNo(builder, room_no);
    JoinFieldReq.AddUserId(builder, user_id);
    JoinFieldReq.AddCharId(builder, char_id);
    JoinFieldReq.AddServerid(builder, serverid);
    JoinFieldReq.AddAuthkey(builder, authkey);
    JoinFieldReq.AddUserid(builder, useridOffset);
    return JoinFieldReq.EndJoinFieldReq(builder);
  }

  public static void StartJoinFieldReq(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddCharId(FlatBufferBuilder builder, ulong charId) { builder.AddUlong(0, charId, 0); }
  public static void AddUserId(FlatBufferBuilder builder, ulong userId) { builder.AddUlong(1, userId, 0); }
  public static void AddUserid(FlatBufferBuilder builder, StringOffset useridOffset) { builder.AddOffset(2, useridOffset.Value, 0); }
  public static void AddAuthkey(FlatBufferBuilder builder, uint authkey) { builder.AddUint(3, authkey, 0); }
  public static void AddServerid(FlatBufferBuilder builder, uint serverid) { builder.AddUint(4, serverid, 0); }
  public static void AddRoomNo(FlatBufferBuilder builder, long roomNo) { builder.AddLong(5, roomNo, 0); }
  public static Offset<JoinFieldReq> EndJoinFieldReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 8);  // userid
    return new Offset<JoinFieldReq>(o);
  }
};

public struct JoinFieldRes : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static JoinFieldRes GetRootAsJoinFieldRes(ByteBuffer _bb) { return GetRootAsJoinFieldRes(_bb, new JoinFieldRes()); }
  public static JoinFieldRes GetRootAsJoinFieldRes(ByteBuffer _bb, JoinFieldRes obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public JoinFieldRes __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long ReJoinKey { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public uint Objectid { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public CharInfo? CharInfo { get { int o = __p.__offset(8); return o != 0 ? (CharInfo?)(new CharInfo()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public sbyte PkType { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)0; } }

  public static Offset<JoinFieldRes> CreateJoinFieldRes(FlatBufferBuilder builder,
      long reJoinKey = 0,
      uint objectid = 0,
      Offset<CharInfo> charInfoOffset = default(Offset<CharInfo>),
      sbyte pk_type = 0) {
    builder.StartObject(4);
    JoinFieldRes.AddReJoinKey(builder, reJoinKey);
    JoinFieldRes.AddCharInfo(builder, charInfoOffset);
    JoinFieldRes.AddObjectid(builder, objectid);
    JoinFieldRes.AddPkType(builder, pk_type);
    return JoinFieldRes.EndJoinFieldRes(builder);
  }

  public static void StartJoinFieldRes(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddReJoinKey(FlatBufferBuilder builder, long reJoinKey) { builder.AddLong(0, reJoinKey, 0); }
  public static void AddObjectid(FlatBufferBuilder builder, uint objectid) { builder.AddUint(1, objectid, 0); }
  public static void AddCharInfo(FlatBufferBuilder builder, Offset<CharInfo> charInfoOffset) { builder.AddOffset(2, charInfoOffset.Value, 0); }
  public static void AddPkType(FlatBufferBuilder builder, sbyte pkType) { builder.AddSbyte(3, pkType, 0); }
  public static Offset<JoinFieldRes> EndJoinFieldRes(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<JoinFieldRes>(o);
  }
};

public struct InMapMsg : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static InMapMsg GetRootAsInMapMsg(ByteBuffer _bb) { return GetRootAsInMapMsg(_bb, new InMapMsg()); }
  public static InMapMsg GetRootAsInMapMsg(ByteBuffer _bb, InMapMsg obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public InMapMsg __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Tick { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public InMapMsgBase? Msgbase { get { int o = __p.__offset(6); return o != 0 ? (InMapMsgBase?)(new InMapMsgBase()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<InMapMsg> CreateInMapMsg(FlatBufferBuilder builder,
      uint tick = 0,
      Offset<InMapMsgBase> msgbaseOffset = default(Offset<InMapMsgBase>)) {
    builder.StartObject(2);
    InMapMsg.AddMsgbase(builder, msgbaseOffset);
    InMapMsg.AddTick(builder, tick);
    return InMapMsg.EndInMapMsg(builder);
  }

  public static void StartInMapMsg(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddTick(FlatBufferBuilder builder, uint tick) { builder.AddUint(0, tick, 0); }
  public static void AddMsgbase(FlatBufferBuilder builder, Offset<InMapMsgBase> msgbaseOffset) { builder.AddOffset(1, msgbaseOffset.Value, 0); }
  public static Offset<InMapMsg> EndInMapMsg(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<InMapMsg>(o);
  }
};

public struct InMapMsgList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static InMapMsgList GetRootAsInMapMsgList(ByteBuffer _bb) { return GetRootAsInMapMsgList(_bb, new InMapMsgList()); }
  public static InMapMsgList GetRootAsInMapMsgList(ByteBuffer _bb, InMapMsgList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public InMapMsgList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Tick { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public InMapMsg? InMapMsg(int j) { int o = __p.__offset(6); return o != 0 ? (InMapMsg?)(new InMapMsg()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int InMapMsgLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<InMapMsgList> CreateInMapMsgList(FlatBufferBuilder builder,
      uint tick = 0,
      VectorOffset inMapMsgOffset = default(VectorOffset)) {
    builder.StartObject(2);
    InMapMsgList.AddInMapMsg(builder, inMapMsgOffset);
    InMapMsgList.AddTick(builder, tick);
    return InMapMsgList.EndInMapMsgList(builder);
  }

  public static void StartInMapMsgList(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddTick(FlatBufferBuilder builder, uint tick) { builder.AddUint(0, tick, 0); }
  public static void AddInMapMsg(FlatBufferBuilder builder, VectorOffset inMapMsgOffset) { builder.AddOffset(1, inMapMsgOffset.Value, 0); }
  public static VectorOffset CreateInMapMsgVector(FlatBufferBuilder builder, Offset<InMapMsg>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateInMapMsgVectorBlock(FlatBufferBuilder builder, Offset<InMapMsg>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartInMapMsgVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<InMapMsgList> EndInMapMsgList(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<InMapMsgList>(o);
  }
};

public struct ReqLoadMapOK : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ReqLoadMapOK GetRootAsReqLoadMapOK(ByteBuffer _bb) { return GetRootAsReqLoadMapOK(_bb, new ReqLoadMapOK()); }
  public static ReqLoadMapOK GetRootAsReqLoadMapOK(ByteBuffer _bb, ReqLoadMapOK obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ReqLoadMapOK __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Tick { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<ReqLoadMapOK> CreateReqLoadMapOK(FlatBufferBuilder builder,
      uint tick = 0) {
    builder.StartObject(1);
    ReqLoadMapOK.AddTick(builder, tick);
    return ReqLoadMapOK.EndReqLoadMapOK(builder);
  }

  public static void StartReqLoadMapOK(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddTick(FlatBufferBuilder builder, uint tick) { builder.AddUint(0, tick, 0); }
  public static Offset<ReqLoadMapOK> EndReqLoadMapOK(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ReqLoadMapOK>(o);
  }
};

///S->C LoadMapOK 받으면 전송해주는 패킷
public struct ResLoadMapOK : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ResLoadMapOK GetRootAsResLoadMapOK(ByteBuffer _bb) { return GetRootAsResLoadMapOK(_bb, new ResLoadMapOK()); }
  public static ResLoadMapOK GetRootAsResLoadMapOK(ByteBuffer _bb, ResLoadMapOK obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ResLoadMapOK __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Tick { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<ResLoadMapOK> CreateResLoadMapOK(FlatBufferBuilder builder,
      uint tick = 0) {
    builder.StartObject(1);
    ResLoadMapOK.AddTick(builder, tick);
    return ResLoadMapOK.EndResLoadMapOK(builder);
  }

  public static void StartResLoadMapOK(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddTick(FlatBufferBuilder builder, uint tick) { builder.AddUint(0, tick, 0); }
  public static Offset<ResLoadMapOK> EndResLoadMapOK(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ResLoadMapOK>(o);
  }
};

public struct MoveServerReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static MoveServerReq GetRootAsMoveServerReq(ByteBuffer _bb) { return GetRootAsMoveServerReq(_bb, new MoveServerReq()); }
  public static MoveServerReq GetRootAsMoveServerReq(ByteBuffer _bb, MoveServerReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public MoveServerReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ushort ChannelNo { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }

  public static Offset<MoveServerReq> CreateMoveServerReq(FlatBufferBuilder builder,
      ushort channel_no = 0) {
    builder.StartObject(1);
    MoveServerReq.AddChannelNo(builder, channel_no);
    return MoveServerReq.EndMoveServerReq(builder);
  }

  public static void StartMoveServerReq(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddChannelNo(FlatBufferBuilder builder, ushort channelNo) { builder.AddUshort(0, channelNo, 0); }
  public static Offset<MoveServerReq> EndMoveServerReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<MoveServerReq>(o);
  }
};

public struct MoveServerRes : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static MoveServerRes GetRootAsMoveServerRes(ByteBuffer _bb) { return GetRootAsMoveServerRes(_bb, new MoveServerRes()); }
  public static MoveServerRes GetRootAsMoveServerRes(ByteBuffer _bb, MoveServerRes obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public MoveServerRes __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Tick { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<MoveServerRes> CreateMoveServerRes(FlatBufferBuilder builder,
      uint tick = 0) {
    builder.StartObject(1);
    MoveServerRes.AddTick(builder, tick);
    return MoveServerRes.EndMoveServerRes(builder);
  }

  public static void StartMoveServerRes(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddTick(FlatBufferBuilder builder, uint tick) { builder.AddUint(0, tick, 0); }
  public static Offset<MoveServerRes> EndMoveServerRes(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<MoveServerRes>(o);
  }
};

public struct LogOutReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static LogOutReq GetRootAsLogOutReq(ByteBuffer _bb) { return GetRootAsLogOutReq(_bb, new LogOutReq()); }
  public static LogOutReq GetRootAsLogOutReq(ByteBuffer _bb, LogOutReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public LogOutReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte Reason { get { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }

  public static Offset<LogOutReq> CreateLogOutReq(FlatBufferBuilder builder,
      byte reason = 0) {
    builder.StartObject(1);
    LogOutReq.AddReason(builder, reason);
    return LogOutReq.EndLogOutReq(builder);
  }

  public static void StartLogOutReq(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddReason(FlatBufferBuilder builder, byte reason) { builder.AddByte(0, reason, 0); }
  public static Offset<LogOutReq> EndLogOutReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<LogOutReq>(o);
  }
};

public struct LogOutRes : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static LogOutRes GetRootAsLogOutRes(ByteBuffer _bb) { return GetRootAsLogOutRes(_bb, new LogOutRes()); }
  public static LogOutRes GetRootAsLogOutRes(ByteBuffer _bb, LogOutRes obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public LogOutRes __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Tick { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<LogOutRes> CreateLogOutRes(FlatBufferBuilder builder,
      uint tick = 0) {
    builder.StartObject(1);
    LogOutRes.AddTick(builder, tick);
    return LogOutRes.EndLogOutRes(builder);
  }

  public static void StartLogOutRes(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddTick(FlatBufferBuilder builder, uint tick) { builder.AddUint(0, tick, 0); }
  public static Offset<LogOutRes> EndLogOutRes(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<LogOutRes>(o);
  }
};

public struct TestBotJoinReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static TestBotJoinReq GetRootAsTestBotJoinReq(ByteBuffer _bb) { return GetRootAsTestBotJoinReq(_bb, new TestBotJoinReq()); }
  public static TestBotJoinReq GetRootAsTestBotJoinReq(ByteBuffer _bb, TestBotJoinReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public TestBotJoinReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Charname { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCharnameBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetCharnameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetCharnameArray() { return __p.__vector_as_array<byte>(4); }
  public uint Stagetid { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<TestBotJoinReq> CreateTestBotJoinReq(FlatBufferBuilder builder,
      StringOffset charnameOffset = default(StringOffset),
      uint stagetid = 0) {
    builder.StartObject(2);
    TestBotJoinReq.AddStagetid(builder, stagetid);
    TestBotJoinReq.AddCharname(builder, charnameOffset);
    return TestBotJoinReq.EndTestBotJoinReq(builder);
  }

  public static void StartTestBotJoinReq(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddCharname(FlatBufferBuilder builder, StringOffset charnameOffset) { builder.AddOffset(0, charnameOffset.Value, 0); }
  public static void AddStagetid(FlatBufferBuilder builder, uint stagetid) { builder.AddUint(1, stagetid, 0); }
  public static Offset<TestBotJoinReq> EndTestBotJoinReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // charname
    return new Offset<TestBotJoinReq>(o);
  }
};

public struct GetServerTimeReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static GetServerTimeReq GetRootAsGetServerTimeReq(ByteBuffer _bb) { return GetRootAsGetServerTimeReq(_bb, new GetServerTimeReq()); }
  public static GetServerTimeReq GetRootAsGetServerTimeReq(ByteBuffer _bb, GetServerTimeReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public GetServerTimeReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong ClientTime { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public uint ProtocolVersion { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<GetServerTimeReq> CreateGetServerTimeReq(FlatBufferBuilder builder,
      ulong client_time = 0,
      uint protocol_version = 0) {
    builder.StartObject(2);
    GetServerTimeReq.AddClientTime(builder, client_time);
    GetServerTimeReq.AddProtocolVersion(builder, protocol_version);
    return GetServerTimeReq.EndGetServerTimeReq(builder);
  }

  public static void StartGetServerTimeReq(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddClientTime(FlatBufferBuilder builder, ulong clientTime) { builder.AddUlong(0, clientTime, 0); }
  public static void AddProtocolVersion(FlatBufferBuilder builder, uint protocolVersion) { builder.AddUint(1, protocolVersion, 0); }
  public static Offset<GetServerTimeReq> EndGetServerTimeReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<GetServerTimeReq>(o);
  }
};

public struct GetServerTimeRes : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static GetServerTimeRes GetRootAsGetServerTimeRes(ByteBuffer _bb) { return GetRootAsGetServerTimeRes(_bb, new GetServerTimeRes()); }
  public static GetServerTimeRes GetRootAsGetServerTimeRes(ByteBuffer _bb, GetServerTimeRes obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public GetServerTimeRes __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong ServerTsMs { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public ulong ClientTime { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }

  public static Offset<GetServerTimeRes> CreateGetServerTimeRes(FlatBufferBuilder builder,
      ulong server_ts_ms = 0,
      ulong client_time = 0) {
    builder.StartObject(2);
    GetServerTimeRes.AddClientTime(builder, client_time);
    GetServerTimeRes.AddServerTsMs(builder, server_ts_ms);
    return GetServerTimeRes.EndGetServerTimeRes(builder);
  }

  public static void StartGetServerTimeRes(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddServerTsMs(FlatBufferBuilder builder, ulong serverTsMs) { builder.AddUlong(0, serverTsMs, 0); }
  public static void AddClientTime(FlatBufferBuilder builder, ulong clientTime) { builder.AddUlong(1, clientTime, 0); }
  public static Offset<GetServerTimeRes> EndGetServerTimeRes(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<GetServerTimeRes>(o);
  }
};


}

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    using System;

    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(324)
            {
                { typeof(global::System.Collections.Generic.List<byte>), 0 },
                { typeof(global::System.Collections.Generic.List<global::GameDB.E_AbilityType>), 1 },
                { typeof(global::System.Collections.Generic.List<global::GameDB.E_BonusType>), 2 },
                { typeof(global::System.Collections.Generic.List<int>), 3 },
                { typeof(global::System.Collections.Generic.List<string>), 4 },
                { typeof(global::System.Collections.Generic.List<uint>), 5 },
                { typeof(global::GameDB.E_AbilityActionType), 6 },
                { typeof(global::GameDB.E_AbilityRetain), 7 },
                { typeof(global::GameDB.E_AbilityTargetType), 8 },
                { typeof(global::GameDB.E_AbilityType), 9 },
                { typeof(global::GameDB.E_AbilityViewType), 10 },
                { typeof(global::GameDB.E_ActiveType), 11 },
                { typeof(global::GameDB.E_AdventureTab), 12 },
                { typeof(global::GameDB.E_ApplicationType), 13 },
                { typeof(global::GameDB.E_ApplyType), 14 },
                { typeof(global::GameDB.E_ArtifactMaterialType), 15 },
                { typeof(global::GameDB.E_AttackType), 16 },
                { typeof(global::GameDB.E_AttendBoardType), 17 },
                { typeof(global::GameDB.E_AttendEventOpenType), 18 },
                { typeof(global::GameDB.E_AttributeType), 19 },
                { typeof(global::GameDB.E_AutoCompleteType), 20 },
                { typeof(global::GameDB.E_AutoNoneInfoType), 21 },
                { typeof(global::GameDB.E_AutoProgressType), 22 },
                { typeof(global::GameDB.E_AutoSlot), 23 },
                { typeof(global::GameDB.E_AutoStorageType), 24 },
                { typeof(global::GameDB.E_AutoUseType), 25 },
                { typeof(global::GameDB.E_BattleType), 26 },
                { typeof(global::GameDB.E_BelongType), 27 },
                { typeof(global::GameDB.E_BonusType), 28 },
                { typeof(global::GameDB.E_BroadcastType), 29 },
                { typeof(global::GameDB.E_BuffStackType), 30 },
                { typeof(global::GameDB.E_BuffSupportType), 31 },
                { typeof(global::GameDB.E_BuffType), 32 },
                { typeof(global::GameDB.E_BuyBonusType), 33 },
                { typeof(global::GameDB.E_BuyKindType), 34 },
                { typeof(global::GameDB.E_BuyLimitType), 35 },
                { typeof(global::GameDB.E_BuyOpenType), 36 },
                { typeof(global::GameDB.E_CallType), 37 },
                { typeof(global::GameDB.E_CashType), 38 },
                { typeof(global::GameDB.E_CastingDeleteType), 39 },
                { typeof(global::GameDB.E_CastingType), 40 },
                { typeof(global::GameDB.E_CategoryType), 41 },
                { typeof(global::GameDB.E_ChangeQuestType), 42 },
                { typeof(global::GameDB.E_ChangeSupportType), 43 },
                { typeof(global::GameDB.E_ChangeType), 44 },
                { typeof(global::GameDB.E_ChannelChange), 45 },
                { typeof(global::GameDB.E_ChannelPrivate), 46 },
                { typeof(global::GameDB.E_CharacterSelect), 47 },
                { typeof(global::GameDB.E_CharacterType), 48 },
                { typeof(global::GameDB.E_CollectionType), 49 },
                { typeof(global::GameDB.E_CollisionType), 50 },
                { typeof(global::GameDB.E_CompleteCheck), 51 },
                { typeof(global::GameDB.E_ConditionControl), 52 },
                { typeof(global::GameDB.E_DailyQuestType), 53 },
                { typeof(global::GameDB.E_DamageType), 54 },
                { typeof(global::GameDB.E_DeathPenaltyType), 55 },
                { typeof(global::GameDB.E_DeathSupportType), 56 },
                { typeof(global::GameDB.E_DeathType), 57 },
                { typeof(global::GameDB.E_DeliveryItemType), 58 },
                { typeof(global::GameDB.E_DestroyType), 59 },
                { typeof(global::GameDB.E_DialogueAutoNextType), 60 },
                { typeof(global::GameDB.E_DialogueBGType), 61 },
                { typeof(global::GameDB.E_DialogueResourceType), 62 },
                { typeof(global::GameDB.E_DialogueSkipType), 63 },
                { typeof(global::GameDB.E_DialogueType), 64 },
                { typeof(global::GameDB.E_DiceUseType), 65 },
                { typeof(global::GameDB.E_DropConditionType), 66 },
                { typeof(global::GameDB.E_DropItemType), 67 },
                { typeof(global::GameDB.E_DropModelType), 68 },
                { typeof(global::GameDB.E_DropType), 69 },
                { typeof(global::GameDB.E_DungeonType), 70 },
                { typeof(global::GameDB.E_EffectOffsetType), 71 },
                { typeof(global::GameDB.E_EffectType), 72 },
                { typeof(global::GameDB.E_EnchantType), 73 },
                { typeof(global::GameDB.E_EnchantUseType), 74 },
                { typeof(global::GameDB.E_EquipSlotType), 75 },
                { typeof(global::GameDB.E_EventCompleteCheck), 76 },
                { typeof(global::GameDB.E_EventOpenDay), 77 },
                { typeof(global::GameDB.E_ExtractionType), 78 },
                { typeof(global::GameDB.E_FlatProductType), 79 },
                { typeof(global::GameDB.E_GachaType), 80 },
                { typeof(global::GameDB.E_GetSupOptionType), 81 },
                { typeof(global::GameDB.E_GodBuffType), 82 },
                { typeof(global::GameDB.E_GoodsKindType), 83 },
                { typeof(global::GameDB.E_GoodsListGetType), 84 },
                { typeof(global::GameDB.E_GuideType), 85 },
                { typeof(global::GameDB.E_GuildBuffType), 86 },
                { typeof(global::GameDB.E_HaveSupportType), 87 },
                { typeof(global::GameDB.E_HiddenUI), 88 },
                { typeof(global::GameDB.E_HitAniType), 89 },
                { typeof(global::GameDB.E_HitPositionType), 90 },
                { typeof(global::GameDB.E_HitPossibleType), 91 },
                { typeof(global::GameDB.E_HudBuffSignType), 92 },
                { typeof(global::GameDB.E_ImmuneControl), 93 },
                { typeof(global::GameDB.E_InvenUseType), 94 },
                { typeof(global::GameDB.E_InvokeTimingType), 95 },
                { typeof(global::GameDB.E_ItemStackType), 96 },
                { typeof(global::GameDB.E_ItemSubType), 97 },
                { typeof(global::GameDB.E_ItemType), 98 },
                { typeof(global::GameDB.E_ItemUseType), 99 },
                { typeof(global::GameDB.E_JobType), 100 },
                { typeof(global::GameDB.E_LevelUpType), 101 },
                { typeof(global::GameDB.E_LimitType), 102 },
                { typeof(global::GameDB.E_LoadingType), 103 },
                { typeof(global::GameDB.E_LocaleType), 104 },
                { typeof(global::GameDB.E_MagicSignType), 105 },
                { typeof(global::GameDB.E_MailReceiver), 106 },
                { typeof(global::GameDB.E_MailType), 107 },
                { typeof(global::GameDB.E_MakeLimitType), 108 },
                { typeof(global::GameDB.E_MakeTapType), 109 },
                { typeof(global::GameDB.E_MakeType), 110 },
                { typeof(global::GameDB.E_MarkAbleType), 111 },
                { typeof(global::GameDB.E_MarkEnchantType), 112 },
                { typeof(global::GameDB.E_MarkType), 113 },
                { typeof(global::GameDB.E_MarkUniqueType), 114 },
                { typeof(global::GameDB.E_MaterialType), 115 },
                { typeof(global::GameDB.E_MileageShopType), 116 },
                { typeof(global::GameDB.E_MiniGoodsType), 117 },
                { typeof(global::GameDB.E_MissileEffectType), 118 },
                { typeof(global::GameDB.E_MissileType), 119 },
                { typeof(global::GameDB.E_ModelSocket), 120 },
                { typeof(global::GameDB.E_MonAI_Type), 121 },
                { typeof(global::GameDB.E_MonsterType), 122 },
                { typeof(global::GameDB.E_MoveType), 123 },
                { typeof(global::GameDB.E_NameViewType), 124 },
                { typeof(global::GameDB.E_NormalShopType), 125 },
                { typeof(global::GameDB.E_NPCSpawnType), 126 },
                { typeof(global::GameDB.E_NPCType), 127 },
                { typeof(global::GameDB.E_ObjectActionType), 128 },
                { typeof(global::GameDB.E_ObjectSpawnType), 129 },
                { typeof(global::GameDB.E_ObjectType), 130 },
                { typeof(global::GameDB.E_OpenDay), 131 },
                { typeof(global::GameDB.E_PayAttendEventStep), 132 },
                { typeof(global::GameDB.E_PetLevelUpType), 133 },
                { typeof(global::GameDB.E_PetType), 134 },
                { typeof(global::GameDB.E_PKAreaChangeType), 135 },
                { typeof(global::GameDB.E_PKUseType), 136 },
                { typeof(global::GameDB.E_PlayType), 137 },
                { typeof(global::GameDB.E_PlusOutput), 138 },
                { typeof(global::GameDB.E_PortalType), 139 },
                { typeof(global::GameDB.E_PosMoveType), 140 },
                { typeof(global::GameDB.E_PreconditionType), 141 },
                { typeof(global::GameDB.E_PriceType), 142 },
                { typeof(global::GameDB.E_QuestGradeType), 143 },
                { typeof(global::GameDB.E_QuestGroupRewardOn), 144 },
                { typeof(global::GameDB.E_QuestOpenType), 145 },
                { typeof(global::GameDB.E_QuestType), 146 },
                { typeof(global::GameDB.E_QuickSlotAutoType), 147 },
                { typeof(global::GameDB.E_QuickSlotType), 148 },
                { typeof(global::GameDB.E_RangeType), 149 },
                { typeof(global::GameDB.E_RankBuffType), 150 },
                { typeof(global::GameDB.E_ReconnectionType), 151 },
                { typeof(global::GameDB.E_RegistrationUI), 152 },
                { typeof(global::GameDB.E_Replay), 153 },
                { typeof(global::GameDB.E_ReturnType), 154 },
                { typeof(global::GameDB.E_RewardExpType), 155 },
                { typeof(global::GameDB.E_RidingType), 156 },
                { typeof(global::GameDB.E_RoamingType), 157 },
                { typeof(global::GameDB.E_RotationType), 158 },
                { typeof(global::GameDB.E_RoundingType), 159 },
                { typeof(global::GameDB.E_RuneGradeType), 160 },
                { typeof(global::GameDB.E_RuneOptionType), 161 },
                { typeof(global::GameDB.E_RuneSetType), 162 },
                { typeof(global::GameDB.E_RuneType), 163 },
                { typeof(global::GameDB.E_ScenarioDialogueType), 164 },
                { typeof(global::GameDB.E_ScenarioDirectionType), 165 },
                { typeof(global::GameDB.E_ScenarioGuideType), 166 },
                { typeof(global::GameDB.E_SelectRewardOrderType), 167 },
                { typeof(global::GameDB.E_ServerCheckType), 168 },
                { typeof(global::GameDB.E_ServerEventSubCategory), 169 },
                { typeof(global::GameDB.E_ServerType), 170 },
                { typeof(global::GameDB.E_ShopType), 171 },
                { typeof(global::GameDB.E_SizeType), 172 },
                { typeof(global::GameDB.E_SkillAniType), 173 },
                { typeof(global::GameDB.E_SkillArouseType), 174 },
                { typeof(global::GameDB.E_SkillEventType), 175 },
                { typeof(global::GameDB.E_SkillType), 176 },
                { typeof(global::GameDB.E_SmeltScrollUseType), 177 },
                { typeof(global::GameDB.E_SoundType), 178 },
                { typeof(global::GameDB.E_SpawnType), 179 },
                { typeof(global::GameDB.E_SpecialButtonType), 180 },
                { typeof(global::GameDB.E_SpecialShopType), 181 },
                { typeof(global::GameDB.E_SpecialSubTapType), 182 },
                { typeof(global::GameDB.E_StageClearType), 183 },
                { typeof(global::GameDB.E_StageEnterType), 184 },
                { typeof(global::GameDB.E_StageOpenType), 185 },
                { typeof(global::GameDB.E_StageSaveType), 186 },
                { typeof(global::GameDB.E_StageType), 187 },
                { typeof(global::GameDB.E_StateOutputType), 188 },
                { typeof(global::GameDB.E_StateType), 189 },
                { typeof(global::GameDB.E_SubTapType), 190 },
                { typeof(global::GameDB.E_SummonBossType), 191 },
                { typeof(global::GameDB.E_SummonType), 192 },
                { typeof(global::GameDB.E_TapType), 193 },
                { typeof(global::GameDB.E_TargetPosType), 194 },
                { typeof(global::GameDB.E_TargetType), 195 },
                { typeof(global::GameDB.E_TargetUseType), 196 },
                { typeof(global::GameDB.E_TaskQuestType), 197 },
                { typeof(global::GameDB.E_TeleportType), 198 },
                { typeof(global::GameDB.E_TempleType), 199 },
                { typeof(global::GameDB.E_TendencyDownType), 200 },
                { typeof(global::GameDB.E_TendencyIconType), 201 },
                { typeof(global::GameDB.E_TextType), 202 },
                { typeof(global::GameDB.E_ToolTipType), 203 },
                { typeof(global::GameDB.E_TownUseType), 204 },
                { typeof(global::GameDB.E_TradeSubTapType), 205 },
                { typeof(global::GameDB.E_TradeTapType), 206 },
                { typeof(global::GameDB.E_TutorialType), 207 },
                { typeof(global::GameDB.E_UIChapterType), 208 },
                { typeof(global::GameDB.E_UICompleteHideType), 209 },
                { typeof(global::GameDB.E_UIQuestType), 210 },
                { typeof(global::GameDB.E_UIShortCut), 211 },
                { typeof(global::GameDB.E_UIType), 212 },
                { typeof(global::GameDB.E_UniqueType), 213 },
                { typeof(global::GameDB.E_UnitAttributeType), 214 },
                { typeof(global::GameDB.E_UnitType), 215 },
                { typeof(global::GameDB.E_UnusedType), 216 },
                { typeof(global::GameDB.E_VideoType), 217 },
                { typeof(global::GameDB.E_ViewType), 218 },
                { typeof(global::GameDB.E_WeaponType), 219 },
                { typeof(global::GameDB.Ability_Table), 220 },
                { typeof(global::GameDB.AbilityAction_Table), 221 },
                { typeof(global::GameDB.Animation_Table), 222 },
                { typeof(global::GameDB.Artifact_Table), 223 },
                { typeof(global::GameDB.ArtifactLink_Table), 224 },
                { typeof(global::GameDB.AttendEvent_Table), 225 },
                { typeof(global::GameDB.Attribute_Table), 226 },
                { typeof(global::GameDB.AttributeChain_Table), 227 },
                { typeof(global::GameDB.AttributeDamage_Table), 228 },
                { typeof(global::GameDB.BossWar_Table), 229 },
                { typeof(global::GameDB.Broadcast_Table), 230 },
                { typeof(global::GameDB.Change_Table), 231 },
                { typeof(global::GameDB.ChangeCollection_Table), 232 },
                { typeof(global::GameDB.ChangeCompose_Table), 233 },
                { typeof(global::GameDB.ChangeList_Table), 234 },
                { typeof(global::GameDB.ChangeQuest_Table), 235 },
                { typeof(global::GameDB.ChangeQuestLevel_Table), 236 },
                { typeof(global::GameDB.Character_Table), 237 },
                { typeof(global::GameDB.ClassChange_Table), 238 },
                { typeof(global::GameDB.ColoSeasonReward_Table), 239 },
                { typeof(global::GameDB.Colosseum_Table), 240 },
                { typeof(global::GameDB.Config_Table), 241 },
                { typeof(global::GameDB.Cooking_Table), 242 },
                { typeof(global::GameDB.CouponGroup_Table), 243 },
                { typeof(global::GameDB.DailyQuest_Table), 244 },
                { typeof(global::GameDB.DailyQuestList_Table), 245 },
                { typeof(global::GameDB.DeathPenalty_Table), 246 },
                { typeof(global::GameDB.Dialogue_Table), 247 },
                { typeof(global::GameDB.DropGroup_Table), 248 },
                { typeof(global::GameDB.Effect_Table), 249 },
                { typeof(global::GameDB.Emoticon_Table), 250 },
                { typeof(global::GameDB.EventList_Table), 251 },
                { typeof(global::GameDB.EventReward_Table), 252 },
                { typeof(global::GameDB.Gacha_Table), 253 },
                { typeof(global::GameDB.GodBuff_Table), 254 },
                { typeof(global::GameDB.GodLand_Table), 255 },
                { typeof(global::GameDB.Guild_Table), 256 },
                { typeof(global::GameDB.GuildBuff_Table), 257 },
                { typeof(global::GameDB.GuildMark_Table), 258 },
                { typeof(global::GameDB.InfiBuff_Table), 259 },
                { typeof(global::GameDB.InfinityDungeon_Table), 260 },
                { typeof(global::GameDB.InfinitySchedule_Table), 261 },
                { typeof(global::GameDB.Infor_Table), 262 },
                { typeof(global::GameDB.Item_Table), 263 },
                { typeof(global::GameDB.ItemCollection_Table), 264 },
                { typeof(global::GameDB.ItemEnchant_Table), 265 },
                { typeof(global::GameDB.Level_Table), 266 },
                { typeof(global::GameDB.LineLog_Table), 267 },
                { typeof(global::GameDB.ListGroup_Table), 268 },
                { typeof(global::GameDB.Loading_Table), 269 },
                { typeof(global::GameDB.LoadingTip_Table), 270 },
                { typeof(global::GameDB.Locale_Table), 271 },
                { typeof(global::GameDB.Mail_Table), 272 },
                { typeof(global::GameDB.Make_Table), 273 },
                { typeof(global::GameDB.Mark_Table), 274 },
                { typeof(global::GameDB.MarkEnchant_Table), 275 },
                { typeof(global::GameDB.MezRate_Table), 276 },
                { typeof(global::GameDB.MileageShop_Table), 277 },
                { typeof(global::GameDB.Monster_Table), 278 },
                { typeof(global::GameDB.MonsterDrop_Table), 279 },
                { typeof(global::GameDB.NormalShop_Table), 280 },
                { typeof(global::GameDB.NPC_Table), 281 },
                { typeof(global::GameDB.Object_Table), 282 },
                { typeof(global::GameDB.Pet_Table), 283 },
                { typeof(global::GameDB.PetAdventure_Table), 284 },
                { typeof(global::GameDB.PetCollection_Table), 285 },
                { typeof(global::GameDB.PetCompose_Table), 286 },
                { typeof(global::GameDB.PetGrowth_Table), 287 },
                { typeof(global::GameDB.PetLevel_Table), 288 },
                { typeof(global::GameDB.PetList_Table), 289 },
                { typeof(global::GameDB.PKBuff_Table), 290 },
                { typeof(global::GameDB.Portal_Table), 291 },
                { typeof(global::GameDB.Price_Table), 292 },
                { typeof(global::GameDB.Quest_Table), 293 },
                { typeof(global::GameDB.QuestEvent_Table), 294 },
                { typeof(global::GameDB.RankBuff_Table), 295 },
                { typeof(global::GameDB.Resource_Table), 296 },
                { typeof(global::GameDB.Restoration_Table), 297 },
                { typeof(global::GameDB.RuneComponent_Table), 298 },
                { typeof(global::GameDB.RuneEnchant_Table), 299 },
                { typeof(global::GameDB.RuneOption_Table), 300 },
                { typeof(global::GameDB.RuneSet_Table), 301 },
                { typeof(global::GameDB.ScenarioAbility_Table), 302 },
                { typeof(global::GameDB.ScenarioDirection_Table), 303 },
                { typeof(global::GameDB.ScenarioMission_Table), 304 },
                { typeof(global::GameDB.ShopList_Table), 305 },
                { typeof(global::GameDB.Skill_Table), 306 },
                { typeof(global::GameDB.SmeltOptionRate_Table), 307 },
                { typeof(global::GameDB.SmeltScroll_Table), 308 },
                { typeof(global::GameDB.SmeltScrollOption_Table), 309 },
                { typeof(global::GameDB.Sound_Table), 310 },
                { typeof(global::GameDB.SpecialShop_Table), 311 },
                { typeof(global::GameDB.Stage_Table), 312 },
                { typeof(global::GameDB.StageDrop_Table), 313 },
                { typeof(global::GameDB.StageDropList_Table), 314 },
                { typeof(global::GameDB.StartingItem_Table), 315 },
                { typeof(global::GameDB.Summon_Table), 316 },
                { typeof(global::GameDB.Survery_Table), 317 },
                { typeof(global::GameDB.Temple_Table), 318 },
                { typeof(global::GameDB.TempleObject_Table), 319 },
                { typeof(global::GameDB.Tutorial_Table), 320 },
                { typeof(global::GameDB.UIResource_Table), 321 },
                { typeof(global::GameDB.UpgradeList_Table), 322 },
                { typeof(global::GameDB.WeightPenalty_Table), 323 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ListFormatter<byte>();
                case 1: return new global::MessagePack.Formatters.ListFormatter<global::GameDB.E_AbilityType>();
                case 2: return new global::MessagePack.Formatters.ListFormatter<global::GameDB.E_BonusType>();
                case 3: return new global::MessagePack.Formatters.ListFormatter<int>();
                case 4: return new global::MessagePack.Formatters.ListFormatter<string>();
                case 5: return new global::MessagePack.Formatters.ListFormatter<uint>();
                case 6: return new MessagePack.Formatters.GameDB.E_AbilityActionTypeFormatter();
                case 7: return new MessagePack.Formatters.GameDB.E_AbilityRetainFormatter();
                case 8: return new MessagePack.Formatters.GameDB.E_AbilityTargetTypeFormatter();
                case 9: return new MessagePack.Formatters.GameDB.E_AbilityTypeFormatter();
                case 10: return new MessagePack.Formatters.GameDB.E_AbilityViewTypeFormatter();
                case 11: return new MessagePack.Formatters.GameDB.E_ActiveTypeFormatter();
                case 12: return new MessagePack.Formatters.GameDB.E_AdventureTabFormatter();
                case 13: return new MessagePack.Formatters.GameDB.E_ApplicationTypeFormatter();
                case 14: return new MessagePack.Formatters.GameDB.E_ApplyTypeFormatter();
                case 15: return new MessagePack.Formatters.GameDB.E_ArtifactMaterialTypeFormatter();
                case 16: return new MessagePack.Formatters.GameDB.E_AttackTypeFormatter();
                case 17: return new MessagePack.Formatters.GameDB.E_AttendBoardTypeFormatter();
                case 18: return new MessagePack.Formatters.GameDB.E_AttendEventOpenTypeFormatter();
                case 19: return new MessagePack.Formatters.GameDB.E_AttributeTypeFormatter();
                case 20: return new MessagePack.Formatters.GameDB.E_AutoCompleteTypeFormatter();
                case 21: return new MessagePack.Formatters.GameDB.E_AutoNoneInfoTypeFormatter();
                case 22: return new MessagePack.Formatters.GameDB.E_AutoProgressTypeFormatter();
                case 23: return new MessagePack.Formatters.GameDB.E_AutoSlotFormatter();
                case 24: return new MessagePack.Formatters.GameDB.E_AutoStorageTypeFormatter();
                case 25: return new MessagePack.Formatters.GameDB.E_AutoUseTypeFormatter();
                case 26: return new MessagePack.Formatters.GameDB.E_BattleTypeFormatter();
                case 27: return new MessagePack.Formatters.GameDB.E_BelongTypeFormatter();
                case 28: return new MessagePack.Formatters.GameDB.E_BonusTypeFormatter();
                case 29: return new MessagePack.Formatters.GameDB.E_BroadcastTypeFormatter();
                case 30: return new MessagePack.Formatters.GameDB.E_BuffStackTypeFormatter();
                case 31: return new MessagePack.Formatters.GameDB.E_BuffSupportTypeFormatter();
                case 32: return new MessagePack.Formatters.GameDB.E_BuffTypeFormatter();
                case 33: return new MessagePack.Formatters.GameDB.E_BuyBonusTypeFormatter();
                case 34: return new MessagePack.Formatters.GameDB.E_BuyKindTypeFormatter();
                case 35: return new MessagePack.Formatters.GameDB.E_BuyLimitTypeFormatter();
                case 36: return new MessagePack.Formatters.GameDB.E_BuyOpenTypeFormatter();
                case 37: return new MessagePack.Formatters.GameDB.E_CallTypeFormatter();
                case 38: return new MessagePack.Formatters.GameDB.E_CashTypeFormatter();
                case 39: return new MessagePack.Formatters.GameDB.E_CastingDeleteTypeFormatter();
                case 40: return new MessagePack.Formatters.GameDB.E_CastingTypeFormatter();
                case 41: return new MessagePack.Formatters.GameDB.E_CategoryTypeFormatter();
                case 42: return new MessagePack.Formatters.GameDB.E_ChangeQuestTypeFormatter();
                case 43: return new MessagePack.Formatters.GameDB.E_ChangeSupportTypeFormatter();
                case 44: return new MessagePack.Formatters.GameDB.E_ChangeTypeFormatter();
                case 45: return new MessagePack.Formatters.GameDB.E_ChannelChangeFormatter();
                case 46: return new MessagePack.Formatters.GameDB.E_ChannelPrivateFormatter();
                case 47: return new MessagePack.Formatters.GameDB.E_CharacterSelectFormatter();
                case 48: return new MessagePack.Formatters.GameDB.E_CharacterTypeFormatter();
                case 49: return new MessagePack.Formatters.GameDB.E_CollectionTypeFormatter();
                case 50: return new MessagePack.Formatters.GameDB.E_CollisionTypeFormatter();
                case 51: return new MessagePack.Formatters.GameDB.E_CompleteCheckFormatter();
                case 52: return new MessagePack.Formatters.GameDB.E_ConditionControlFormatter();
                case 53: return new MessagePack.Formatters.GameDB.E_DailyQuestTypeFormatter();
                case 54: return new MessagePack.Formatters.GameDB.E_DamageTypeFormatter();
                case 55: return new MessagePack.Formatters.GameDB.E_DeathPenaltyTypeFormatter();
                case 56: return new MessagePack.Formatters.GameDB.E_DeathSupportTypeFormatter();
                case 57: return new MessagePack.Formatters.GameDB.E_DeathTypeFormatter();
                case 58: return new MessagePack.Formatters.GameDB.E_DeliveryItemTypeFormatter();
                case 59: return new MessagePack.Formatters.GameDB.E_DestroyTypeFormatter();
                case 60: return new MessagePack.Formatters.GameDB.E_DialogueAutoNextTypeFormatter();
                case 61: return new MessagePack.Formatters.GameDB.E_DialogueBGTypeFormatter();
                case 62: return new MessagePack.Formatters.GameDB.E_DialogueResourceTypeFormatter();
                case 63: return new MessagePack.Formatters.GameDB.E_DialogueSkipTypeFormatter();
                case 64: return new MessagePack.Formatters.GameDB.E_DialogueTypeFormatter();
                case 65: return new MessagePack.Formatters.GameDB.E_DiceUseTypeFormatter();
                case 66: return new MessagePack.Formatters.GameDB.E_DropConditionTypeFormatter();
                case 67: return new MessagePack.Formatters.GameDB.E_DropItemTypeFormatter();
                case 68: return new MessagePack.Formatters.GameDB.E_DropModelTypeFormatter();
                case 69: return new MessagePack.Formatters.GameDB.E_DropTypeFormatter();
                case 70: return new MessagePack.Formatters.GameDB.E_DungeonTypeFormatter();
                case 71: return new MessagePack.Formatters.GameDB.E_EffectOffsetTypeFormatter();
                case 72: return new MessagePack.Formatters.GameDB.E_EffectTypeFormatter();
                case 73: return new MessagePack.Formatters.GameDB.E_EnchantTypeFormatter();
                case 74: return new MessagePack.Formatters.GameDB.E_EnchantUseTypeFormatter();
                case 75: return new MessagePack.Formatters.GameDB.E_EquipSlotTypeFormatter();
                case 76: return new MessagePack.Formatters.GameDB.E_EventCompleteCheckFormatter();
                case 77: return new MessagePack.Formatters.GameDB.E_EventOpenDayFormatter();
                case 78: return new MessagePack.Formatters.GameDB.E_ExtractionTypeFormatter();
                case 79: return new MessagePack.Formatters.GameDB.E_FlatProductTypeFormatter();
                case 80: return new MessagePack.Formatters.GameDB.E_GachaTypeFormatter();
                case 81: return new MessagePack.Formatters.GameDB.E_GetSupOptionTypeFormatter();
                case 82: return new MessagePack.Formatters.GameDB.E_GodBuffTypeFormatter();
                case 83: return new MessagePack.Formatters.GameDB.E_GoodsKindTypeFormatter();
                case 84: return new MessagePack.Formatters.GameDB.E_GoodsListGetTypeFormatter();
                case 85: return new MessagePack.Formatters.GameDB.E_GuideTypeFormatter();
                case 86: return new MessagePack.Formatters.GameDB.E_GuildBuffTypeFormatter();
                case 87: return new MessagePack.Formatters.GameDB.E_HaveSupportTypeFormatter();
                case 88: return new MessagePack.Formatters.GameDB.E_HiddenUIFormatter();
                case 89: return new MessagePack.Formatters.GameDB.E_HitAniTypeFormatter();
                case 90: return new MessagePack.Formatters.GameDB.E_HitPositionTypeFormatter();
                case 91: return new MessagePack.Formatters.GameDB.E_HitPossibleTypeFormatter();
                case 92: return new MessagePack.Formatters.GameDB.E_HudBuffSignTypeFormatter();
                case 93: return new MessagePack.Formatters.GameDB.E_ImmuneControlFormatter();
                case 94: return new MessagePack.Formatters.GameDB.E_InvenUseTypeFormatter();
                case 95: return new MessagePack.Formatters.GameDB.E_InvokeTimingTypeFormatter();
                case 96: return new MessagePack.Formatters.GameDB.E_ItemStackTypeFormatter();
                case 97: return new MessagePack.Formatters.GameDB.E_ItemSubTypeFormatter();
                case 98: return new MessagePack.Formatters.GameDB.E_ItemTypeFormatter();
                case 99: return new MessagePack.Formatters.GameDB.E_ItemUseTypeFormatter();
                case 100: return new MessagePack.Formatters.GameDB.E_JobTypeFormatter();
                case 101: return new MessagePack.Formatters.GameDB.E_LevelUpTypeFormatter();
                case 102: return new MessagePack.Formatters.GameDB.E_LimitTypeFormatter();
                case 103: return new MessagePack.Formatters.GameDB.E_LoadingTypeFormatter();
                case 104: return new MessagePack.Formatters.GameDB.E_LocaleTypeFormatter();
                case 105: return new MessagePack.Formatters.GameDB.E_MagicSignTypeFormatter();
                case 106: return new MessagePack.Formatters.GameDB.E_MailReceiverFormatter();
                case 107: return new MessagePack.Formatters.GameDB.E_MailTypeFormatter();
                case 108: return new MessagePack.Formatters.GameDB.E_MakeLimitTypeFormatter();
                case 109: return new MessagePack.Formatters.GameDB.E_MakeTapTypeFormatter();
                case 110: return new MessagePack.Formatters.GameDB.E_MakeTypeFormatter();
                case 111: return new MessagePack.Formatters.GameDB.E_MarkAbleTypeFormatter();
                case 112: return new MessagePack.Formatters.GameDB.E_MarkEnchantTypeFormatter();
                case 113: return new MessagePack.Formatters.GameDB.E_MarkTypeFormatter();
                case 114: return new MessagePack.Formatters.GameDB.E_MarkUniqueTypeFormatter();
                case 115: return new MessagePack.Formatters.GameDB.E_MaterialTypeFormatter();
                case 116: return new MessagePack.Formatters.GameDB.E_MileageShopTypeFormatter();
                case 117: return new MessagePack.Formatters.GameDB.E_MiniGoodsTypeFormatter();
                case 118: return new MessagePack.Formatters.GameDB.E_MissileEffectTypeFormatter();
                case 119: return new MessagePack.Formatters.GameDB.E_MissileTypeFormatter();
                case 120: return new MessagePack.Formatters.GameDB.E_ModelSocketFormatter();
                case 121: return new MessagePack.Formatters.GameDB.E_MonAI_TypeFormatter();
                case 122: return new MessagePack.Formatters.GameDB.E_MonsterTypeFormatter();
                case 123: return new MessagePack.Formatters.GameDB.E_MoveTypeFormatter();
                case 124: return new MessagePack.Formatters.GameDB.E_NameViewTypeFormatter();
                case 125: return new MessagePack.Formatters.GameDB.E_NormalShopTypeFormatter();
                case 126: return new MessagePack.Formatters.GameDB.E_NPCSpawnTypeFormatter();
                case 127: return new MessagePack.Formatters.GameDB.E_NPCTypeFormatter();
                case 128: return new MessagePack.Formatters.GameDB.E_ObjectActionTypeFormatter();
                case 129: return new MessagePack.Formatters.GameDB.E_ObjectSpawnTypeFormatter();
                case 130: return new MessagePack.Formatters.GameDB.E_ObjectTypeFormatter();
                case 131: return new MessagePack.Formatters.GameDB.E_OpenDayFormatter();
                case 132: return new MessagePack.Formatters.GameDB.E_PayAttendEventStepFormatter();
                case 133: return new MessagePack.Formatters.GameDB.E_PetLevelUpTypeFormatter();
                case 134: return new MessagePack.Formatters.GameDB.E_PetTypeFormatter();
                case 135: return new MessagePack.Formatters.GameDB.E_PKAreaChangeTypeFormatter();
                case 136: return new MessagePack.Formatters.GameDB.E_PKUseTypeFormatter();
                case 137: return new MessagePack.Formatters.GameDB.E_PlayTypeFormatter();
                case 138: return new MessagePack.Formatters.GameDB.E_PlusOutputFormatter();
                case 139: return new MessagePack.Formatters.GameDB.E_PortalTypeFormatter();
                case 140: return new MessagePack.Formatters.GameDB.E_PosMoveTypeFormatter();
                case 141: return new MessagePack.Formatters.GameDB.E_PreconditionTypeFormatter();
                case 142: return new MessagePack.Formatters.GameDB.E_PriceTypeFormatter();
                case 143: return new MessagePack.Formatters.GameDB.E_QuestGradeTypeFormatter();
                case 144: return new MessagePack.Formatters.GameDB.E_QuestGroupRewardOnFormatter();
                case 145: return new MessagePack.Formatters.GameDB.E_QuestOpenTypeFormatter();
                case 146: return new MessagePack.Formatters.GameDB.E_QuestTypeFormatter();
                case 147: return new MessagePack.Formatters.GameDB.E_QuickSlotAutoTypeFormatter();
                case 148: return new MessagePack.Formatters.GameDB.E_QuickSlotTypeFormatter();
                case 149: return new MessagePack.Formatters.GameDB.E_RangeTypeFormatter();
                case 150: return new MessagePack.Formatters.GameDB.E_RankBuffTypeFormatter();
                case 151: return new MessagePack.Formatters.GameDB.E_ReconnectionTypeFormatter();
                case 152: return new MessagePack.Formatters.GameDB.E_RegistrationUIFormatter();
                case 153: return new MessagePack.Formatters.GameDB.E_ReplayFormatter();
                case 154: return new MessagePack.Formatters.GameDB.E_ReturnTypeFormatter();
                case 155: return new MessagePack.Formatters.GameDB.E_RewardExpTypeFormatter();
                case 156: return new MessagePack.Formatters.GameDB.E_RidingTypeFormatter();
                case 157: return new MessagePack.Formatters.GameDB.E_RoamingTypeFormatter();
                case 158: return new MessagePack.Formatters.GameDB.E_RotationTypeFormatter();
                case 159: return new MessagePack.Formatters.GameDB.E_RoundingTypeFormatter();
                case 160: return new MessagePack.Formatters.GameDB.E_RuneGradeTypeFormatter();
                case 161: return new MessagePack.Formatters.GameDB.E_RuneOptionTypeFormatter();
                case 162: return new MessagePack.Formatters.GameDB.E_RuneSetTypeFormatter();
                case 163: return new MessagePack.Formatters.GameDB.E_RuneTypeFormatter();
                case 164: return new MessagePack.Formatters.GameDB.E_ScenarioDialogueTypeFormatter();
                case 165: return new MessagePack.Formatters.GameDB.E_ScenarioDirectionTypeFormatter();
                case 166: return new MessagePack.Formatters.GameDB.E_ScenarioGuideTypeFormatter();
                case 167: return new MessagePack.Formatters.GameDB.E_SelectRewardOrderTypeFormatter();
                case 168: return new MessagePack.Formatters.GameDB.E_ServerCheckTypeFormatter();
                case 169: return new MessagePack.Formatters.GameDB.E_ServerEventSubCategoryFormatter();
                case 170: return new MessagePack.Formatters.GameDB.E_ServerTypeFormatter();
                case 171: return new MessagePack.Formatters.GameDB.E_ShopTypeFormatter();
                case 172: return new MessagePack.Formatters.GameDB.E_SizeTypeFormatter();
                case 173: return new MessagePack.Formatters.GameDB.E_SkillAniTypeFormatter();
                case 174: return new MessagePack.Formatters.GameDB.E_SkillArouseTypeFormatter();
                case 175: return new MessagePack.Formatters.GameDB.E_SkillEventTypeFormatter();
                case 176: return new MessagePack.Formatters.GameDB.E_SkillTypeFormatter();
                case 177: return new MessagePack.Formatters.GameDB.E_SmeltScrollUseTypeFormatter();
                case 178: return new MessagePack.Formatters.GameDB.E_SoundTypeFormatter();
                case 179: return new MessagePack.Formatters.GameDB.E_SpawnTypeFormatter();
                case 180: return new MessagePack.Formatters.GameDB.E_SpecialButtonTypeFormatter();
                case 181: return new MessagePack.Formatters.GameDB.E_SpecialShopTypeFormatter();
                case 182: return new MessagePack.Formatters.GameDB.E_SpecialSubTapTypeFormatter();
                case 183: return new MessagePack.Formatters.GameDB.E_StageClearTypeFormatter();
                case 184: return new MessagePack.Formatters.GameDB.E_StageEnterTypeFormatter();
                case 185: return new MessagePack.Formatters.GameDB.E_StageOpenTypeFormatter();
                case 186: return new MessagePack.Formatters.GameDB.E_StageSaveTypeFormatter();
                case 187: return new MessagePack.Formatters.GameDB.E_StageTypeFormatter();
                case 188: return new MessagePack.Formatters.GameDB.E_StateOutputTypeFormatter();
                case 189: return new MessagePack.Formatters.GameDB.E_StateTypeFormatter();
                case 190: return new MessagePack.Formatters.GameDB.E_SubTapTypeFormatter();
                case 191: return new MessagePack.Formatters.GameDB.E_SummonBossTypeFormatter();
                case 192: return new MessagePack.Formatters.GameDB.E_SummonTypeFormatter();
                case 193: return new MessagePack.Formatters.GameDB.E_TapTypeFormatter();
                case 194: return new MessagePack.Formatters.GameDB.E_TargetPosTypeFormatter();
                case 195: return new MessagePack.Formatters.GameDB.E_TargetTypeFormatter();
                case 196: return new MessagePack.Formatters.GameDB.E_TargetUseTypeFormatter();
                case 197: return new MessagePack.Formatters.GameDB.E_TaskQuestTypeFormatter();
                case 198: return new MessagePack.Formatters.GameDB.E_TeleportTypeFormatter();
                case 199: return new MessagePack.Formatters.GameDB.E_TempleTypeFormatter();
                case 200: return new MessagePack.Formatters.GameDB.E_TendencyDownTypeFormatter();
                case 201: return new MessagePack.Formatters.GameDB.E_TendencyIconTypeFormatter();
                case 202: return new MessagePack.Formatters.GameDB.E_TextTypeFormatter();
                case 203: return new MessagePack.Formatters.GameDB.E_ToolTipTypeFormatter();
                case 204: return new MessagePack.Formatters.GameDB.E_TownUseTypeFormatter();
                case 205: return new MessagePack.Formatters.GameDB.E_TradeSubTapTypeFormatter();
                case 206: return new MessagePack.Formatters.GameDB.E_TradeTapTypeFormatter();
                case 207: return new MessagePack.Formatters.GameDB.E_TutorialTypeFormatter();
                case 208: return new MessagePack.Formatters.GameDB.E_UIChapterTypeFormatter();
                case 209: return new MessagePack.Formatters.GameDB.E_UICompleteHideTypeFormatter();
                case 210: return new MessagePack.Formatters.GameDB.E_UIQuestTypeFormatter();
                case 211: return new MessagePack.Formatters.GameDB.E_UIShortCutFormatter();
                case 212: return new MessagePack.Formatters.GameDB.E_UITypeFormatter();
                case 213: return new MessagePack.Formatters.GameDB.E_UniqueTypeFormatter();
                case 214: return new MessagePack.Formatters.GameDB.E_UnitAttributeTypeFormatter();
                case 215: return new MessagePack.Formatters.GameDB.E_UnitTypeFormatter();
                case 216: return new MessagePack.Formatters.GameDB.E_UnusedTypeFormatter();
                case 217: return new MessagePack.Formatters.GameDB.E_VideoTypeFormatter();
                case 218: return new MessagePack.Formatters.GameDB.E_ViewTypeFormatter();
                case 219: return new MessagePack.Formatters.GameDB.E_WeaponTypeFormatter();
                case 220: return new MessagePack.Formatters.GameDB.Ability_TableFormatter();
                case 221: return new MessagePack.Formatters.GameDB.AbilityAction_TableFormatter();
                case 222: return new MessagePack.Formatters.GameDB.Animation_TableFormatter();
                case 223: return new MessagePack.Formatters.GameDB.Artifact_TableFormatter();
                case 224: return new MessagePack.Formatters.GameDB.ArtifactLink_TableFormatter();
                case 225: return new MessagePack.Formatters.GameDB.AttendEvent_TableFormatter();
                case 226: return new MessagePack.Formatters.GameDB.Attribute_TableFormatter();
                case 227: return new MessagePack.Formatters.GameDB.AttributeChain_TableFormatter();
                case 228: return new MessagePack.Formatters.GameDB.AttributeDamage_TableFormatter();
                case 229: return new MessagePack.Formatters.GameDB.BossWar_TableFormatter();
                case 230: return new MessagePack.Formatters.GameDB.Broadcast_TableFormatter();
                case 231: return new MessagePack.Formatters.GameDB.Change_TableFormatter();
                case 232: return new MessagePack.Formatters.GameDB.ChangeCollection_TableFormatter();
                case 233: return new MessagePack.Formatters.GameDB.ChangeCompose_TableFormatter();
                case 234: return new MessagePack.Formatters.GameDB.ChangeList_TableFormatter();
                case 235: return new MessagePack.Formatters.GameDB.ChangeQuest_TableFormatter();
                case 236: return new MessagePack.Formatters.GameDB.ChangeQuestLevel_TableFormatter();
                case 237: return new MessagePack.Formatters.GameDB.Character_TableFormatter();
                case 238: return new MessagePack.Formatters.GameDB.ClassChange_TableFormatter();
                case 239: return new MessagePack.Formatters.GameDB.ColoSeasonReward_TableFormatter();
                case 240: return new MessagePack.Formatters.GameDB.Colosseum_TableFormatter();
                case 241: return new MessagePack.Formatters.GameDB.Config_TableFormatter();
                case 242: return new MessagePack.Formatters.GameDB.Cooking_TableFormatter();
                case 243: return new MessagePack.Formatters.GameDB.CouponGroup_TableFormatter();
                case 244: return new MessagePack.Formatters.GameDB.DailyQuest_TableFormatter();
                case 245: return new MessagePack.Formatters.GameDB.DailyQuestList_TableFormatter();
                case 246: return new MessagePack.Formatters.GameDB.DeathPenalty_TableFormatter();
                case 247: return new MessagePack.Formatters.GameDB.Dialogue_TableFormatter();
                case 248: return new MessagePack.Formatters.GameDB.DropGroup_TableFormatter();
                case 249: return new MessagePack.Formatters.GameDB.Effect_TableFormatter();
                case 250: return new MessagePack.Formatters.GameDB.Emoticon_TableFormatter();
                case 251: return new MessagePack.Formatters.GameDB.EventList_TableFormatter();
                case 252: return new MessagePack.Formatters.GameDB.EventReward_TableFormatter();
                case 253: return new MessagePack.Formatters.GameDB.Gacha_TableFormatter();
                case 254: return new MessagePack.Formatters.GameDB.GodBuff_TableFormatter();
                case 255: return new MessagePack.Formatters.GameDB.GodLand_TableFormatter();
                case 256: return new MessagePack.Formatters.GameDB.Guild_TableFormatter();
                case 257: return new MessagePack.Formatters.GameDB.GuildBuff_TableFormatter();
                case 258: return new MessagePack.Formatters.GameDB.GuildMark_TableFormatter();
                case 259: return new MessagePack.Formatters.GameDB.InfiBuff_TableFormatter();
                case 260: return new MessagePack.Formatters.GameDB.InfinityDungeon_TableFormatter();
                case 261: return new MessagePack.Formatters.GameDB.InfinitySchedule_TableFormatter();
                case 262: return new MessagePack.Formatters.GameDB.Infor_TableFormatter();
                case 263: return new MessagePack.Formatters.GameDB.Item_TableFormatter();
                case 264: return new MessagePack.Formatters.GameDB.ItemCollection_TableFormatter();
                case 265: return new MessagePack.Formatters.GameDB.ItemEnchant_TableFormatter();
                case 266: return new MessagePack.Formatters.GameDB.Level_TableFormatter();
                case 267: return new MessagePack.Formatters.GameDB.LineLog_TableFormatter();
                case 268: return new MessagePack.Formatters.GameDB.ListGroup_TableFormatter();
                case 269: return new MessagePack.Formatters.GameDB.Loading_TableFormatter();
                case 270: return new MessagePack.Formatters.GameDB.LoadingTip_TableFormatter();
                case 271: return new MessagePack.Formatters.GameDB.Locale_TableFormatter();
                case 272: return new MessagePack.Formatters.GameDB.Mail_TableFormatter();
                case 273: return new MessagePack.Formatters.GameDB.Make_TableFormatter();
                case 274: return new MessagePack.Formatters.GameDB.Mark_TableFormatter();
                case 275: return new MessagePack.Formatters.GameDB.MarkEnchant_TableFormatter();
                case 276: return new MessagePack.Formatters.GameDB.MezRate_TableFormatter();
                case 277: return new MessagePack.Formatters.GameDB.MileageShop_TableFormatter();
                case 278: return new MessagePack.Formatters.GameDB.Monster_TableFormatter();
                case 279: return new MessagePack.Formatters.GameDB.MonsterDrop_TableFormatter();
                case 280: return new MessagePack.Formatters.GameDB.NormalShop_TableFormatter();
                case 281: return new MessagePack.Formatters.GameDB.NPC_TableFormatter();
                case 282: return new MessagePack.Formatters.GameDB.Object_TableFormatter();
                case 283: return new MessagePack.Formatters.GameDB.Pet_TableFormatter();
                case 284: return new MessagePack.Formatters.GameDB.PetAdventure_TableFormatter();
                case 285: return new MessagePack.Formatters.GameDB.PetCollection_TableFormatter();
                case 286: return new MessagePack.Formatters.GameDB.PetCompose_TableFormatter();
                case 287: return new MessagePack.Formatters.GameDB.PetGrowth_TableFormatter();
                case 288: return new MessagePack.Formatters.GameDB.PetLevel_TableFormatter();
                case 289: return new MessagePack.Formatters.GameDB.PetList_TableFormatter();
                case 290: return new MessagePack.Formatters.GameDB.PKBuff_TableFormatter();
                case 291: return new MessagePack.Formatters.GameDB.Portal_TableFormatter();
                case 292: return new MessagePack.Formatters.GameDB.Price_TableFormatter();
                case 293: return new MessagePack.Formatters.GameDB.Quest_TableFormatter();
                case 294: return new MessagePack.Formatters.GameDB.QuestEvent_TableFormatter();
                case 295: return new MessagePack.Formatters.GameDB.RankBuff_TableFormatter();
                case 296: return new MessagePack.Formatters.GameDB.Resource_TableFormatter();
                case 297: return new MessagePack.Formatters.GameDB.Restoration_TableFormatter();
                case 298: return new MessagePack.Formatters.GameDB.RuneComponent_TableFormatter();
                case 299: return new MessagePack.Formatters.GameDB.RuneEnchant_TableFormatter();
                case 300: return new MessagePack.Formatters.GameDB.RuneOption_TableFormatter();
                case 301: return new MessagePack.Formatters.GameDB.RuneSet_TableFormatter();
                case 302: return new MessagePack.Formatters.GameDB.ScenarioAbility_TableFormatter();
                case 303: return new MessagePack.Formatters.GameDB.ScenarioDirection_TableFormatter();
                case 304: return new MessagePack.Formatters.GameDB.ScenarioMission_TableFormatter();
                case 305: return new MessagePack.Formatters.GameDB.ShopList_TableFormatter();
                case 306: return new MessagePack.Formatters.GameDB.Skill_TableFormatter();
                case 307: return new MessagePack.Formatters.GameDB.SmeltOptionRate_TableFormatter();
                case 308: return new MessagePack.Formatters.GameDB.SmeltScroll_TableFormatter();
                case 309: return new MessagePack.Formatters.GameDB.SmeltScrollOption_TableFormatter();
                case 310: return new MessagePack.Formatters.GameDB.Sound_TableFormatter();
                case 311: return new MessagePack.Formatters.GameDB.SpecialShop_TableFormatter();
                case 312: return new MessagePack.Formatters.GameDB.Stage_TableFormatter();
                case 313: return new MessagePack.Formatters.GameDB.StageDrop_TableFormatter();
                case 314: return new MessagePack.Formatters.GameDB.StageDropList_TableFormatter();
                case 315: return new MessagePack.Formatters.GameDB.StartingItem_TableFormatter();
                case 316: return new MessagePack.Formatters.GameDB.Summon_TableFormatter();
                case 317: return new MessagePack.Formatters.GameDB.Survery_TableFormatter();
                case 318: return new MessagePack.Formatters.GameDB.Temple_TableFormatter();
                case 319: return new MessagePack.Formatters.GameDB.TempleObject_TableFormatter();
                case 320: return new MessagePack.Formatters.GameDB.Tutorial_TableFormatter();
                case 321: return new MessagePack.Formatters.GameDB.UIResource_TableFormatter();
                case 322: return new MessagePack.Formatters.GameDB.UpgradeList_TableFormatter();
                case 323: return new MessagePack.Formatters.GameDB.WeightPenalty_TableFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.GameDB
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class E_AbilityActionTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_AbilityActionType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_AbilityActionType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_AbilityActionType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_AbilityActionType)reader.ReadInt32();
        }
    }

    public sealed class E_AbilityRetainFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_AbilityRetain>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_AbilityRetain value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_AbilityRetain Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_AbilityRetain)reader.ReadInt32();
        }
    }

    public sealed class E_AbilityTargetTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_AbilityTargetType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_AbilityTargetType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_AbilityTargetType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_AbilityTargetType)reader.ReadInt32();
        }
    }

    public sealed class E_AbilityTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_AbilityType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_AbilityType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_AbilityType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_AbilityType)reader.ReadInt32();
        }
    }

    public sealed class E_AbilityViewTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_AbilityViewType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_AbilityViewType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_AbilityViewType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_AbilityViewType)reader.ReadInt32();
        }
    }

    public sealed class E_ActiveTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_ActiveType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_ActiveType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_ActiveType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_ActiveType)reader.ReadInt32();
        }
    }

    public sealed class E_AdventureTabFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_AdventureTab>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_AdventureTab value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_AdventureTab Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_AdventureTab)reader.ReadInt32();
        }
    }

    public sealed class E_ApplicationTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_ApplicationType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_ApplicationType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_ApplicationType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_ApplicationType)reader.ReadInt32();
        }
    }

    public sealed class E_ApplyTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_ApplyType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_ApplyType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_ApplyType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_ApplyType)reader.ReadInt32();
        }
    }

    public sealed class E_ArtifactMaterialTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_ArtifactMaterialType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_ArtifactMaterialType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_ArtifactMaterialType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_ArtifactMaterialType)reader.ReadInt32();
        }
    }

    public sealed class E_AttackTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_AttackType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_AttackType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_AttackType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_AttackType)reader.ReadInt32();
        }
    }

    public sealed class E_AttendBoardTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_AttendBoardType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_AttendBoardType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_AttendBoardType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_AttendBoardType)reader.ReadInt32();
        }
    }

    public sealed class E_AttendEventOpenTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_AttendEventOpenType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_AttendEventOpenType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_AttendEventOpenType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_AttendEventOpenType)reader.ReadInt32();
        }
    }

    public sealed class E_AttributeTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_AttributeType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_AttributeType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_AttributeType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_AttributeType)reader.ReadInt32();
        }
    }

    public sealed class E_AutoCompleteTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_AutoCompleteType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_AutoCompleteType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_AutoCompleteType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_AutoCompleteType)reader.ReadInt32();
        }
    }

    public sealed class E_AutoNoneInfoTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_AutoNoneInfoType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_AutoNoneInfoType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_AutoNoneInfoType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_AutoNoneInfoType)reader.ReadInt32();
        }
    }

    public sealed class E_AutoProgressTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_AutoProgressType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_AutoProgressType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_AutoProgressType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_AutoProgressType)reader.ReadInt32();
        }
    }

    public sealed class E_AutoSlotFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_AutoSlot>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_AutoSlot value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_AutoSlot Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_AutoSlot)reader.ReadInt32();
        }
    }

    public sealed class E_AutoStorageTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_AutoStorageType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_AutoStorageType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_AutoStorageType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_AutoStorageType)reader.ReadInt32();
        }
    }

    public sealed class E_AutoUseTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_AutoUseType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_AutoUseType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_AutoUseType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_AutoUseType)reader.ReadInt32();
        }
    }

    public sealed class E_BattleTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_BattleType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_BattleType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_BattleType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_BattleType)reader.ReadInt32();
        }
    }

    public sealed class E_BelongTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_BelongType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_BelongType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_BelongType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_BelongType)reader.ReadInt32();
        }
    }

    public sealed class E_BonusTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_BonusType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_BonusType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_BonusType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_BonusType)reader.ReadInt32();
        }
    }

    public sealed class E_BroadcastTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_BroadcastType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_BroadcastType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_BroadcastType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_BroadcastType)reader.ReadInt32();
        }
    }

    public sealed class E_BuffStackTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_BuffStackType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_BuffStackType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_BuffStackType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_BuffStackType)reader.ReadInt32();
        }
    }

    public sealed class E_BuffSupportTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_BuffSupportType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_BuffSupportType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_BuffSupportType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_BuffSupportType)reader.ReadInt32();
        }
    }

    public sealed class E_BuffTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_BuffType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_BuffType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_BuffType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_BuffType)reader.ReadInt32();
        }
    }

    public sealed class E_BuyBonusTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_BuyBonusType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_BuyBonusType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_BuyBonusType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_BuyBonusType)reader.ReadInt32();
        }
    }

    public sealed class E_BuyKindTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_BuyKindType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_BuyKindType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_BuyKindType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_BuyKindType)reader.ReadInt32();
        }
    }

    public sealed class E_BuyLimitTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_BuyLimitType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_BuyLimitType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_BuyLimitType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_BuyLimitType)reader.ReadInt32();
        }
    }

    public sealed class E_BuyOpenTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_BuyOpenType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_BuyOpenType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_BuyOpenType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_BuyOpenType)reader.ReadInt32();
        }
    }

    public sealed class E_CallTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_CallType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_CallType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_CallType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_CallType)reader.ReadInt32();
        }
    }

    public sealed class E_CashTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_CashType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_CashType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_CashType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_CashType)reader.ReadInt32();
        }
    }

    public sealed class E_CastingDeleteTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_CastingDeleteType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_CastingDeleteType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_CastingDeleteType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_CastingDeleteType)reader.ReadInt32();
        }
    }

    public sealed class E_CastingTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_CastingType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_CastingType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_CastingType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_CastingType)reader.ReadInt32();
        }
    }

    public sealed class E_CategoryTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_CategoryType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_CategoryType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_CategoryType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_CategoryType)reader.ReadInt32();
        }
    }

    public sealed class E_ChangeQuestTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_ChangeQuestType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_ChangeQuestType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_ChangeQuestType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_ChangeQuestType)reader.ReadInt32();
        }
    }

    public sealed class E_ChangeSupportTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_ChangeSupportType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_ChangeSupportType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_ChangeSupportType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_ChangeSupportType)reader.ReadInt32();
        }
    }

    public sealed class E_ChangeTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_ChangeType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_ChangeType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_ChangeType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_ChangeType)reader.ReadInt32();
        }
    }

    public sealed class E_ChannelChangeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_ChannelChange>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_ChannelChange value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_ChannelChange Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_ChannelChange)reader.ReadInt32();
        }
    }

    public sealed class E_ChannelPrivateFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_ChannelPrivate>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_ChannelPrivate value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_ChannelPrivate Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_ChannelPrivate)reader.ReadInt32();
        }
    }

    public sealed class E_CharacterSelectFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_CharacterSelect>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_CharacterSelect value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_CharacterSelect Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_CharacterSelect)reader.ReadInt32();
        }
    }

    public sealed class E_CharacterTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_CharacterType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_CharacterType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_CharacterType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_CharacterType)reader.ReadInt32();
        }
    }

    public sealed class E_CollectionTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_CollectionType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_CollectionType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_CollectionType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_CollectionType)reader.ReadInt32();
        }
    }

    public sealed class E_CollisionTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_CollisionType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_CollisionType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_CollisionType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_CollisionType)reader.ReadInt32();
        }
    }

    public sealed class E_CompleteCheckFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_CompleteCheck>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_CompleteCheck value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_CompleteCheck Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_CompleteCheck)reader.ReadInt32();
        }
    }

    public sealed class E_ConditionControlFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_ConditionControl>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_ConditionControl value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_ConditionControl Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_ConditionControl)reader.ReadInt32();
        }
    }

    public sealed class E_DailyQuestTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_DailyQuestType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_DailyQuestType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_DailyQuestType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_DailyQuestType)reader.ReadInt32();
        }
    }

    public sealed class E_DamageTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_DamageType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_DamageType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_DamageType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_DamageType)reader.ReadInt32();
        }
    }

    public sealed class E_DeathPenaltyTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_DeathPenaltyType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_DeathPenaltyType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_DeathPenaltyType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_DeathPenaltyType)reader.ReadInt32();
        }
    }

    public sealed class E_DeathSupportTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_DeathSupportType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_DeathSupportType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_DeathSupportType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_DeathSupportType)reader.ReadInt32();
        }
    }

    public sealed class E_DeathTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_DeathType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_DeathType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_DeathType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_DeathType)reader.ReadInt32();
        }
    }

    public sealed class E_DeliveryItemTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_DeliveryItemType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_DeliveryItemType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_DeliveryItemType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_DeliveryItemType)reader.ReadInt32();
        }
    }

    public sealed class E_DestroyTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_DestroyType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_DestroyType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_DestroyType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_DestroyType)reader.ReadInt32();
        }
    }

    public sealed class E_DialogueAutoNextTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_DialogueAutoNextType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_DialogueAutoNextType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_DialogueAutoNextType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_DialogueAutoNextType)reader.ReadInt32();
        }
    }

    public sealed class E_DialogueBGTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_DialogueBGType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_DialogueBGType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_DialogueBGType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_DialogueBGType)reader.ReadInt32();
        }
    }

    public sealed class E_DialogueResourceTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_DialogueResourceType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_DialogueResourceType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_DialogueResourceType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_DialogueResourceType)reader.ReadInt32();
        }
    }

    public sealed class E_DialogueSkipTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_DialogueSkipType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_DialogueSkipType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_DialogueSkipType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_DialogueSkipType)reader.ReadInt32();
        }
    }

    public sealed class E_DialogueTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_DialogueType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_DialogueType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_DialogueType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_DialogueType)reader.ReadInt32();
        }
    }

    public sealed class E_DiceUseTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_DiceUseType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_DiceUseType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_DiceUseType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_DiceUseType)reader.ReadInt32();
        }
    }

    public sealed class E_DropConditionTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_DropConditionType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_DropConditionType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_DropConditionType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_DropConditionType)reader.ReadInt32();
        }
    }

    public sealed class E_DropItemTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_DropItemType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_DropItemType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_DropItemType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_DropItemType)reader.ReadInt32();
        }
    }

    public sealed class E_DropModelTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_DropModelType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_DropModelType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_DropModelType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_DropModelType)reader.ReadInt32();
        }
    }

    public sealed class E_DropTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_DropType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_DropType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_DropType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_DropType)reader.ReadInt32();
        }
    }

    public sealed class E_DungeonTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_DungeonType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_DungeonType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_DungeonType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_DungeonType)reader.ReadInt32();
        }
    }

    public sealed class E_EffectOffsetTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_EffectOffsetType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_EffectOffsetType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_EffectOffsetType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_EffectOffsetType)reader.ReadInt32();
        }
    }

    public sealed class E_EffectTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_EffectType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_EffectType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_EffectType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_EffectType)reader.ReadInt32();
        }
    }

    public sealed class E_EnchantTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_EnchantType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_EnchantType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_EnchantType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_EnchantType)reader.ReadInt32();
        }
    }

    public sealed class E_EnchantUseTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_EnchantUseType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_EnchantUseType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_EnchantUseType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_EnchantUseType)reader.ReadInt32();
        }
    }

    public sealed class E_EquipSlotTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_EquipSlotType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_EquipSlotType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_EquipSlotType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_EquipSlotType)reader.ReadInt32();
        }
    }

    public sealed class E_EventCompleteCheckFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_EventCompleteCheck>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_EventCompleteCheck value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_EventCompleteCheck Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_EventCompleteCheck)reader.ReadInt32();
        }
    }

    public sealed class E_EventOpenDayFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_EventOpenDay>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_EventOpenDay value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_EventOpenDay Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_EventOpenDay)reader.ReadInt32();
        }
    }

    public sealed class E_ExtractionTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_ExtractionType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_ExtractionType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_ExtractionType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_ExtractionType)reader.ReadInt32();
        }
    }

    public sealed class E_FlatProductTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_FlatProductType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_FlatProductType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_FlatProductType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_FlatProductType)reader.ReadInt32();
        }
    }

    public sealed class E_GachaTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_GachaType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_GachaType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_GachaType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_GachaType)reader.ReadInt32();
        }
    }

    public sealed class E_GetSupOptionTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_GetSupOptionType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_GetSupOptionType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_GetSupOptionType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_GetSupOptionType)reader.ReadInt32();
        }
    }

    public sealed class E_GodBuffTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_GodBuffType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_GodBuffType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_GodBuffType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_GodBuffType)reader.ReadInt32();
        }
    }

    public sealed class E_GoodsKindTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_GoodsKindType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_GoodsKindType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_GoodsKindType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_GoodsKindType)reader.ReadInt32();
        }
    }

    public sealed class E_GoodsListGetTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_GoodsListGetType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_GoodsListGetType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_GoodsListGetType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_GoodsListGetType)reader.ReadInt32();
        }
    }

    public sealed class E_GuideTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_GuideType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_GuideType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_GuideType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_GuideType)reader.ReadInt32();
        }
    }

    public sealed class E_GuildBuffTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_GuildBuffType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_GuildBuffType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_GuildBuffType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_GuildBuffType)reader.ReadInt32();
        }
    }

    public sealed class E_HaveSupportTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_HaveSupportType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_HaveSupportType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_HaveSupportType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_HaveSupportType)reader.ReadInt32();
        }
    }

    public sealed class E_HiddenUIFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_HiddenUI>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_HiddenUI value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_HiddenUI Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_HiddenUI)reader.ReadInt32();
        }
    }

    public sealed class E_HitAniTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_HitAniType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_HitAniType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_HitAniType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_HitAniType)reader.ReadInt32();
        }
    }

    public sealed class E_HitPositionTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_HitPositionType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_HitPositionType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_HitPositionType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_HitPositionType)reader.ReadInt32();
        }
    }

    public sealed class E_HitPossibleTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_HitPossibleType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_HitPossibleType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_HitPossibleType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_HitPossibleType)reader.ReadInt32();
        }
    }

    public sealed class E_HudBuffSignTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_HudBuffSignType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_HudBuffSignType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_HudBuffSignType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_HudBuffSignType)reader.ReadInt32();
        }
    }

    public sealed class E_ImmuneControlFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_ImmuneControl>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_ImmuneControl value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_ImmuneControl Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_ImmuneControl)reader.ReadInt32();
        }
    }

    public sealed class E_InvenUseTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_InvenUseType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_InvenUseType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_InvenUseType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_InvenUseType)reader.ReadInt32();
        }
    }

    public sealed class E_InvokeTimingTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_InvokeTimingType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_InvokeTimingType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_InvokeTimingType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_InvokeTimingType)reader.ReadInt32();
        }
    }

    public sealed class E_ItemStackTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_ItemStackType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_ItemStackType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_ItemStackType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_ItemStackType)reader.ReadInt32();
        }
    }

    public sealed class E_ItemSubTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_ItemSubType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_ItemSubType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_ItemSubType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_ItemSubType)reader.ReadInt32();
        }
    }

    public sealed class E_ItemTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_ItemType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_ItemType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_ItemType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_ItemType)reader.ReadInt32();
        }
    }

    public sealed class E_ItemUseTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_ItemUseType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_ItemUseType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_ItemUseType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_ItemUseType)reader.ReadInt32();
        }
    }

    public sealed class E_JobTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_JobType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_JobType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_JobType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_JobType)reader.ReadInt32();
        }
    }

    public sealed class E_LevelUpTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_LevelUpType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_LevelUpType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_LevelUpType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_LevelUpType)reader.ReadInt32();
        }
    }

    public sealed class E_LimitTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_LimitType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_LimitType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_LimitType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_LimitType)reader.ReadInt32();
        }
    }

    public sealed class E_LoadingTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_LoadingType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_LoadingType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_LoadingType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_LoadingType)reader.ReadInt32();
        }
    }

    public sealed class E_LocaleTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_LocaleType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_LocaleType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_LocaleType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_LocaleType)reader.ReadInt32();
        }
    }

    public sealed class E_MagicSignTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_MagicSignType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_MagicSignType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_MagicSignType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_MagicSignType)reader.ReadInt32();
        }
    }

    public sealed class E_MailReceiverFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_MailReceiver>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_MailReceiver value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_MailReceiver Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_MailReceiver)reader.ReadInt32();
        }
    }

    public sealed class E_MailTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_MailType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_MailType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_MailType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_MailType)reader.ReadInt32();
        }
    }

    public sealed class E_MakeLimitTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_MakeLimitType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_MakeLimitType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_MakeLimitType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_MakeLimitType)reader.ReadInt32();
        }
    }

    public sealed class E_MakeTapTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_MakeTapType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_MakeTapType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_MakeTapType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_MakeTapType)reader.ReadInt32();
        }
    }

    public sealed class E_MakeTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_MakeType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_MakeType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_MakeType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_MakeType)reader.ReadInt32();
        }
    }

    public sealed class E_MarkAbleTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_MarkAbleType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_MarkAbleType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_MarkAbleType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_MarkAbleType)reader.ReadInt32();
        }
    }

    public sealed class E_MarkEnchantTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_MarkEnchantType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_MarkEnchantType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_MarkEnchantType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_MarkEnchantType)reader.ReadInt32();
        }
    }

    public sealed class E_MarkTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_MarkType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_MarkType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_MarkType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_MarkType)reader.ReadInt32();
        }
    }

    public sealed class E_MarkUniqueTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_MarkUniqueType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_MarkUniqueType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_MarkUniqueType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_MarkUniqueType)reader.ReadInt32();
        }
    }

    public sealed class E_MaterialTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_MaterialType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_MaterialType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_MaterialType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_MaterialType)reader.ReadInt32();
        }
    }

    public sealed class E_MileageShopTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_MileageShopType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_MileageShopType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_MileageShopType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_MileageShopType)reader.ReadInt32();
        }
    }

    public sealed class E_MiniGoodsTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_MiniGoodsType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_MiniGoodsType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_MiniGoodsType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_MiniGoodsType)reader.ReadInt32();
        }
    }

    public sealed class E_MissileEffectTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_MissileEffectType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_MissileEffectType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_MissileEffectType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_MissileEffectType)reader.ReadInt32();
        }
    }

    public sealed class E_MissileTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_MissileType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_MissileType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_MissileType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_MissileType)reader.ReadInt32();
        }
    }

    public sealed class E_ModelSocketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_ModelSocket>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_ModelSocket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_ModelSocket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_ModelSocket)reader.ReadInt32();
        }
    }

    public sealed class E_MonAI_TypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_MonAI_Type>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_MonAI_Type value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_MonAI_Type Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_MonAI_Type)reader.ReadInt32();
        }
    }

    public sealed class E_MonsterTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_MonsterType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_MonsterType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_MonsterType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_MonsterType)reader.ReadInt32();
        }
    }

    public sealed class E_MoveTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_MoveType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_MoveType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_MoveType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_MoveType)reader.ReadInt32();
        }
    }

    public sealed class E_NameViewTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_NameViewType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_NameViewType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_NameViewType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_NameViewType)reader.ReadInt32();
        }
    }

    public sealed class E_NormalShopTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_NormalShopType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_NormalShopType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_NormalShopType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_NormalShopType)reader.ReadInt32();
        }
    }

    public sealed class E_NPCSpawnTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_NPCSpawnType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_NPCSpawnType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_NPCSpawnType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_NPCSpawnType)reader.ReadInt32();
        }
    }

    public sealed class E_NPCTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_NPCType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_NPCType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_NPCType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_NPCType)reader.ReadInt32();
        }
    }

    public sealed class E_ObjectActionTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_ObjectActionType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_ObjectActionType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_ObjectActionType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_ObjectActionType)reader.ReadInt32();
        }
    }

    public sealed class E_ObjectSpawnTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_ObjectSpawnType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_ObjectSpawnType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_ObjectSpawnType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_ObjectSpawnType)reader.ReadInt32();
        }
    }

    public sealed class E_ObjectTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_ObjectType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_ObjectType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_ObjectType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_ObjectType)reader.ReadInt32();
        }
    }

    public sealed class E_OpenDayFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_OpenDay>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_OpenDay value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_OpenDay Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_OpenDay)reader.ReadInt32();
        }
    }

    public sealed class E_PayAttendEventStepFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_PayAttendEventStep>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_PayAttendEventStep value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_PayAttendEventStep Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_PayAttendEventStep)reader.ReadInt32();
        }
    }

    public sealed class E_PetLevelUpTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_PetLevelUpType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_PetLevelUpType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_PetLevelUpType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_PetLevelUpType)reader.ReadInt32();
        }
    }

    public sealed class E_PetTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_PetType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_PetType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_PetType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_PetType)reader.ReadInt32();
        }
    }

    public sealed class E_PKAreaChangeTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_PKAreaChangeType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_PKAreaChangeType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_PKAreaChangeType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_PKAreaChangeType)reader.ReadInt32();
        }
    }

    public sealed class E_PKUseTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_PKUseType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_PKUseType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_PKUseType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_PKUseType)reader.ReadInt32();
        }
    }

    public sealed class E_PlayTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_PlayType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_PlayType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_PlayType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_PlayType)reader.ReadInt32();
        }
    }

    public sealed class E_PlusOutputFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_PlusOutput>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_PlusOutput value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_PlusOutput Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_PlusOutput)reader.ReadInt32();
        }
    }

    public sealed class E_PortalTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_PortalType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_PortalType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_PortalType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_PortalType)reader.ReadInt32();
        }
    }

    public sealed class E_PosMoveTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_PosMoveType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_PosMoveType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_PosMoveType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_PosMoveType)reader.ReadInt32();
        }
    }

    public sealed class E_PreconditionTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_PreconditionType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_PreconditionType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_PreconditionType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_PreconditionType)reader.ReadInt32();
        }
    }

    public sealed class E_PriceTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_PriceType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_PriceType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_PriceType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_PriceType)reader.ReadInt32();
        }
    }

    public sealed class E_QuestGradeTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_QuestGradeType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_QuestGradeType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_QuestGradeType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_QuestGradeType)reader.ReadInt32();
        }
    }

    public sealed class E_QuestGroupRewardOnFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_QuestGroupRewardOn>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_QuestGroupRewardOn value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_QuestGroupRewardOn Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_QuestGroupRewardOn)reader.ReadInt32();
        }
    }

    public sealed class E_QuestOpenTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_QuestOpenType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_QuestOpenType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_QuestOpenType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_QuestOpenType)reader.ReadInt32();
        }
    }

    public sealed class E_QuestTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_QuestType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_QuestType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_QuestType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_QuestType)reader.ReadInt32();
        }
    }

    public sealed class E_QuickSlotAutoTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_QuickSlotAutoType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_QuickSlotAutoType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_QuickSlotAutoType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_QuickSlotAutoType)reader.ReadInt32();
        }
    }

    public sealed class E_QuickSlotTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_QuickSlotType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_QuickSlotType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_QuickSlotType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_QuickSlotType)reader.ReadInt32();
        }
    }

    public sealed class E_RangeTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_RangeType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_RangeType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_RangeType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_RangeType)reader.ReadInt32();
        }
    }

    public sealed class E_RankBuffTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_RankBuffType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_RankBuffType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_RankBuffType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_RankBuffType)reader.ReadInt32();
        }
    }

    public sealed class E_ReconnectionTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_ReconnectionType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_ReconnectionType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_ReconnectionType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_ReconnectionType)reader.ReadInt32();
        }
    }

    public sealed class E_RegistrationUIFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_RegistrationUI>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_RegistrationUI value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_RegistrationUI Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_RegistrationUI)reader.ReadInt32();
        }
    }

    public sealed class E_ReplayFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_Replay>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_Replay value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_Replay Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_Replay)reader.ReadInt32();
        }
    }

    public sealed class E_ReturnTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_ReturnType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_ReturnType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_ReturnType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_ReturnType)reader.ReadInt32();
        }
    }

    public sealed class E_RewardExpTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_RewardExpType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_RewardExpType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_RewardExpType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_RewardExpType)reader.ReadInt32();
        }
    }

    public sealed class E_RidingTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_RidingType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_RidingType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_RidingType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_RidingType)reader.ReadInt32();
        }
    }

    public sealed class E_RoamingTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_RoamingType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_RoamingType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_RoamingType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_RoamingType)reader.ReadInt32();
        }
    }

    public sealed class E_RotationTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_RotationType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_RotationType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_RotationType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_RotationType)reader.ReadInt32();
        }
    }

    public sealed class E_RoundingTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_RoundingType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_RoundingType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_RoundingType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_RoundingType)reader.ReadInt32();
        }
    }

    public sealed class E_RuneGradeTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_RuneGradeType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_RuneGradeType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_RuneGradeType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_RuneGradeType)reader.ReadInt32();
        }
    }

    public sealed class E_RuneOptionTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_RuneOptionType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_RuneOptionType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_RuneOptionType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_RuneOptionType)reader.ReadInt32();
        }
    }

    public sealed class E_RuneSetTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_RuneSetType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_RuneSetType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_RuneSetType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_RuneSetType)reader.ReadInt32();
        }
    }

    public sealed class E_RuneTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_RuneType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_RuneType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_RuneType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_RuneType)reader.ReadInt32();
        }
    }

    public sealed class E_ScenarioDialogueTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_ScenarioDialogueType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_ScenarioDialogueType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_ScenarioDialogueType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_ScenarioDialogueType)reader.ReadInt32();
        }
    }

    public sealed class E_ScenarioDirectionTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_ScenarioDirectionType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_ScenarioDirectionType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_ScenarioDirectionType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_ScenarioDirectionType)reader.ReadInt32();
        }
    }

    public sealed class E_ScenarioGuideTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_ScenarioGuideType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_ScenarioGuideType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_ScenarioGuideType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_ScenarioGuideType)reader.ReadInt32();
        }
    }

    public sealed class E_SelectRewardOrderTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_SelectRewardOrderType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_SelectRewardOrderType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_SelectRewardOrderType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_SelectRewardOrderType)reader.ReadInt32();
        }
    }

    public sealed class E_ServerCheckTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_ServerCheckType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_ServerCheckType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_ServerCheckType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_ServerCheckType)reader.ReadInt32();
        }
    }

    public sealed class E_ServerEventSubCategoryFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_ServerEventSubCategory>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_ServerEventSubCategory value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_ServerEventSubCategory Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_ServerEventSubCategory)reader.ReadInt32();
        }
    }

    public sealed class E_ServerTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_ServerType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_ServerType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_ServerType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_ServerType)reader.ReadInt32();
        }
    }

    public sealed class E_ShopTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_ShopType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_ShopType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_ShopType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_ShopType)reader.ReadInt32();
        }
    }

    public sealed class E_SizeTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_SizeType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_SizeType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_SizeType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_SizeType)reader.ReadInt32();
        }
    }

    public sealed class E_SkillAniTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_SkillAniType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_SkillAniType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_SkillAniType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_SkillAniType)reader.ReadInt32();
        }
    }

    public sealed class E_SkillArouseTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_SkillArouseType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_SkillArouseType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_SkillArouseType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_SkillArouseType)reader.ReadInt32();
        }
    }

    public sealed class E_SkillEventTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_SkillEventType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_SkillEventType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_SkillEventType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_SkillEventType)reader.ReadInt32();
        }
    }

    public sealed class E_SkillTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_SkillType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_SkillType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_SkillType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_SkillType)reader.ReadInt32();
        }
    }

    public sealed class E_SmeltScrollUseTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_SmeltScrollUseType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_SmeltScrollUseType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_SmeltScrollUseType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_SmeltScrollUseType)reader.ReadInt32();
        }
    }

    public sealed class E_SoundTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_SoundType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_SoundType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_SoundType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_SoundType)reader.ReadInt32();
        }
    }

    public sealed class E_SpawnTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_SpawnType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_SpawnType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_SpawnType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_SpawnType)reader.ReadInt32();
        }
    }

    public sealed class E_SpecialButtonTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_SpecialButtonType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_SpecialButtonType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_SpecialButtonType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_SpecialButtonType)reader.ReadInt32();
        }
    }

    public sealed class E_SpecialShopTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_SpecialShopType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_SpecialShopType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_SpecialShopType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_SpecialShopType)reader.ReadInt32();
        }
    }

    public sealed class E_SpecialSubTapTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_SpecialSubTapType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_SpecialSubTapType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_SpecialSubTapType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_SpecialSubTapType)reader.ReadInt32();
        }
    }

    public sealed class E_StageClearTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_StageClearType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_StageClearType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_StageClearType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_StageClearType)reader.ReadInt32();
        }
    }

    public sealed class E_StageEnterTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_StageEnterType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_StageEnterType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_StageEnterType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_StageEnterType)reader.ReadInt32();
        }
    }

    public sealed class E_StageOpenTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_StageOpenType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_StageOpenType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_StageOpenType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_StageOpenType)reader.ReadInt32();
        }
    }

    public sealed class E_StageSaveTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_StageSaveType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_StageSaveType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_StageSaveType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_StageSaveType)reader.ReadInt32();
        }
    }

    public sealed class E_StageTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_StageType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_StageType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_StageType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_StageType)reader.ReadInt32();
        }
    }

    public sealed class E_StateOutputTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_StateOutputType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_StateOutputType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_StateOutputType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_StateOutputType)reader.ReadInt32();
        }
    }

    public sealed class E_StateTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_StateType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_StateType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_StateType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_StateType)reader.ReadInt32();
        }
    }

    public sealed class E_SubTapTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_SubTapType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_SubTapType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_SubTapType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_SubTapType)reader.ReadInt32();
        }
    }

    public sealed class E_SummonBossTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_SummonBossType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_SummonBossType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_SummonBossType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_SummonBossType)reader.ReadInt32();
        }
    }

    public sealed class E_SummonTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_SummonType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_SummonType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_SummonType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_SummonType)reader.ReadInt32();
        }
    }

    public sealed class E_TapTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_TapType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_TapType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_TapType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_TapType)reader.ReadInt32();
        }
    }

    public sealed class E_TargetPosTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_TargetPosType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_TargetPosType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_TargetPosType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_TargetPosType)reader.ReadInt32();
        }
    }

    public sealed class E_TargetTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_TargetType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_TargetType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_TargetType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_TargetType)reader.ReadInt32();
        }
    }

    public sealed class E_TargetUseTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_TargetUseType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_TargetUseType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_TargetUseType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_TargetUseType)reader.ReadInt32();
        }
    }

    public sealed class E_TaskQuestTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_TaskQuestType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_TaskQuestType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_TaskQuestType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_TaskQuestType)reader.ReadInt32();
        }
    }

    public sealed class E_TeleportTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_TeleportType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_TeleportType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_TeleportType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_TeleportType)reader.ReadInt32();
        }
    }

    public sealed class E_TempleTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_TempleType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_TempleType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_TempleType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_TempleType)reader.ReadInt32();
        }
    }

    public sealed class E_TendencyDownTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_TendencyDownType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_TendencyDownType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_TendencyDownType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_TendencyDownType)reader.ReadInt32();
        }
    }

    public sealed class E_TendencyIconTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_TendencyIconType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_TendencyIconType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_TendencyIconType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_TendencyIconType)reader.ReadInt32();
        }
    }

    public sealed class E_TextTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_TextType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_TextType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_TextType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_TextType)reader.ReadInt32();
        }
    }

    public sealed class E_ToolTipTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_ToolTipType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_ToolTipType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_ToolTipType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_ToolTipType)reader.ReadInt32();
        }
    }

    public sealed class E_TownUseTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_TownUseType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_TownUseType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_TownUseType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_TownUseType)reader.ReadInt32();
        }
    }

    public sealed class E_TradeSubTapTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_TradeSubTapType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_TradeSubTapType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_TradeSubTapType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_TradeSubTapType)reader.ReadInt32();
        }
    }

    public sealed class E_TradeTapTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_TradeTapType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_TradeTapType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_TradeTapType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_TradeTapType)reader.ReadInt32();
        }
    }

    public sealed class E_TutorialTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_TutorialType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_TutorialType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_TutorialType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_TutorialType)reader.ReadInt32();
        }
    }

    public sealed class E_UIChapterTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_UIChapterType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_UIChapterType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_UIChapterType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_UIChapterType)reader.ReadInt32();
        }
    }

    public sealed class E_UICompleteHideTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_UICompleteHideType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_UICompleteHideType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_UICompleteHideType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_UICompleteHideType)reader.ReadInt32();
        }
    }

    public sealed class E_UIQuestTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_UIQuestType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_UIQuestType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_UIQuestType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_UIQuestType)reader.ReadInt32();
        }
    }

    public sealed class E_UIShortCutFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_UIShortCut>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_UIShortCut value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_UIShortCut Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_UIShortCut)reader.ReadInt32();
        }
    }

    public sealed class E_UITypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_UIType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_UIType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_UIType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_UIType)reader.ReadInt32();
        }
    }

    public sealed class E_UniqueTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_UniqueType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_UniqueType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_UniqueType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_UniqueType)reader.ReadInt32();
        }
    }

    public sealed class E_UnitAttributeTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_UnitAttributeType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_UnitAttributeType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_UnitAttributeType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_UnitAttributeType)reader.ReadInt32();
        }
    }

    public sealed class E_UnitTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_UnitType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_UnitType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_UnitType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_UnitType)reader.ReadInt32();
        }
    }

    public sealed class E_UnusedTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_UnusedType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_UnusedType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_UnusedType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_UnusedType)reader.ReadInt32();
        }
    }

    public sealed class E_VideoTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_VideoType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_VideoType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_VideoType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_VideoType)reader.ReadInt32();
        }
    }

    public sealed class E_ViewTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_ViewType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_ViewType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_ViewType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_ViewType)reader.ReadInt32();
        }
    }

    public sealed class E_WeaponTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.E_WeaponType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameDB.E_WeaponType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameDB.E_WeaponType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameDB.E_WeaponType)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name



// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.GameDB
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class Ability_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Ability_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Ability_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(12);
            writer.Write(value.AbilityID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.StringName, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ServerCheckType>().Serialize(ref writer, value.ServerCheckType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_AttributeType>().Serialize(ref writer, value.AttributeType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ApplyType>().Serialize(ref writer, value.ApplyType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ConditionControl>().Serialize(ref writer, value.ConditionControl, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ImmuneControl>().Serialize(ref writer, value.ImmuneControl, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_LocaleType>().Serialize(ref writer, value.LocaleType, options);
            writer.Write(value.Unit);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_MarkType>().Serialize(ref writer, value.MarkType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_PlusOutput>().Serialize(ref writer, value.PlusOutput, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.AbilityIcon, options);
        }

        public global::GameDB.Ability_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __AbilityID__ = default(uint);
            var __StringName__ = default(string);
            var __ServerCheckType__ = default(global::GameDB.E_ServerCheckType);
            var __AttributeType__ = default(global::GameDB.E_AttributeType);
            var __ApplyType__ = default(global::GameDB.E_ApplyType);
            var __ConditionControl__ = default(global::GameDB.E_ConditionControl);
            var __ImmuneControl__ = default(global::GameDB.E_ImmuneControl);
            var __LocaleType__ = default(global::GameDB.E_LocaleType);
            var __Unit__ = default(float);
            var __MarkType__ = default(global::GameDB.E_MarkType);
            var __PlusOutput__ = default(global::GameDB.E_PlusOutput);
            var __AbilityIcon__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __AbilityID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __StringName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __ServerCheckType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ServerCheckType>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __AttributeType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_AttributeType>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __ApplyType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ApplyType>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __ConditionControl__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ConditionControl>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __ImmuneControl__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ImmuneControl>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __LocaleType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_LocaleType>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __Unit__ = reader.ReadSingle();
                        break;
                    case 9:
                        __MarkType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_MarkType>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __PlusOutput__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_PlusOutput>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __AbilityIcon__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Ability_Table();
            ____result.AbilityID = __AbilityID__;
            ____result.StringName = __StringName__;
            ____result.ServerCheckType = __ServerCheckType__;
            ____result.AttributeType = __AttributeType__;
            ____result.ApplyType = __ApplyType__;
            ____result.ConditionControl = __ConditionControl__;
            ____result.ImmuneControl = __ImmuneControl__;
            ____result.LocaleType = __LocaleType__;
            ____result.Unit = __Unit__;
            ____result.MarkType = __MarkType__;
            ____result.PlusOutput = __PlusOutput__;
            ____result.AbilityIcon = __AbilityIcon__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AbilityAction_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.AbilityAction_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.AbilityAction_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(57);
            writer.Write(value.AbilityActionID);
            writer.Write(value.GroupID);
            writer.Write(value.BuffPriority);
            writer.Write(value.UIGroupID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_UnitType>().Serialize(ref writer, value.UnitType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ApplicationType>().Serialize(ref writer, value.ApplicationType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_AbilityActionType>().Serialize(ref writer, value.AbilityActionType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_BuffType>().Serialize(ref writer, value.BuffType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_InvokeTimingType>().Serialize(ref writer, value.InvokeTimingType, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.UseSkillID, options);
            writer.Write(value.LinkAbilityActionID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_TargetType>().Serialize(ref writer, value.TargetType, options);
            writer.Write(value.AbilityRate);
            writer.Write(value.MinSupportTime);
            writer.Write(value.MaxSupportTime);
            writer.Write(value.PeriodTime);
            writer.Write(value.AuraRange);
            writer.Write(value.MaxBuffStack);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_BuffSupportType>().Serialize(ref writer, value.BuffSupportType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_BuffStackType>().Serialize(ref writer, value.BuffStackType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ReconnectionType>().Serialize(ref writer, value.ReconnectionType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_DeathSupportType>().Serialize(ref writer, value.DeathSupportType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ChangeSupportType>().Serialize(ref writer, value.ChangeSupportType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_MagicSignType>().Serialize(ref writer, value.MagicSignType, options);
            writer.Write(value.CoolTime_Min);
            writer.Write(value.CoolTime_Max);
            writer.Write(value.BuffNumber);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.BuffIconString, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.NameText, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ToolTip, options);
            writer.Write(value.EffectID);
            writer.Write(value.DotEffectID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_HudBuffSignType>().Serialize(ref writer, value.HudBuffSignType, options);
            writer.Write(value.PartyBuffSignNo);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_AbilityViewType>().Serialize(ref writer, value.AbilityViewType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_AbilityTargetType>().Serialize(ref writer, value.AbilityTargetType, options);
            writer.Write(value.TargetSkillID);
            writer.Write(value.ChangeArtifactCheck);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_AbilityType>().Serialize(ref writer, value.AbilityID_01, options);
            writer.Write(value.AbilityPoint_01_Min);
            writer.Write(value.AbilityPoint_01_Max);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_AbilityType>().Serialize(ref writer, value.AbilityID_02, options);
            writer.Write(value.AbilityPoint_02);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_AbilityType>().Serialize(ref writer, value.AbilityID_03, options);
            writer.Write(value.AbilityPoint_03);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_AbilityType>().Serialize(ref writer, value.AbilityID_04, options);
            writer.Write(value.AbilityPoint_04);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_AbilityType>().Serialize(ref writer, value.AbilityID_05, options);
            writer.Write(value.AbilityPoint_05);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_AbilityType>().Serialize(ref writer, value.AbilityID_06, options);
            writer.Write(value.AbilityPoint_06);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_AbilityType>().Serialize(ref writer, value.AbilityID_07, options);
            writer.Write(value.AbilityPoint_07);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_AbilityType>().Serialize(ref writer, value.AbilityID_08, options);
            writer.Write(value.AbilityPoint_08);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_AbilityType>().Serialize(ref writer, value.AbilityID_09, options);
            writer.Write(value.AbilityPoint_09);
        }

        public global::GameDB.AbilityAction_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __AbilityActionID__ = default(uint);
            var __GroupID__ = default(uint);
            var __BuffPriority__ = default(byte);
            var __UIGroupID__ = default(uint);
            var __UnitType__ = default(global::GameDB.E_UnitType);
            var __ApplicationType__ = default(global::GameDB.E_ApplicationType);
            var __AbilityActionType__ = default(global::GameDB.E_AbilityActionType);
            var __BuffType__ = default(global::GameDB.E_BuffType);
            var __InvokeTimingType__ = default(global::GameDB.E_InvokeTimingType);
            var __UseSkillID__ = default(global::System.Collections.Generic.List<uint>);
            var __LinkAbilityActionID__ = default(uint);
            var __TargetType__ = default(global::GameDB.E_TargetType);
            var __AbilityRate__ = default(float);
            var __MinSupportTime__ = default(float);
            var __MaxSupportTime__ = default(float);
            var __PeriodTime__ = default(float);
            var __AuraRange__ = default(float);
            var __MaxBuffStack__ = default(uint);
            var __BuffSupportType__ = default(global::GameDB.E_BuffSupportType);
            var __BuffStackType__ = default(global::GameDB.E_BuffStackType);
            var __ReconnectionType__ = default(global::GameDB.E_ReconnectionType);
            var __DeathSupportType__ = default(global::GameDB.E_DeathSupportType);
            var __ChangeSupportType__ = default(global::GameDB.E_ChangeSupportType);
            var __MagicSignType__ = default(global::GameDB.E_MagicSignType);
            var __CoolTime_Min__ = default(float);
            var __CoolTime_Max__ = default(float);
            var __BuffNumber__ = default(uint);
            var __BuffIconString__ = default(string);
            var __NameText__ = default(string);
            var __ToolTip__ = default(string);
            var __EffectID__ = default(uint);
            var __DotEffectID__ = default(uint);
            var __HudBuffSignType__ = default(global::GameDB.E_HudBuffSignType);
            var __PartyBuffSignNo__ = default(byte);
            var __AbilityViewType__ = default(global::GameDB.E_AbilityViewType);
            var __AbilityTargetType__ = default(global::GameDB.E_AbilityTargetType);
            var __TargetSkillID__ = default(uint);
            var __ChangeArtifactCheck__ = default(uint);
            var __AbilityID_01__ = default(global::GameDB.E_AbilityType);
            var __AbilityPoint_01_Min__ = default(float);
            var __AbilityPoint_01_Max__ = default(float);
            var __AbilityID_02__ = default(global::GameDB.E_AbilityType);
            var __AbilityPoint_02__ = default(float);
            var __AbilityID_03__ = default(global::GameDB.E_AbilityType);
            var __AbilityPoint_03__ = default(float);
            var __AbilityID_04__ = default(global::GameDB.E_AbilityType);
            var __AbilityPoint_04__ = default(float);
            var __AbilityID_05__ = default(global::GameDB.E_AbilityType);
            var __AbilityPoint_05__ = default(float);
            var __AbilityID_06__ = default(global::GameDB.E_AbilityType);
            var __AbilityPoint_06__ = default(float);
            var __AbilityID_07__ = default(global::GameDB.E_AbilityType);
            var __AbilityPoint_07__ = default(float);
            var __AbilityID_08__ = default(global::GameDB.E_AbilityType);
            var __AbilityPoint_08__ = default(float);
            var __AbilityID_09__ = default(global::GameDB.E_AbilityType);
            var __AbilityPoint_09__ = default(float);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __AbilityActionID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __GroupID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __BuffPriority__ = reader.ReadByte();
                        break;
                    case 3:
                        __UIGroupID__ = reader.ReadUInt32();
                        break;
                    case 4:
                        __UnitType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_UnitType>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __ApplicationType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ApplicationType>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __AbilityActionType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_AbilityActionType>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __BuffType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_BuffType>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __InvokeTimingType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_InvokeTimingType>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __UseSkillID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __LinkAbilityActionID__ = reader.ReadUInt32();
                        break;
                    case 11:
                        __TargetType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_TargetType>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __AbilityRate__ = reader.ReadSingle();
                        break;
                    case 13:
                        __MinSupportTime__ = reader.ReadSingle();
                        break;
                    case 14:
                        __MaxSupportTime__ = reader.ReadSingle();
                        break;
                    case 15:
                        __PeriodTime__ = reader.ReadSingle();
                        break;
                    case 16:
                        __AuraRange__ = reader.ReadSingle();
                        break;
                    case 17:
                        __MaxBuffStack__ = reader.ReadUInt32();
                        break;
                    case 18:
                        __BuffSupportType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_BuffSupportType>().Deserialize(ref reader, options);
                        break;
                    case 19:
                        __BuffStackType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_BuffStackType>().Deserialize(ref reader, options);
                        break;
                    case 20:
                        __ReconnectionType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ReconnectionType>().Deserialize(ref reader, options);
                        break;
                    case 21:
                        __DeathSupportType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_DeathSupportType>().Deserialize(ref reader, options);
                        break;
                    case 22:
                        __ChangeSupportType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ChangeSupportType>().Deserialize(ref reader, options);
                        break;
                    case 23:
                        __MagicSignType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_MagicSignType>().Deserialize(ref reader, options);
                        break;
                    case 24:
                        __CoolTime_Min__ = reader.ReadSingle();
                        break;
                    case 25:
                        __CoolTime_Max__ = reader.ReadSingle();
                        break;
                    case 26:
                        __BuffNumber__ = reader.ReadUInt32();
                        break;
                    case 27:
                        __BuffIconString__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 28:
                        __NameText__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 29:
                        __ToolTip__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 30:
                        __EffectID__ = reader.ReadUInt32();
                        break;
                    case 31:
                        __DotEffectID__ = reader.ReadUInt32();
                        break;
                    case 32:
                        __HudBuffSignType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_HudBuffSignType>().Deserialize(ref reader, options);
                        break;
                    case 33:
                        __PartyBuffSignNo__ = reader.ReadByte();
                        break;
                    case 34:
                        __AbilityViewType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_AbilityViewType>().Deserialize(ref reader, options);
                        break;
                    case 35:
                        __AbilityTargetType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_AbilityTargetType>().Deserialize(ref reader, options);
                        break;
                    case 36:
                        __TargetSkillID__ = reader.ReadUInt32();
                        break;
                    case 37:
                        __ChangeArtifactCheck__ = reader.ReadUInt32();
                        break;
                    case 38:
                        __AbilityID_01__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_AbilityType>().Deserialize(ref reader, options);
                        break;
                    case 39:
                        __AbilityPoint_01_Min__ = reader.ReadSingle();
                        break;
                    case 40:
                        __AbilityPoint_01_Max__ = reader.ReadSingle();
                        break;
                    case 41:
                        __AbilityID_02__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_AbilityType>().Deserialize(ref reader, options);
                        break;
                    case 42:
                        __AbilityPoint_02__ = reader.ReadSingle();
                        break;
                    case 43:
                        __AbilityID_03__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_AbilityType>().Deserialize(ref reader, options);
                        break;
                    case 44:
                        __AbilityPoint_03__ = reader.ReadSingle();
                        break;
                    case 45:
                        __AbilityID_04__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_AbilityType>().Deserialize(ref reader, options);
                        break;
                    case 46:
                        __AbilityPoint_04__ = reader.ReadSingle();
                        break;
                    case 47:
                        __AbilityID_05__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_AbilityType>().Deserialize(ref reader, options);
                        break;
                    case 48:
                        __AbilityPoint_05__ = reader.ReadSingle();
                        break;
                    case 49:
                        __AbilityID_06__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_AbilityType>().Deserialize(ref reader, options);
                        break;
                    case 50:
                        __AbilityPoint_06__ = reader.ReadSingle();
                        break;
                    case 51:
                        __AbilityID_07__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_AbilityType>().Deserialize(ref reader, options);
                        break;
                    case 52:
                        __AbilityPoint_07__ = reader.ReadSingle();
                        break;
                    case 53:
                        __AbilityID_08__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_AbilityType>().Deserialize(ref reader, options);
                        break;
                    case 54:
                        __AbilityPoint_08__ = reader.ReadSingle();
                        break;
                    case 55:
                        __AbilityID_09__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_AbilityType>().Deserialize(ref reader, options);
                        break;
                    case 56:
                        __AbilityPoint_09__ = reader.ReadSingle();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.AbilityAction_Table();
            ____result.AbilityActionID = __AbilityActionID__;
            ____result.GroupID = __GroupID__;
            ____result.BuffPriority = __BuffPriority__;
            ____result.UIGroupID = __UIGroupID__;
            ____result.UnitType = __UnitType__;
            ____result.ApplicationType = __ApplicationType__;
            ____result.AbilityActionType = __AbilityActionType__;
            ____result.BuffType = __BuffType__;
            ____result.InvokeTimingType = __InvokeTimingType__;
            ____result.UseSkillID = __UseSkillID__;
            ____result.LinkAbilityActionID = __LinkAbilityActionID__;
            ____result.TargetType = __TargetType__;
            ____result.AbilityRate = __AbilityRate__;
            ____result.MinSupportTime = __MinSupportTime__;
            ____result.MaxSupportTime = __MaxSupportTime__;
            ____result.PeriodTime = __PeriodTime__;
            ____result.AuraRange = __AuraRange__;
            ____result.MaxBuffStack = __MaxBuffStack__;
            ____result.BuffSupportType = __BuffSupportType__;
            ____result.BuffStackType = __BuffStackType__;
            ____result.ReconnectionType = __ReconnectionType__;
            ____result.DeathSupportType = __DeathSupportType__;
            ____result.ChangeSupportType = __ChangeSupportType__;
            ____result.MagicSignType = __MagicSignType__;
            ____result.CoolTime_Min = __CoolTime_Min__;
            ____result.CoolTime_Max = __CoolTime_Max__;
            ____result.BuffNumber = __BuffNumber__;
            ____result.BuffIconString = __BuffIconString__;
            ____result.NameText = __NameText__;
            ____result.ToolTip = __ToolTip__;
            ____result.EffectID = __EffectID__;
            ____result.DotEffectID = __DotEffectID__;
            ____result.HudBuffSignType = __HudBuffSignType__;
            ____result.PartyBuffSignNo = __PartyBuffSignNo__;
            ____result.AbilityViewType = __AbilityViewType__;
            ____result.AbilityTargetType = __AbilityTargetType__;
            ____result.TargetSkillID = __TargetSkillID__;
            ____result.ChangeArtifactCheck = __ChangeArtifactCheck__;
            ____result.AbilityID_01 = __AbilityID_01__;
            ____result.AbilityPoint_01_Min = __AbilityPoint_01_Min__;
            ____result.AbilityPoint_01_Max = __AbilityPoint_01_Max__;
            ____result.AbilityID_02 = __AbilityID_02__;
            ____result.AbilityPoint_02 = __AbilityPoint_02__;
            ____result.AbilityID_03 = __AbilityID_03__;
            ____result.AbilityPoint_03 = __AbilityPoint_03__;
            ____result.AbilityID_04 = __AbilityID_04__;
            ____result.AbilityPoint_04 = __AbilityPoint_04__;
            ____result.AbilityID_05 = __AbilityID_05__;
            ____result.AbilityPoint_05 = __AbilityPoint_05__;
            ____result.AbilityID_06 = __AbilityID_06__;
            ____result.AbilityPoint_06 = __AbilityPoint_06__;
            ____result.AbilityID_07 = __AbilityID_07__;
            ____result.AbilityPoint_07 = __AbilityPoint_07__;
            ____result.AbilityID_08 = __AbilityID_08__;
            ____result.AbilityPoint_08 = __AbilityPoint_08__;
            ____result.AbilityID_09 = __AbilityID_09__;
            ____result.AbilityPoint_09 = __AbilityPoint_09__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Animation_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Animation_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Animation_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(9);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.AnimationID, options);
            writer.Write(value.AnimationLength);
            writer.Write(value.InvokeCount);
            writer.Write(value.InvokeTiming_01);
            writer.Write(value.InvokeTiming_02);
            writer.Write(value.InvokeTiming_03);
            writer.Write(value.InvokeTiming_04);
            writer.Write(value.InvokeTiming_05);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.EffectTiming, options);
        }

        public global::GameDB.Animation_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __AnimationID__ = default(string);
            var __AnimationLength__ = default(float);
            var __InvokeCount__ = default(byte);
            var __InvokeTiming_01__ = default(float);
            var __InvokeTiming_02__ = default(float);
            var __InvokeTiming_03__ = default(float);
            var __InvokeTiming_04__ = default(float);
            var __InvokeTiming_05__ = default(float);
            var __EffectTiming__ = default(global::System.Collections.Generic.List<uint>);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __AnimationID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __AnimationLength__ = reader.ReadSingle();
                        break;
                    case 2:
                        __InvokeCount__ = reader.ReadByte();
                        break;
                    case 3:
                        __InvokeTiming_01__ = reader.ReadSingle();
                        break;
                    case 4:
                        __InvokeTiming_02__ = reader.ReadSingle();
                        break;
                    case 5:
                        __InvokeTiming_03__ = reader.ReadSingle();
                        break;
                    case 6:
                        __InvokeTiming_04__ = reader.ReadSingle();
                        break;
                    case 7:
                        __InvokeTiming_05__ = reader.ReadSingle();
                        break;
                    case 8:
                        __EffectTiming__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Animation_Table();
            ____result.AnimationID = __AnimationID__;
            ____result.AnimationLength = __AnimationLength__;
            ____result.InvokeCount = __InvokeCount__;
            ____result.InvokeTiming_01 = __InvokeTiming_01__;
            ____result.InvokeTiming_02 = __InvokeTiming_02__;
            ____result.InvokeTiming_03 = __InvokeTiming_03__;
            ____result.InvokeTiming_04 = __InvokeTiming_04__;
            ____result.InvokeTiming_05 = __InvokeTiming_05__;
            ____result.EffectTiming = __EffectTiming__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Artifact_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Artifact_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Artifact_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(24);
            writer.Write(value.ArtifactID);
            writer.Write(value.ArtifactGroupID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ArtifactName, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ArtifactToolTip, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Icon, options);
            writer.Write(value.Step);
            writer.Write(value.Grade);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_PetType>().Serialize(ref writer, value.ArtifactType, options);
            writer.Write(value.SuccessRate);
            writer.Write(value.MaterialCount);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ArtifactMaterialType>().Serialize(ref writer, value.MaterialType, options);
            writer.Write(value.Material_1_Grade);
            writer.Write(value.Material_1_Count);
            writer.Write(value.Material_2_Grade);
            writer.Write(value.Material_2_Count);
            writer.Write(value.Material_3_Grade);
            writer.Write(value.Material_3_Count);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.CostItemID, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.CostItemCount, options);
            writer.Write(value.ProtectItemID);
            writer.Write(value.ProtectItemCount);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.AbilityActionID, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.CheckPetID, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.CheckPetAbilityActionID, options);
        }

        public global::GameDB.Artifact_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __ArtifactID__ = default(uint);
            var __ArtifactGroupID__ = default(uint);
            var __ArtifactName__ = default(string);
            var __ArtifactToolTip__ = default(string);
            var __Icon__ = default(string);
            var __Step__ = default(byte);
            var __Grade__ = default(byte);
            var __ArtifactType__ = default(global::GameDB.E_PetType);
            var __SuccessRate__ = default(uint);
            var __MaterialCount__ = default(byte);
            var __MaterialType__ = default(global::GameDB.E_ArtifactMaterialType);
            var __Material_1_Grade__ = default(byte);
            var __Material_1_Count__ = default(byte);
            var __Material_2_Grade__ = default(byte);
            var __Material_2_Count__ = default(byte);
            var __Material_3_Grade__ = default(byte);
            var __Material_3_Count__ = default(byte);
            var __CostItemID__ = default(global::System.Collections.Generic.List<uint>);
            var __CostItemCount__ = default(global::System.Collections.Generic.List<uint>);
            var __ProtectItemID__ = default(uint);
            var __ProtectItemCount__ = default(uint);
            var __AbilityActionID__ = default(global::System.Collections.Generic.List<uint>);
            var __CheckPetID__ = default(global::System.Collections.Generic.List<uint>);
            var __CheckPetAbilityActionID__ = default(global::System.Collections.Generic.List<uint>);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __ArtifactID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __ArtifactGroupID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __ArtifactName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __ArtifactToolTip__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Icon__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Step__ = reader.ReadByte();
                        break;
                    case 6:
                        __Grade__ = reader.ReadByte();
                        break;
                    case 7:
                        __ArtifactType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_PetType>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __SuccessRate__ = reader.ReadUInt32();
                        break;
                    case 9:
                        __MaterialCount__ = reader.ReadByte();
                        break;
                    case 10:
                        __MaterialType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ArtifactMaterialType>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __Material_1_Grade__ = reader.ReadByte();
                        break;
                    case 12:
                        __Material_1_Count__ = reader.ReadByte();
                        break;
                    case 13:
                        __Material_2_Grade__ = reader.ReadByte();
                        break;
                    case 14:
                        __Material_2_Count__ = reader.ReadByte();
                        break;
                    case 15:
                        __Material_3_Grade__ = reader.ReadByte();
                        break;
                    case 16:
                        __Material_3_Count__ = reader.ReadByte();
                        break;
                    case 17:
                        __CostItemID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 18:
                        __CostItemCount__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 19:
                        __ProtectItemID__ = reader.ReadUInt32();
                        break;
                    case 20:
                        __ProtectItemCount__ = reader.ReadUInt32();
                        break;
                    case 21:
                        __AbilityActionID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 22:
                        __CheckPetID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 23:
                        __CheckPetAbilityActionID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Artifact_Table();
            ____result.ArtifactID = __ArtifactID__;
            ____result.ArtifactGroupID = __ArtifactGroupID__;
            ____result.ArtifactName = __ArtifactName__;
            ____result.ArtifactToolTip = __ArtifactToolTip__;
            ____result.Icon = __Icon__;
            ____result.Step = __Step__;
            ____result.Grade = __Grade__;
            ____result.ArtifactType = __ArtifactType__;
            ____result.SuccessRate = __SuccessRate__;
            ____result.MaterialCount = __MaterialCount__;
            ____result.MaterialType = __MaterialType__;
            ____result.Material_1_Grade = __Material_1_Grade__;
            ____result.Material_1_Count = __Material_1_Count__;
            ____result.Material_2_Grade = __Material_2_Grade__;
            ____result.Material_2_Count = __Material_2_Count__;
            ____result.Material_3_Grade = __Material_3_Grade__;
            ____result.Material_3_Count = __Material_3_Count__;
            ____result.CostItemID = __CostItemID__;
            ____result.CostItemCount = __CostItemCount__;
            ____result.ProtectItemID = __ProtectItemID__;
            ____result.ProtectItemCount = __ProtectItemCount__;
            ____result.AbilityActionID = __AbilityActionID__;
            ____result.CheckPetID = __CheckPetID__;
            ____result.CheckPetAbilityActionID = __CheckPetAbilityActionID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ArtifactLink_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.ArtifactLink_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.ArtifactLink_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(10);
            writer.Write(value.LinkID);
            writer.Write(value.LinkGroup);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.LinkTitle, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.LinkDes, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.LinkImg_1, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.LinkImg_2, options);
            writer.Write(value.LinkGrade);
            writer.Write(value.MaterialArtifactID_1);
            writer.Write(value.MaterialArtifactID_2);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.AbilityActionID, options);
        }

        public global::GameDB.ArtifactLink_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __LinkID__ = default(uint);
            var __LinkGroup__ = default(uint);
            var __LinkTitle__ = default(string);
            var __LinkDes__ = default(string);
            var __LinkImg_1__ = default(string);
            var __LinkImg_2__ = default(string);
            var __LinkGrade__ = default(byte);
            var __MaterialArtifactID_1__ = default(uint);
            var __MaterialArtifactID_2__ = default(uint);
            var __AbilityActionID__ = default(global::System.Collections.Generic.List<uint>);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __LinkID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __LinkGroup__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __LinkTitle__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __LinkDes__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __LinkImg_1__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __LinkImg_2__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __LinkGrade__ = reader.ReadByte();
                        break;
                    case 7:
                        __MaterialArtifactID_1__ = reader.ReadUInt32();
                        break;
                    case 8:
                        __MaterialArtifactID_2__ = reader.ReadUInt32();
                        break;
                    case 9:
                        __AbilityActionID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.ArtifactLink_Table();
            ____result.LinkID = __LinkID__;
            ____result.LinkGroup = __LinkGroup__;
            ____result.LinkTitle = __LinkTitle__;
            ____result.LinkDes = __LinkDes__;
            ____result.LinkImg_1 = __LinkImg_1__;
            ____result.LinkImg_2 = __LinkImg_2__;
            ____result.LinkGrade = __LinkGrade__;
            ____result.MaterialArtifactID_1 = __MaterialArtifactID_1__;
            ____result.MaterialArtifactID_2 = __MaterialArtifactID_2__;
            ____result.AbilityActionID = __AbilityActionID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AttendEvent_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.AttendEvent_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.AttendEvent_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(9);
            writer.Write(value.AttendEventID);
            writer.Write(value.GroupID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_AttendBoardType>().Serialize(ref writer, value.AttendBoardType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ServerEventSubCategory>().Serialize(ref writer, value.AttendEventType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_AttendEventOpenType>().Serialize(ref writer, value.AttendEventOpenType, options);
            writer.Write(value.AttendEventNumber);
            writer.Write(value.PurposeDay);
            writer.Write(value.RewardItemID);
            writer.Write(value.RewardItemCount);
        }

        public global::GameDB.AttendEvent_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __AttendEventID__ = default(uint);
            var __GroupID__ = default(uint);
            var __AttendBoardType__ = default(global::GameDB.E_AttendBoardType);
            var __AttendEventType__ = default(global::GameDB.E_ServerEventSubCategory);
            var __AttendEventOpenType__ = default(global::GameDB.E_AttendEventOpenType);
            var __AttendEventNumber__ = default(uint);
            var __PurposeDay__ = default(uint);
            var __RewardItemID__ = default(uint);
            var __RewardItemCount__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __AttendEventID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __GroupID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __AttendBoardType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_AttendBoardType>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __AttendEventType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ServerEventSubCategory>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __AttendEventOpenType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_AttendEventOpenType>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __AttendEventNumber__ = reader.ReadUInt32();
                        break;
                    case 6:
                        __PurposeDay__ = reader.ReadUInt32();
                        break;
                    case 7:
                        __RewardItemID__ = reader.ReadUInt32();
                        break;
                    case 8:
                        __RewardItemCount__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.AttendEvent_Table();
            ____result.AttendEventID = __AttendEventID__;
            ____result.GroupID = __GroupID__;
            ____result.AttendBoardType = __AttendBoardType__;
            ____result.AttendEventType = __AttendEventType__;
            ____result.AttendEventOpenType = __AttendEventOpenType__;
            ____result.AttendEventNumber = __AttendEventNumber__;
            ____result.PurposeDay = __PurposeDay__;
            ____result.RewardItemID = __RewardItemID__;
            ____result.RewardItemCount = __RewardItemCount__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Attribute_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Attribute_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Attribute_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(52);
            writer.Write(value.AttributeID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_UnitAttributeType>().Serialize(ref writer, value.AttributeType, options);
            writer.Write(value.AttributeLevel);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.AttributeTitle, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_LevelUpType>().Serialize(ref writer, value.LevelUpType, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.LevelUpItem, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.UpItemCnt, options);
            writer.Write(value.LevelUpRate);
            writer.Write(value.AdditionalRateUnit_1);
            writer.Write(value.AdditionalRateMaxRate_1);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.AdditionalItem_1, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.AdditionalItemCnt_1, options);
            writer.Write(value.AdditionalRateUnit_2);
            writer.Write(value.AdditionalRateMaxRate_2);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.AdditionalItem_2, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.AdditionalItemCnt_2, options);
            writer.Write(value.AdditionalRateUnit_3);
            writer.Write(value.AdditionalRateMaxRate_3);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.AdditionalItem_3, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.AdditionalItemCnt_3, options);
            writer.Write(value.AdditionalRateUnit_4);
            writer.Write(value.AdditionalRateMaxRate_4);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.AdditionalItem_4, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.AdditionalItemCnt_4, options);
            writer.Write(value.AdditionalRateUnit_5);
            writer.Write(value.AdditionalRateMaxRate_5);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.AdditionalItem_5, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.AdditionalItemCnt_5, options);
            writer.Write(value.AdditionalRateUnit_6);
            writer.Write(value.AdditionalRateMaxRate_6);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.AdditionalItem_6, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.AdditionalItemCnt_6, options);
            writer.Write(value.AdditionalRateUnit_7);
            writer.Write(value.AdditionalRateMaxRate_7);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.AdditionalItem_7, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.AdditionalItemCnt_7, options);
            writer.Write(value.AdditionalRateUnit_8);
            writer.Write(value.AdditionalRateMaxRate_8);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.AdditionalItem_8, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.AdditionalItemCnt_8, options);
            writer.Write(value.AdditionalRateUnit_9);
            writer.Write(value.AdditionalRateMaxRate_9);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.AdditionalItem_9, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.AdditionalItemCnt_9, options);
            writer.Write(value.AdditionalRateUnit_10);
            writer.Write(value.AdditionalRateMaxRate_10);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.AdditionalItem_10, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.AdditionalItemCnt_10, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.AttributeIconID, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.IconID, options);
            writer.Write(value.AbilityActionID_01);
            writer.Write(value.AbilityActionID_02);
        }

        public global::GameDB.Attribute_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __AttributeID__ = default(uint);
            var __AttributeType__ = default(global::GameDB.E_UnitAttributeType);
            var __AttributeLevel__ = default(byte);
            var __AttributeTitle__ = default(string);
            var __LevelUpType__ = default(global::GameDB.E_LevelUpType);
            var __LevelUpItem__ = default(global::System.Collections.Generic.List<uint>);
            var __UpItemCnt__ = default(global::System.Collections.Generic.List<uint>);
            var __LevelUpRate__ = default(uint);
            var __AdditionalRateUnit_1__ = default(uint);
            var __AdditionalRateMaxRate_1__ = default(uint);
            var __AdditionalItem_1__ = default(global::System.Collections.Generic.List<uint>);
            var __AdditionalItemCnt_1__ = default(global::System.Collections.Generic.List<uint>);
            var __AdditionalRateUnit_2__ = default(uint);
            var __AdditionalRateMaxRate_2__ = default(uint);
            var __AdditionalItem_2__ = default(global::System.Collections.Generic.List<uint>);
            var __AdditionalItemCnt_2__ = default(global::System.Collections.Generic.List<uint>);
            var __AdditionalRateUnit_3__ = default(uint);
            var __AdditionalRateMaxRate_3__ = default(uint);
            var __AdditionalItem_3__ = default(global::System.Collections.Generic.List<uint>);
            var __AdditionalItemCnt_3__ = default(global::System.Collections.Generic.List<uint>);
            var __AdditionalRateUnit_4__ = default(uint);
            var __AdditionalRateMaxRate_4__ = default(uint);
            var __AdditionalItem_4__ = default(global::System.Collections.Generic.List<uint>);
            var __AdditionalItemCnt_4__ = default(global::System.Collections.Generic.List<uint>);
            var __AdditionalRateUnit_5__ = default(uint);
            var __AdditionalRateMaxRate_5__ = default(uint);
            var __AdditionalItem_5__ = default(global::System.Collections.Generic.List<uint>);
            var __AdditionalItemCnt_5__ = default(global::System.Collections.Generic.List<uint>);
            var __AdditionalRateUnit_6__ = default(uint);
            var __AdditionalRateMaxRate_6__ = default(uint);
            var __AdditionalItem_6__ = default(global::System.Collections.Generic.List<uint>);
            var __AdditionalItemCnt_6__ = default(global::System.Collections.Generic.List<uint>);
            var __AdditionalRateUnit_7__ = default(uint);
            var __AdditionalRateMaxRate_7__ = default(uint);
            var __AdditionalItem_7__ = default(global::System.Collections.Generic.List<uint>);
            var __AdditionalItemCnt_7__ = default(global::System.Collections.Generic.List<uint>);
            var __AdditionalRateUnit_8__ = default(uint);
            var __AdditionalRateMaxRate_8__ = default(uint);
            var __AdditionalItem_8__ = default(global::System.Collections.Generic.List<uint>);
            var __AdditionalItemCnt_8__ = default(global::System.Collections.Generic.List<uint>);
            var __AdditionalRateUnit_9__ = default(uint);
            var __AdditionalRateMaxRate_9__ = default(uint);
            var __AdditionalItem_9__ = default(global::System.Collections.Generic.List<uint>);
            var __AdditionalItemCnt_9__ = default(global::System.Collections.Generic.List<uint>);
            var __AdditionalRateUnit_10__ = default(uint);
            var __AdditionalRateMaxRate_10__ = default(uint);
            var __AdditionalItem_10__ = default(global::System.Collections.Generic.List<uint>);
            var __AdditionalItemCnt_10__ = default(global::System.Collections.Generic.List<uint>);
            var __AttributeIconID__ = default(string);
            var __IconID__ = default(string);
            var __AbilityActionID_01__ = default(uint);
            var __AbilityActionID_02__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __AttributeID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __AttributeType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_UnitAttributeType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __AttributeLevel__ = reader.ReadByte();
                        break;
                    case 3:
                        __AttributeTitle__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __LevelUpType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_LevelUpType>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __LevelUpItem__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __UpItemCnt__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __LevelUpRate__ = reader.ReadUInt32();
                        break;
                    case 8:
                        __AdditionalRateUnit_1__ = reader.ReadUInt32();
                        break;
                    case 9:
                        __AdditionalRateMaxRate_1__ = reader.ReadUInt32();
                        break;
                    case 10:
                        __AdditionalItem_1__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __AdditionalItemCnt_1__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __AdditionalRateUnit_2__ = reader.ReadUInt32();
                        break;
                    case 13:
                        __AdditionalRateMaxRate_2__ = reader.ReadUInt32();
                        break;
                    case 14:
                        __AdditionalItem_2__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        __AdditionalItemCnt_2__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 16:
                        __AdditionalRateUnit_3__ = reader.ReadUInt32();
                        break;
                    case 17:
                        __AdditionalRateMaxRate_3__ = reader.ReadUInt32();
                        break;
                    case 18:
                        __AdditionalItem_3__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 19:
                        __AdditionalItemCnt_3__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 20:
                        __AdditionalRateUnit_4__ = reader.ReadUInt32();
                        break;
                    case 21:
                        __AdditionalRateMaxRate_4__ = reader.ReadUInt32();
                        break;
                    case 22:
                        __AdditionalItem_4__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 23:
                        __AdditionalItemCnt_4__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 24:
                        __AdditionalRateUnit_5__ = reader.ReadUInt32();
                        break;
                    case 25:
                        __AdditionalRateMaxRate_5__ = reader.ReadUInt32();
                        break;
                    case 26:
                        __AdditionalItem_5__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 27:
                        __AdditionalItemCnt_5__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 28:
                        __AdditionalRateUnit_6__ = reader.ReadUInt32();
                        break;
                    case 29:
                        __AdditionalRateMaxRate_6__ = reader.ReadUInt32();
                        break;
                    case 30:
                        __AdditionalItem_6__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 31:
                        __AdditionalItemCnt_6__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 32:
                        __AdditionalRateUnit_7__ = reader.ReadUInt32();
                        break;
                    case 33:
                        __AdditionalRateMaxRate_7__ = reader.ReadUInt32();
                        break;
                    case 34:
                        __AdditionalItem_7__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 35:
                        __AdditionalItemCnt_7__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 36:
                        __AdditionalRateUnit_8__ = reader.ReadUInt32();
                        break;
                    case 37:
                        __AdditionalRateMaxRate_8__ = reader.ReadUInt32();
                        break;
                    case 38:
                        __AdditionalItem_8__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 39:
                        __AdditionalItemCnt_8__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 40:
                        __AdditionalRateUnit_9__ = reader.ReadUInt32();
                        break;
                    case 41:
                        __AdditionalRateMaxRate_9__ = reader.ReadUInt32();
                        break;
                    case 42:
                        __AdditionalItem_9__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 43:
                        __AdditionalItemCnt_9__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 44:
                        __AdditionalRateUnit_10__ = reader.ReadUInt32();
                        break;
                    case 45:
                        __AdditionalRateMaxRate_10__ = reader.ReadUInt32();
                        break;
                    case 46:
                        __AdditionalItem_10__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 47:
                        __AdditionalItemCnt_10__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 48:
                        __AttributeIconID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 49:
                        __IconID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 50:
                        __AbilityActionID_01__ = reader.ReadUInt32();
                        break;
                    case 51:
                        __AbilityActionID_02__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Attribute_Table();
            ____result.AttributeID = __AttributeID__;
            ____result.AttributeType = __AttributeType__;
            ____result.AttributeLevel = __AttributeLevel__;
            ____result.AttributeTitle = __AttributeTitle__;
            ____result.LevelUpType = __LevelUpType__;
            ____result.LevelUpItem = __LevelUpItem__;
            ____result.UpItemCnt = __UpItemCnt__;
            ____result.LevelUpRate = __LevelUpRate__;
            ____result.AdditionalRateUnit_1 = __AdditionalRateUnit_1__;
            ____result.AdditionalRateMaxRate_1 = __AdditionalRateMaxRate_1__;
            ____result.AdditionalItem_1 = __AdditionalItem_1__;
            ____result.AdditionalItemCnt_1 = __AdditionalItemCnt_1__;
            ____result.AdditionalRateUnit_2 = __AdditionalRateUnit_2__;
            ____result.AdditionalRateMaxRate_2 = __AdditionalRateMaxRate_2__;
            ____result.AdditionalItem_2 = __AdditionalItem_2__;
            ____result.AdditionalItemCnt_2 = __AdditionalItemCnt_2__;
            ____result.AdditionalRateUnit_3 = __AdditionalRateUnit_3__;
            ____result.AdditionalRateMaxRate_3 = __AdditionalRateMaxRate_3__;
            ____result.AdditionalItem_3 = __AdditionalItem_3__;
            ____result.AdditionalItemCnt_3 = __AdditionalItemCnt_3__;
            ____result.AdditionalRateUnit_4 = __AdditionalRateUnit_4__;
            ____result.AdditionalRateMaxRate_4 = __AdditionalRateMaxRate_4__;
            ____result.AdditionalItem_4 = __AdditionalItem_4__;
            ____result.AdditionalItemCnt_4 = __AdditionalItemCnt_4__;
            ____result.AdditionalRateUnit_5 = __AdditionalRateUnit_5__;
            ____result.AdditionalRateMaxRate_5 = __AdditionalRateMaxRate_5__;
            ____result.AdditionalItem_5 = __AdditionalItem_5__;
            ____result.AdditionalItemCnt_5 = __AdditionalItemCnt_5__;
            ____result.AdditionalRateUnit_6 = __AdditionalRateUnit_6__;
            ____result.AdditionalRateMaxRate_6 = __AdditionalRateMaxRate_6__;
            ____result.AdditionalItem_6 = __AdditionalItem_6__;
            ____result.AdditionalItemCnt_6 = __AdditionalItemCnt_6__;
            ____result.AdditionalRateUnit_7 = __AdditionalRateUnit_7__;
            ____result.AdditionalRateMaxRate_7 = __AdditionalRateMaxRate_7__;
            ____result.AdditionalItem_7 = __AdditionalItem_7__;
            ____result.AdditionalItemCnt_7 = __AdditionalItemCnt_7__;
            ____result.AdditionalRateUnit_8 = __AdditionalRateUnit_8__;
            ____result.AdditionalRateMaxRate_8 = __AdditionalRateMaxRate_8__;
            ____result.AdditionalItem_8 = __AdditionalItem_8__;
            ____result.AdditionalItemCnt_8 = __AdditionalItemCnt_8__;
            ____result.AdditionalRateUnit_9 = __AdditionalRateUnit_9__;
            ____result.AdditionalRateMaxRate_9 = __AdditionalRateMaxRate_9__;
            ____result.AdditionalItem_9 = __AdditionalItem_9__;
            ____result.AdditionalItemCnt_9 = __AdditionalItemCnt_9__;
            ____result.AdditionalRateUnit_10 = __AdditionalRateUnit_10__;
            ____result.AdditionalRateMaxRate_10 = __AdditionalRateMaxRate_10__;
            ____result.AdditionalItem_10 = __AdditionalItem_10__;
            ____result.AdditionalItemCnt_10 = __AdditionalItemCnt_10__;
            ____result.AttributeIconID = __AttributeIconID__;
            ____result.IconID = __IconID__;
            ____result.AbilityActionID_01 = __AbilityActionID_01__;
            ____result.AbilityActionID_02 = __AbilityActionID_02__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AttributeChain_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.AttributeChain_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.AttributeChain_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(14);
            writer.Write(value.AttributeChainID);
            writer.Write(value.ChainLevel);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ChainTitleID, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_LevelUpType>().Serialize(ref writer, value.LevelUpType, options);
            writer.Write(value.FireLevelReq);
            writer.Write(value.WaterLevelReq);
            writer.Write(value.ElectricLevelReq);
            writer.Write(value.LightLevelReq);
            writer.Write(value.DarkLevelReq);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.IconID, options);
            writer.Write(value.AbilityActionID_01);
            writer.Write(value.AbilityActionID_02);
            writer.Write(value.AbilityActionID_03);
            writer.Write(value.AbilityActionID_04);
        }

        public global::GameDB.AttributeChain_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __AttributeChainID__ = default(uint);
            var __ChainLevel__ = default(byte);
            var __ChainTitleID__ = default(string);
            var __LevelUpType__ = default(global::GameDB.E_LevelUpType);
            var __FireLevelReq__ = default(byte);
            var __WaterLevelReq__ = default(byte);
            var __ElectricLevelReq__ = default(byte);
            var __LightLevelReq__ = default(byte);
            var __DarkLevelReq__ = default(byte);
            var __IconID__ = default(string);
            var __AbilityActionID_01__ = default(uint);
            var __AbilityActionID_02__ = default(uint);
            var __AbilityActionID_03__ = default(uint);
            var __AbilityActionID_04__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __AttributeChainID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __ChainLevel__ = reader.ReadByte();
                        break;
                    case 2:
                        __ChainTitleID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __LevelUpType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_LevelUpType>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __FireLevelReq__ = reader.ReadByte();
                        break;
                    case 5:
                        __WaterLevelReq__ = reader.ReadByte();
                        break;
                    case 6:
                        __ElectricLevelReq__ = reader.ReadByte();
                        break;
                    case 7:
                        __LightLevelReq__ = reader.ReadByte();
                        break;
                    case 8:
                        __DarkLevelReq__ = reader.ReadByte();
                        break;
                    case 9:
                        __IconID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __AbilityActionID_01__ = reader.ReadUInt32();
                        break;
                    case 11:
                        __AbilityActionID_02__ = reader.ReadUInt32();
                        break;
                    case 12:
                        __AbilityActionID_03__ = reader.ReadUInt32();
                        break;
                    case 13:
                        __AbilityActionID_04__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.AttributeChain_Table();
            ____result.AttributeChainID = __AttributeChainID__;
            ____result.ChainLevel = __ChainLevel__;
            ____result.ChainTitleID = __ChainTitleID__;
            ____result.LevelUpType = __LevelUpType__;
            ____result.FireLevelReq = __FireLevelReq__;
            ____result.WaterLevelReq = __WaterLevelReq__;
            ____result.ElectricLevelReq = __ElectricLevelReq__;
            ____result.LightLevelReq = __LightLevelReq__;
            ____result.DarkLevelReq = __DarkLevelReq__;
            ____result.IconID = __IconID__;
            ____result.AbilityActionID_01 = __AbilityActionID_01__;
            ____result.AbilityActionID_02 = __AbilityActionID_02__;
            ____result.AbilityActionID_03 = __AbilityActionID_03__;
            ____result.AbilityActionID_04 = __AbilityActionID_04__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AttributeDamage_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.AttributeDamage_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.AttributeDamage_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            writer.Write(value.AttributeDamageID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_UnitAttributeType>().Serialize(ref writer, value.AttackAttribute, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_UnitAttributeType>().Serialize(ref writer, value.DefenseAttribute, options);
            writer.Write(value.MinGapLevel);
            writer.Write(value.MaxGapLevel);
            writer.Write(value.DamageRate);
        }

        public global::GameDB.AttributeDamage_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __AttributeDamageID__ = default(uint);
            var __AttackAttribute__ = default(global::GameDB.E_UnitAttributeType);
            var __DefenseAttribute__ = default(global::GameDB.E_UnitAttributeType);
            var __MinGapLevel__ = default(int);
            var __MaxGapLevel__ = default(int);
            var __DamageRate__ = default(float);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __AttributeDamageID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __AttackAttribute__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_UnitAttributeType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __DefenseAttribute__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_UnitAttributeType>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __MinGapLevel__ = reader.ReadInt32();
                        break;
                    case 4:
                        __MaxGapLevel__ = reader.ReadInt32();
                        break;
                    case 5:
                        __DamageRate__ = reader.ReadSingle();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.AttributeDamage_Table();
            ____result.AttributeDamageID = __AttributeDamageID__;
            ____result.AttackAttribute = __AttackAttribute__;
            ____result.DefenseAttribute = __DefenseAttribute__;
            ____result.MinGapLevel = __MinGapLevel__;
            ____result.MaxGapLevel = __MaxGapLevel__;
            ____result.DamageRate = __DamageRate__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class BossWar_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.BossWar_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.BossWar_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(10);
            writer.Write(value.BossWarID);
            writer.Write(value.StageID);
            writer.Write(value.Grade);
            writer.Write(value.MinDamage);
            writer.Write(value.MaxDamage);
            writer.Write(value.NextID);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.RewardID, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.RewardCount, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.IconID, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.TooltipID, options);
        }

        public global::GameDB.BossWar_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __BossWarID__ = default(uint);
            var __StageID__ = default(uint);
            var __Grade__ = default(byte);
            var __MinDamage__ = default(ulong);
            var __MaxDamage__ = default(ulong);
            var __NextID__ = default(uint);
            var __RewardID__ = default(global::System.Collections.Generic.List<uint>);
            var __RewardCount__ = default(global::System.Collections.Generic.List<uint>);
            var __IconID__ = default(string);
            var __TooltipID__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __BossWarID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __StageID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __Grade__ = reader.ReadByte();
                        break;
                    case 3:
                        __MinDamage__ = reader.ReadUInt64();
                        break;
                    case 4:
                        __MaxDamage__ = reader.ReadUInt64();
                        break;
                    case 5:
                        __NextID__ = reader.ReadUInt32();
                        break;
                    case 6:
                        __RewardID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __RewardCount__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __IconID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __TooltipID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.BossWar_Table();
            ____result.BossWarID = __BossWarID__;
            ____result.StageID = __StageID__;
            ____result.Grade = __Grade__;
            ____result.MinDamage = __MinDamage__;
            ____result.MaxDamage = __MaxDamage__;
            ____result.NextID = __NextID__;
            ____result.RewardID = __RewardID__;
            ____result.RewardCount = __RewardCount__;
            ____result.IconID = __IconID__;
            ____result.TooltipID = __TooltipID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Broadcast_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Broadcast_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Broadcast_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            writer.Write(value.BroadcastID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_BroadcastType>().Serialize(ref writer, value.BroadcastType, options);
            writer.Write(value.IDbyType);
            writer.Write(value.StackCheckCount);
        }

        public global::GameDB.Broadcast_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __BroadcastID__ = default(uint);
            var __BroadcastType__ = default(global::GameDB.E_BroadcastType);
            var __IDbyType__ = default(uint);
            var __StackCheckCount__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __BroadcastID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __BroadcastType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_BroadcastType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __IDbyType__ = reader.ReadUInt32();
                        break;
                    case 3:
                        __StackCheckCount__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Broadcast_Table();
            ____result.BroadcastID = __BroadcastID__;
            ____result.BroadcastType = __BroadcastType__;
            ____result.IDbyType = __IDbyType__;
            ____result.StackCheckCount = __StackCheckCount__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Change_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Change_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Change_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(27);
            writer.Write(value.ChangeID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ViewType>().Serialize(ref writer, value.ViewType, options);
            writer.Write(value.Sort);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ExtractionType>().Serialize(ref writer, value.ExtractionType, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.ExtractionMaterialItemID, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.ExtractionMaterialItemCnt, options);
            writer.Write(value.ExtractionGetItemID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ChangeTextID, options);
            writer.Write(value.Grade);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_CharacterType>().Serialize(ref writer, value.UseAttackType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_UnitAttributeType>().Serialize(ref writer, value.AttributeType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_UniqueType>().Serialize(ref writer, value.UniqueType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_MoveType>().Serialize(ref writer, value.MoveType, options);
            writer.Write(value.UseItemCount);
            writer.Write(value.ChangeTime);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_AbilityRetain>().Serialize(ref writer, value.AbilityRetain, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.AbilityActionIDs, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.EnchantAbilityActionID, options);
            writer.Write(value.ResourceID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Icon, options);
            writer.Write(value.Scale);
            writer.Write(value.ViewScale);
            writer.Write(value.ViewScaleLocY);
            writer.Write(value.SeletScale);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ChangeQuestType>().Serialize(ref writer, value.ChangeQuestType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ClassIcon, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ToolTipID, options);
        }

        public global::GameDB.Change_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __ChangeID__ = default(uint);
            var __ViewType__ = default(global::GameDB.E_ViewType);
            var __Sort__ = default(uint);
            var __ExtractionType__ = default(global::GameDB.E_ExtractionType);
            var __ExtractionMaterialItemID__ = default(global::System.Collections.Generic.List<uint>);
            var __ExtractionMaterialItemCnt__ = default(global::System.Collections.Generic.List<uint>);
            var __ExtractionGetItemID__ = default(uint);
            var __ChangeTextID__ = default(string);
            var __Grade__ = default(byte);
            var __UseAttackType__ = default(global::GameDB.E_CharacterType);
            var __AttributeType__ = default(global::GameDB.E_UnitAttributeType);
            var __UniqueType__ = default(global::GameDB.E_UniqueType);
            var __MoveType__ = default(global::GameDB.E_MoveType);
            var __UseItemCount__ = default(uint);
            var __ChangeTime__ = default(uint);
            var __AbilityRetain__ = default(global::GameDB.E_AbilityRetain);
            var __AbilityActionIDs__ = default(global::System.Collections.Generic.List<uint>);
            var __EnchantAbilityActionID__ = default(global::System.Collections.Generic.List<uint>);
            var __ResourceID__ = default(uint);
            var __Icon__ = default(string);
            var __Scale__ = default(uint);
            var __ViewScale__ = default(uint);
            var __ViewScaleLocY__ = default(float);
            var __SeletScale__ = default(uint);
            var __ChangeQuestType__ = default(global::GameDB.E_ChangeQuestType);
            var __ClassIcon__ = default(string);
            var __ToolTipID__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __ChangeID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __ViewType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ViewType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Sort__ = reader.ReadUInt32();
                        break;
                    case 3:
                        __ExtractionType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ExtractionType>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __ExtractionMaterialItemID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __ExtractionMaterialItemCnt__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __ExtractionGetItemID__ = reader.ReadUInt32();
                        break;
                    case 7:
                        __ChangeTextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __Grade__ = reader.ReadByte();
                        break;
                    case 9:
                        __UseAttackType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_CharacterType>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __AttributeType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_UnitAttributeType>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __UniqueType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_UniqueType>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __MoveType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_MoveType>().Deserialize(ref reader, options);
                        break;
                    case 13:
                        __UseItemCount__ = reader.ReadUInt32();
                        break;
                    case 14:
                        __ChangeTime__ = reader.ReadUInt32();
                        break;
                    case 15:
                        __AbilityRetain__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_AbilityRetain>().Deserialize(ref reader, options);
                        break;
                    case 16:
                        __AbilityActionIDs__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 17:
                        __EnchantAbilityActionID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 18:
                        __ResourceID__ = reader.ReadUInt32();
                        break;
                    case 19:
                        __Icon__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 20:
                        __Scale__ = reader.ReadUInt32();
                        break;
                    case 21:
                        __ViewScale__ = reader.ReadUInt32();
                        break;
                    case 22:
                        __ViewScaleLocY__ = reader.ReadSingle();
                        break;
                    case 23:
                        __SeletScale__ = reader.ReadUInt32();
                        break;
                    case 24:
                        __ChangeQuestType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ChangeQuestType>().Deserialize(ref reader, options);
                        break;
                    case 25:
                        __ClassIcon__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 26:
                        __ToolTipID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Change_Table();
            ____result.ChangeID = __ChangeID__;
            ____result.ViewType = __ViewType__;
            ____result.Sort = __Sort__;
            ____result.ExtractionType = __ExtractionType__;
            ____result.ExtractionMaterialItemID = __ExtractionMaterialItemID__;
            ____result.ExtractionMaterialItemCnt = __ExtractionMaterialItemCnt__;
            ____result.ExtractionGetItemID = __ExtractionGetItemID__;
            ____result.ChangeTextID = __ChangeTextID__;
            ____result.Grade = __Grade__;
            ____result.UseAttackType = __UseAttackType__;
            ____result.AttributeType = __AttributeType__;
            ____result.UniqueType = __UniqueType__;
            ____result.MoveType = __MoveType__;
            ____result.UseItemCount = __UseItemCount__;
            ____result.ChangeTime = __ChangeTime__;
            ____result.AbilityRetain = __AbilityRetain__;
            ____result.AbilityActionIDs = __AbilityActionIDs__;
            ____result.EnchantAbilityActionID = __EnchantAbilityActionID__;
            ____result.ResourceID = __ResourceID__;
            ____result.Icon = __Icon__;
            ____result.Scale = __Scale__;
            ____result.ViewScale = __ViewScale__;
            ____result.ViewScaleLocY = __ViewScaleLocY__;
            ____result.SeletScale = __SeletScale__;
            ____result.ChangeQuestType = __ChangeQuestType__;
            ____result.ClassIcon = __ClassIcon__;
            ____result.ToolTipID = __ToolTipID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ChangeCollection_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.ChangeCollection_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.ChangeCollection_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(18);
            writer.Write(value.ChangeCollectionID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ViewType>().Serialize(ref writer, value.ViewType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ChangeCollectionTextID, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_TapType>().Serialize(ref writer, value.TapType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_CollectionType>().Serialize(ref writer, value.CollectionType, options);
            writer.Write(value.Sort);
            writer.Write(value.CollectionChangeCount);
            writer.Write(value.CollectionChangeID_01);
            writer.Write(value.CollectionChangeID_02);
            writer.Write(value.CollectionChangeID_03);
            writer.Write(value.CollectionChangeID_04);
            writer.Write(value.CollectionChangeID_05);
            writer.Write(value.CollectionChangeID_06);
            writer.Write(value.CollectionChangeID_07);
            writer.Write(value.CollectionChangeID_08);
            writer.Write(value.AbilityActionID_01);
            writer.Write(value.AbilityActionID_02);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ToolTipID, options);
        }

        public global::GameDB.ChangeCollection_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __ChangeCollectionID__ = default(uint);
            var __ViewType__ = default(global::GameDB.E_ViewType);
            var __ChangeCollectionTextID__ = default(string);
            var __TapType__ = default(global::GameDB.E_TapType);
            var __CollectionType__ = default(global::GameDB.E_CollectionType);
            var __Sort__ = default(uint);
            var __CollectionChangeCount__ = default(byte);
            var __CollectionChangeID_01__ = default(uint);
            var __CollectionChangeID_02__ = default(uint);
            var __CollectionChangeID_03__ = default(uint);
            var __CollectionChangeID_04__ = default(uint);
            var __CollectionChangeID_05__ = default(uint);
            var __CollectionChangeID_06__ = default(uint);
            var __CollectionChangeID_07__ = default(uint);
            var __CollectionChangeID_08__ = default(uint);
            var __AbilityActionID_01__ = default(uint);
            var __AbilityActionID_02__ = default(uint);
            var __ToolTipID__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __ChangeCollectionID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __ViewType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ViewType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __ChangeCollectionTextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __TapType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_TapType>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __CollectionType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_CollectionType>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Sort__ = reader.ReadUInt32();
                        break;
                    case 6:
                        __CollectionChangeCount__ = reader.ReadByte();
                        break;
                    case 7:
                        __CollectionChangeID_01__ = reader.ReadUInt32();
                        break;
                    case 8:
                        __CollectionChangeID_02__ = reader.ReadUInt32();
                        break;
                    case 9:
                        __CollectionChangeID_03__ = reader.ReadUInt32();
                        break;
                    case 10:
                        __CollectionChangeID_04__ = reader.ReadUInt32();
                        break;
                    case 11:
                        __CollectionChangeID_05__ = reader.ReadUInt32();
                        break;
                    case 12:
                        __CollectionChangeID_06__ = reader.ReadUInt32();
                        break;
                    case 13:
                        __CollectionChangeID_07__ = reader.ReadUInt32();
                        break;
                    case 14:
                        __CollectionChangeID_08__ = reader.ReadUInt32();
                        break;
                    case 15:
                        __AbilityActionID_01__ = reader.ReadUInt32();
                        break;
                    case 16:
                        __AbilityActionID_02__ = reader.ReadUInt32();
                        break;
                    case 17:
                        __ToolTipID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.ChangeCollection_Table();
            ____result.ChangeCollectionID = __ChangeCollectionID__;
            ____result.ViewType = __ViewType__;
            ____result.ChangeCollectionTextID = __ChangeCollectionTextID__;
            ____result.TapType = __TapType__;
            ____result.CollectionType = __CollectionType__;
            ____result.Sort = __Sort__;
            ____result.CollectionChangeCount = __CollectionChangeCount__;
            ____result.CollectionChangeID_01 = __CollectionChangeID_01__;
            ____result.CollectionChangeID_02 = __CollectionChangeID_02__;
            ____result.CollectionChangeID_03 = __CollectionChangeID_03__;
            ____result.CollectionChangeID_04 = __CollectionChangeID_04__;
            ____result.CollectionChangeID_05 = __CollectionChangeID_05__;
            ____result.CollectionChangeID_06 = __CollectionChangeID_06__;
            ____result.CollectionChangeID_07 = __CollectionChangeID_07__;
            ____result.CollectionChangeID_08 = __CollectionChangeID_08__;
            ____result.AbilityActionID_01 = __AbilityActionID_01__;
            ____result.AbilityActionID_02 = __AbilityActionID_02__;
            ____result.ToolTipID = __ToolTipID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ChangeCompose_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.ChangeCompose_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.ChangeCompose_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(9);
            writer.Write(value.ChangeComposeID);
            writer.Write(value.ChangeMaterialTier);
            writer.Write(value.ChangeMaterialCount);
            writer.Write(value.ChangeItemCount);
            writer.Write(value.HighTierRate);
            writer.Write(value.SameTierGroupID);
            writer.Write(value.HighTierGroupID);
            writer.Write(value.FailGetItemID);
            writer.Write(value.FailGetItemCount);
        }

        public global::GameDB.ChangeCompose_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __ChangeComposeID__ = default(uint);
            var __ChangeMaterialTier__ = default(byte);
            var __ChangeMaterialCount__ = default(byte);
            var __ChangeItemCount__ = default(uint);
            var __HighTierRate__ = default(uint);
            var __SameTierGroupID__ = default(uint);
            var __HighTierGroupID__ = default(uint);
            var __FailGetItemID__ = default(uint);
            var __FailGetItemCount__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __ChangeComposeID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __ChangeMaterialTier__ = reader.ReadByte();
                        break;
                    case 2:
                        __ChangeMaterialCount__ = reader.ReadByte();
                        break;
                    case 3:
                        __ChangeItemCount__ = reader.ReadUInt32();
                        break;
                    case 4:
                        __HighTierRate__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __SameTierGroupID__ = reader.ReadUInt32();
                        break;
                    case 6:
                        __HighTierGroupID__ = reader.ReadUInt32();
                        break;
                    case 7:
                        __FailGetItemID__ = reader.ReadUInt32();
                        break;
                    case 8:
                        __FailGetItemCount__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.ChangeCompose_Table();
            ____result.ChangeComposeID = __ChangeComposeID__;
            ____result.ChangeMaterialTier = __ChangeMaterialTier__;
            ____result.ChangeMaterialCount = __ChangeMaterialCount__;
            ____result.ChangeItemCount = __ChangeItemCount__;
            ____result.HighTierRate = __HighTierRate__;
            ____result.SameTierGroupID = __SameTierGroupID__;
            ____result.HighTierGroupID = __HighTierGroupID__;
            ____result.FailGetItemID = __FailGetItemID__;
            ____result.FailGetItemCount = __FailGetItemCount__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ChangeList_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.ChangeList_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.ChangeList_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            writer.Write(value.ChangeListID);
            writer.Write(value.GroupID);
            writer.Write(value.GetChangeID);
            writer.Write(value.GetChangeRate);
        }

        public global::GameDB.ChangeList_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __ChangeListID__ = default(uint);
            var __GroupID__ = default(uint);
            var __GetChangeID__ = default(uint);
            var __GetChangeRate__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __ChangeListID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __GroupID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __GetChangeID__ = reader.ReadUInt32();
                        break;
                    case 3:
                        __GetChangeRate__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.ChangeList_Table();
            ____result.ChangeListID = __ChangeListID__;
            ____result.GroupID = __GroupID__;
            ____result.GetChangeID = __GetChangeID__;
            ____result.GetChangeRate = __GetChangeRate__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ChangeQuest_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.ChangeQuest_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.ChangeQuest_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(16);
            writer.Write(value.ChangeQuestID);
            writer.Write(value.QuestGrade);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.QuestTitle, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.RewardItem, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.RewardItemCount, options);
            writer.Write(value.QuestSlotCount);
            writer.Write(value.ChangeGrade1);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ChangeQuestType>().Serialize(ref writer, value.ChangeType1, options);
            writer.Write(value.ChangeCount1);
            writer.Write(value.ChangeGrade2);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ChangeQuestType>().Serialize(ref writer, value.ChangeType2, options);
            writer.Write(value.ChangeCount2);
            writer.Write(value.ChangeGrade3);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ChangeQuestType>().Serialize(ref writer, value.ChangeType3, options);
            writer.Write(value.ChangeCount3);
            writer.Write(value.CostTime);
        }

        public global::GameDB.ChangeQuest_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __ChangeQuestID__ = default(uint);
            var __QuestGrade__ = default(uint);
            var __QuestTitle__ = default(string);
            var __RewardItem__ = default(global::System.Collections.Generic.List<uint>);
            var __RewardItemCount__ = default(global::System.Collections.Generic.List<uint>);
            var __QuestSlotCount__ = default(byte);
            var __ChangeGrade1__ = default(byte);
            var __ChangeType1__ = default(global::GameDB.E_ChangeQuestType);
            var __ChangeCount1__ = default(byte);
            var __ChangeGrade2__ = default(byte);
            var __ChangeType2__ = default(global::GameDB.E_ChangeQuestType);
            var __ChangeCount2__ = default(byte);
            var __ChangeGrade3__ = default(byte);
            var __ChangeType3__ = default(global::GameDB.E_ChangeQuestType);
            var __ChangeCount3__ = default(byte);
            var __CostTime__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __ChangeQuestID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __QuestGrade__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __QuestTitle__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __RewardItem__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __RewardItemCount__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __QuestSlotCount__ = reader.ReadByte();
                        break;
                    case 6:
                        __ChangeGrade1__ = reader.ReadByte();
                        break;
                    case 7:
                        __ChangeType1__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ChangeQuestType>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __ChangeCount1__ = reader.ReadByte();
                        break;
                    case 9:
                        __ChangeGrade2__ = reader.ReadByte();
                        break;
                    case 10:
                        __ChangeType2__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ChangeQuestType>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __ChangeCount2__ = reader.ReadByte();
                        break;
                    case 12:
                        __ChangeGrade3__ = reader.ReadByte();
                        break;
                    case 13:
                        __ChangeType3__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ChangeQuestType>().Deserialize(ref reader, options);
                        break;
                    case 14:
                        __ChangeCount3__ = reader.ReadByte();
                        break;
                    case 15:
                        __CostTime__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.ChangeQuest_Table();
            ____result.ChangeQuestID = __ChangeQuestID__;
            ____result.QuestGrade = __QuestGrade__;
            ____result.QuestTitle = __QuestTitle__;
            ____result.RewardItem = __RewardItem__;
            ____result.RewardItemCount = __RewardItemCount__;
            ____result.QuestSlotCount = __QuestSlotCount__;
            ____result.ChangeGrade1 = __ChangeGrade1__;
            ____result.ChangeType1 = __ChangeType1__;
            ____result.ChangeCount1 = __ChangeCount1__;
            ____result.ChangeGrade2 = __ChangeGrade2__;
            ____result.ChangeType2 = __ChangeType2__;
            ____result.ChangeCount2 = __ChangeCount2__;
            ____result.ChangeGrade3 = __ChangeGrade3__;
            ____result.ChangeType3 = __ChangeType3__;
            ____result.ChangeCount3 = __ChangeCount3__;
            ____result.CostTime = __CostTime__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ChangeQuestLevel_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.ChangeQuestLevel_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.ChangeQuestLevel_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(14);
            writer.Write(value.ChangeQuestLevelID);
            writer.Write(value.ChangeQuestLevel);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_LevelUpType>().Serialize(ref writer, value.LevelUpType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.LevelInfo, options);
            writer.Write(value.QuestCount);
            writer.Write(value.LevelUpGrade);
            writer.Write(value.LevelUpCount);
            writer.Write(value.GradeRate1);
            writer.Write(value.GradeRate2);
            writer.Write(value.GradeRate3);
            writer.Write(value.GradeRate4);
            writer.Write(value.GradeRate5);
            writer.Write(value.GradeRate6);
            writer.Write(value.MaxRate);
        }

        public global::GameDB.ChangeQuestLevel_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __ChangeQuestLevelID__ = default(uint);
            var __ChangeQuestLevel__ = default(byte);
            var __LevelUpType__ = default(global::GameDB.E_LevelUpType);
            var __LevelInfo__ = default(string);
            var __QuestCount__ = default(byte);
            var __LevelUpGrade__ = default(byte);
            var __LevelUpCount__ = default(uint);
            var __GradeRate1__ = default(uint);
            var __GradeRate2__ = default(uint);
            var __GradeRate3__ = default(uint);
            var __GradeRate4__ = default(uint);
            var __GradeRate5__ = default(uint);
            var __GradeRate6__ = default(uint);
            var __MaxRate__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __ChangeQuestLevelID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __ChangeQuestLevel__ = reader.ReadByte();
                        break;
                    case 2:
                        __LevelUpType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_LevelUpType>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __LevelInfo__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __QuestCount__ = reader.ReadByte();
                        break;
                    case 5:
                        __LevelUpGrade__ = reader.ReadByte();
                        break;
                    case 6:
                        __LevelUpCount__ = reader.ReadUInt32();
                        break;
                    case 7:
                        __GradeRate1__ = reader.ReadUInt32();
                        break;
                    case 8:
                        __GradeRate2__ = reader.ReadUInt32();
                        break;
                    case 9:
                        __GradeRate3__ = reader.ReadUInt32();
                        break;
                    case 10:
                        __GradeRate4__ = reader.ReadUInt32();
                        break;
                    case 11:
                        __GradeRate5__ = reader.ReadUInt32();
                        break;
                    case 12:
                        __GradeRate6__ = reader.ReadUInt32();
                        break;
                    case 13:
                        __MaxRate__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.ChangeQuestLevel_Table();
            ____result.ChangeQuestLevelID = __ChangeQuestLevelID__;
            ____result.ChangeQuestLevel = __ChangeQuestLevel__;
            ____result.LevelUpType = __LevelUpType__;
            ____result.LevelInfo = __LevelInfo__;
            ____result.QuestCount = __QuestCount__;
            ____result.LevelUpGrade = __LevelUpGrade__;
            ____result.LevelUpCount = __LevelUpCount__;
            ____result.GradeRate1 = __GradeRate1__;
            ____result.GradeRate2 = __GradeRate2__;
            ____result.GradeRate3 = __GradeRate3__;
            ____result.GradeRate4 = __GradeRate4__;
            ____result.GradeRate5 = __GradeRate5__;
            ____result.GradeRate6 = __GradeRate6__;
            ____result.MaxRate = __MaxRate__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Character_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Character_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Character_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(54);
            writer.Write(value.CharacterID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.CharacterTextID, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_CharacterSelect>().Serialize(ref writer, value.CharacterSelect, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_CharacterType>().Serialize(ref writer, value.CharacterType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_UnitAttributeType>().Serialize(ref writer, value.AttributeType, options);
            writer.Write(value.MaxLevel);
            writer.Write(value.Strength);
            writer.Write(value.Dexterity);
            writer.Write(value.Intellect);
            writer.Write(value.Wisdom);
            writer.Write(value.Vitality);
            writer.Write(value.MaxHP);
            writer.Write(value.MaxMP);
            writer.Write(value.ShortAttack);
            writer.Write(value.LongAttack);
            writer.Write(value.MagicAttack);
            writer.Write(value.ShortAccuracy);
            writer.Write(value.LongAccuracy);
            writer.Write(value.MagicAccuracy);
            writer.Write(value.ShortCritical);
            writer.Write(value.LongCritical);
            writer.Write(value.MagicCritical);
            writer.Write(value.ShortCriticalDmg);
            writer.Write(value.LongCriticalDmg);
            writer.Write(value.MagicCriticalDmg);
            writer.Write(value.MeleeDefense);
            writer.Write(value.MagicDefense);
            writer.Write(value.WalkSpeed);
            writer.Write(value.RunSpeed);
            writer.Write(value.AttackSpeed);
            writer.Write(value.Reduction);
            writer.Write(value.ReductionIgnore);
            writer.Write(value.ShortEvasion);
            writer.Write(value.LongEvasion);
            writer.Write(value.MagicEvasion);
            writer.Write(value.ShortEvasionIgnore);
            writer.Write(value.LongEvasionIgnore);
            writer.Write(value.MagicEvasionIgnore);
            writer.Write(value.PotionRecoveryPoint);
            writer.Write(value.PotionRecoveryRate);
            writer.Write(value.MaxWeight);
            writer.Write(value.HPRecovery);
            writer.Write(value.MPRecovery);
            writer.Write(value.HPRecoveryTime);
            writer.Write(value.MPRecoveryTime);
            writer.Write(value.ResourceID);
            writer.Write(value.Scale);
            writer.Write(value.CollisionRadius);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Icon, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.AttackIcon, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ToolTipID, options);
            writer.Write(value.ScenarioWeapon);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.CreationDirector, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.CharacterIcon, options);
        }

        public global::GameDB.Character_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __CharacterID__ = default(uint);
            var __CharacterTextID__ = default(string);
            var __CharacterSelect__ = default(global::GameDB.E_CharacterSelect);
            var __CharacterType__ = default(global::GameDB.E_CharacterType);
            var __AttributeType__ = default(global::GameDB.E_UnitAttributeType);
            var __MaxLevel__ = default(byte);
            var __Strength__ = default(uint);
            var __Dexterity__ = default(uint);
            var __Intellect__ = default(uint);
            var __Wisdom__ = default(uint);
            var __Vitality__ = default(uint);
            var __MaxHP__ = default(uint);
            var __MaxMP__ = default(uint);
            var __ShortAttack__ = default(uint);
            var __LongAttack__ = default(uint);
            var __MagicAttack__ = default(uint);
            var __ShortAccuracy__ = default(uint);
            var __LongAccuracy__ = default(uint);
            var __MagicAccuracy__ = default(uint);
            var __ShortCritical__ = default(float);
            var __LongCritical__ = default(float);
            var __MagicCritical__ = default(float);
            var __ShortCriticalDmg__ = default(uint);
            var __LongCriticalDmg__ = default(uint);
            var __MagicCriticalDmg__ = default(uint);
            var __MeleeDefense__ = default(uint);
            var __MagicDefense__ = default(uint);
            var __WalkSpeed__ = default(float);
            var __RunSpeed__ = default(float);
            var __AttackSpeed__ = default(float);
            var __Reduction__ = default(uint);
            var __ReductionIgnore__ = default(uint);
            var __ShortEvasion__ = default(uint);
            var __LongEvasion__ = default(uint);
            var __MagicEvasion__ = default(uint);
            var __ShortEvasionIgnore__ = default(uint);
            var __LongEvasionIgnore__ = default(uint);
            var __MagicEvasionIgnore__ = default(uint);
            var __PotionRecoveryPoint__ = default(uint);
            var __PotionRecoveryRate__ = default(float);
            var __MaxWeight__ = default(uint);
            var __HPRecovery__ = default(float);
            var __MPRecovery__ = default(float);
            var __HPRecoveryTime__ = default(float);
            var __MPRecoveryTime__ = default(float);
            var __ResourceID__ = default(uint);
            var __Scale__ = default(uint);
            var __CollisionRadius__ = default(float);
            var __Icon__ = default(string);
            var __AttackIcon__ = default(string);
            var __ToolTipID__ = default(string);
            var __ScenarioWeapon__ = default(uint);
            var __CreationDirector__ = default(string);
            var __CharacterIcon__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __CharacterID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __CharacterTextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __CharacterSelect__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_CharacterSelect>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __CharacterType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_CharacterType>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __AttributeType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_UnitAttributeType>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __MaxLevel__ = reader.ReadByte();
                        break;
                    case 6:
                        __Strength__ = reader.ReadUInt32();
                        break;
                    case 7:
                        __Dexterity__ = reader.ReadUInt32();
                        break;
                    case 8:
                        __Intellect__ = reader.ReadUInt32();
                        break;
                    case 9:
                        __Wisdom__ = reader.ReadUInt32();
                        break;
                    case 10:
                        __Vitality__ = reader.ReadUInt32();
                        break;
                    case 11:
                        __MaxHP__ = reader.ReadUInt32();
                        break;
                    case 12:
                        __MaxMP__ = reader.ReadUInt32();
                        break;
                    case 13:
                        __ShortAttack__ = reader.ReadUInt32();
                        break;
                    case 14:
                        __LongAttack__ = reader.ReadUInt32();
                        break;
                    case 15:
                        __MagicAttack__ = reader.ReadUInt32();
                        break;
                    case 16:
                        __ShortAccuracy__ = reader.ReadUInt32();
                        break;
                    case 17:
                        __LongAccuracy__ = reader.ReadUInt32();
                        break;
                    case 18:
                        __MagicAccuracy__ = reader.ReadUInt32();
                        break;
                    case 19:
                        __ShortCritical__ = reader.ReadSingle();
                        break;
                    case 20:
                        __LongCritical__ = reader.ReadSingle();
                        break;
                    case 21:
                        __MagicCritical__ = reader.ReadSingle();
                        break;
                    case 22:
                        __ShortCriticalDmg__ = reader.ReadUInt32();
                        break;
                    case 23:
                        __LongCriticalDmg__ = reader.ReadUInt32();
                        break;
                    case 24:
                        __MagicCriticalDmg__ = reader.ReadUInt32();
                        break;
                    case 25:
                        __MeleeDefense__ = reader.ReadUInt32();
                        break;
                    case 26:
                        __MagicDefense__ = reader.ReadUInt32();
                        break;
                    case 27:
                        __WalkSpeed__ = reader.ReadSingle();
                        break;
                    case 28:
                        __RunSpeed__ = reader.ReadSingle();
                        break;
                    case 29:
                        __AttackSpeed__ = reader.ReadSingle();
                        break;
                    case 30:
                        __Reduction__ = reader.ReadUInt32();
                        break;
                    case 31:
                        __ReductionIgnore__ = reader.ReadUInt32();
                        break;
                    case 32:
                        __ShortEvasion__ = reader.ReadUInt32();
                        break;
                    case 33:
                        __LongEvasion__ = reader.ReadUInt32();
                        break;
                    case 34:
                        __MagicEvasion__ = reader.ReadUInt32();
                        break;
                    case 35:
                        __ShortEvasionIgnore__ = reader.ReadUInt32();
                        break;
                    case 36:
                        __LongEvasionIgnore__ = reader.ReadUInt32();
                        break;
                    case 37:
                        __MagicEvasionIgnore__ = reader.ReadUInt32();
                        break;
                    case 38:
                        __PotionRecoveryPoint__ = reader.ReadUInt32();
                        break;
                    case 39:
                        __PotionRecoveryRate__ = reader.ReadSingle();
                        break;
                    case 40:
                        __MaxWeight__ = reader.ReadUInt32();
                        break;
                    case 41:
                        __HPRecovery__ = reader.ReadSingle();
                        break;
                    case 42:
                        __MPRecovery__ = reader.ReadSingle();
                        break;
                    case 43:
                        __HPRecoveryTime__ = reader.ReadSingle();
                        break;
                    case 44:
                        __MPRecoveryTime__ = reader.ReadSingle();
                        break;
                    case 45:
                        __ResourceID__ = reader.ReadUInt32();
                        break;
                    case 46:
                        __Scale__ = reader.ReadUInt32();
                        break;
                    case 47:
                        __CollisionRadius__ = reader.ReadSingle();
                        break;
                    case 48:
                        __Icon__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 49:
                        __AttackIcon__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 50:
                        __ToolTipID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 51:
                        __ScenarioWeapon__ = reader.ReadUInt32();
                        break;
                    case 52:
                        __CreationDirector__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 53:
                        __CharacterIcon__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Character_Table();
            ____result.CharacterID = __CharacterID__;
            ____result.CharacterTextID = __CharacterTextID__;
            ____result.CharacterSelect = __CharacterSelect__;
            ____result.CharacterType = __CharacterType__;
            ____result.AttributeType = __AttributeType__;
            ____result.MaxLevel = __MaxLevel__;
            ____result.Strength = __Strength__;
            ____result.Dexterity = __Dexterity__;
            ____result.Intellect = __Intellect__;
            ____result.Wisdom = __Wisdom__;
            ____result.Vitality = __Vitality__;
            ____result.MaxHP = __MaxHP__;
            ____result.MaxMP = __MaxMP__;
            ____result.ShortAttack = __ShortAttack__;
            ____result.LongAttack = __LongAttack__;
            ____result.MagicAttack = __MagicAttack__;
            ____result.ShortAccuracy = __ShortAccuracy__;
            ____result.LongAccuracy = __LongAccuracy__;
            ____result.MagicAccuracy = __MagicAccuracy__;
            ____result.ShortCritical = __ShortCritical__;
            ____result.LongCritical = __LongCritical__;
            ____result.MagicCritical = __MagicCritical__;
            ____result.ShortCriticalDmg = __ShortCriticalDmg__;
            ____result.LongCriticalDmg = __LongCriticalDmg__;
            ____result.MagicCriticalDmg = __MagicCriticalDmg__;
            ____result.MeleeDefense = __MeleeDefense__;
            ____result.MagicDefense = __MagicDefense__;
            ____result.WalkSpeed = __WalkSpeed__;
            ____result.RunSpeed = __RunSpeed__;
            ____result.AttackSpeed = __AttackSpeed__;
            ____result.Reduction = __Reduction__;
            ____result.ReductionIgnore = __ReductionIgnore__;
            ____result.ShortEvasion = __ShortEvasion__;
            ____result.LongEvasion = __LongEvasion__;
            ____result.MagicEvasion = __MagicEvasion__;
            ____result.ShortEvasionIgnore = __ShortEvasionIgnore__;
            ____result.LongEvasionIgnore = __LongEvasionIgnore__;
            ____result.MagicEvasionIgnore = __MagicEvasionIgnore__;
            ____result.PotionRecoveryPoint = __PotionRecoveryPoint__;
            ____result.PotionRecoveryRate = __PotionRecoveryRate__;
            ____result.MaxWeight = __MaxWeight__;
            ____result.HPRecovery = __HPRecovery__;
            ____result.MPRecovery = __MPRecovery__;
            ____result.HPRecoveryTime = __HPRecoveryTime__;
            ____result.MPRecoveryTime = __MPRecoveryTime__;
            ____result.ResourceID = __ResourceID__;
            ____result.Scale = __Scale__;
            ____result.CollisionRadius = __CollisionRadius__;
            ____result.Icon = __Icon__;
            ____result.AttackIcon = __AttackIcon__;
            ____result.ToolTipID = __ToolTipID__;
            ____result.ScenarioWeapon = __ScenarioWeapon__;
            ____result.CreationDirector = __CreationDirector__;
            ____result.CharacterIcon = __CharacterIcon__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ClassChange_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.ClassChange_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.ClassChange_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(9);
            writer.Write(value.ClassChangeID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ChangeType>().Serialize(ref writer, value.ChangeType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_CharacterType>().Serialize(ref writer, value.ChangeClassType, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.NowCharacterID, options);
            writer.Write(value.ChangeCharacterID);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.NowSkillID, options);
            writer.Write(value.ChangeSkillID);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.NowItemID, options);
            writer.Write(value.ChangeItemID);
        }

        public global::GameDB.ClassChange_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __ClassChangeID__ = default(uint);
            var __ChangeType__ = default(global::GameDB.E_ChangeType);
            var __ChangeClassType__ = default(global::GameDB.E_CharacterType);
            var __NowCharacterID__ = default(global::System.Collections.Generic.List<uint>);
            var __ChangeCharacterID__ = default(uint);
            var __NowSkillID__ = default(global::System.Collections.Generic.List<uint>);
            var __ChangeSkillID__ = default(uint);
            var __NowItemID__ = default(global::System.Collections.Generic.List<uint>);
            var __ChangeItemID__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __ClassChangeID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __ChangeType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ChangeType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __ChangeClassType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_CharacterType>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __NowCharacterID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __ChangeCharacterID__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __NowSkillID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __ChangeSkillID__ = reader.ReadUInt32();
                        break;
                    case 7:
                        __NowItemID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __ChangeItemID__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.ClassChange_Table();
            ____result.ClassChangeID = __ClassChangeID__;
            ____result.ChangeType = __ChangeType__;
            ____result.ChangeClassType = __ChangeClassType__;
            ____result.NowCharacterID = __NowCharacterID__;
            ____result.ChangeCharacterID = __ChangeCharacterID__;
            ____result.NowSkillID = __NowSkillID__;
            ____result.ChangeSkillID = __ChangeSkillID__;
            ____result.NowItemID = __NowItemID__;
            ____result.ChangeItemID = __ChangeItemID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ColoSeasonReward_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.ColoSeasonReward_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.ColoSeasonReward_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            writer.Write(value.SeasonID);
            writer.Write(value.SeasonStart);
            writer.Write(value.SeasonEnd);
            writer.Write(value.Grade);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.SeasonEndRewardItem, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.SeasonEndRewardCnt, options);
        }

        public global::GameDB.ColoSeasonReward_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __SeasonID__ = default(uint);
            var __SeasonStart__ = default(ulong);
            var __SeasonEnd__ = default(ulong);
            var __Grade__ = default(byte);
            var __SeasonEndRewardItem__ = default(global::System.Collections.Generic.List<uint>);
            var __SeasonEndRewardCnt__ = default(global::System.Collections.Generic.List<uint>);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __SeasonID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __SeasonStart__ = reader.ReadUInt64();
                        break;
                    case 2:
                        __SeasonEnd__ = reader.ReadUInt64();
                        break;
                    case 3:
                        __Grade__ = reader.ReadByte();
                        break;
                    case 4:
                        __SeasonEndRewardItem__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __SeasonEndRewardCnt__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.ColoSeasonReward_Table();
            ____result.SeasonID = __SeasonID__;
            ____result.SeasonStart = __SeasonStart__;
            ____result.SeasonEnd = __SeasonEnd__;
            ____result.Grade = __Grade__;
            ____result.SeasonEndRewardItem = __SeasonEndRewardItem__;
            ____result.SeasonEndRewardCnt = __SeasonEndRewardCnt__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Colosseum_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Colosseum_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Colosseum_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(17);
            writer.Write(value.Grade);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.GradeIcon, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.GradeEffect, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.GradeName, options);
            writer.Write(value.ColosseumPoint);
            writer.Write(value.Rank);
            writer.Write(value.WinPoint);
            writer.Write(value.LosePoint);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.WinRewardItem, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.WinRewardCnt, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.LoseRewardItem, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.LoseRewardCnt, options);
            writer.Write(value.MaxRewardCnt);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.WinGuildItem, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.WinGuildCnt, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.LoseGuildItem, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.LoseGuildCnt, options);
        }

        public global::GameDB.Colosseum_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Grade__ = default(byte);
            var __GradeIcon__ = default(string);
            var __GradeEffect__ = default(string);
            var __GradeName__ = default(string);
            var __ColosseumPoint__ = default(uint);
            var __Rank__ = default(uint);
            var __WinPoint__ = default(uint);
            var __LosePoint__ = default(int);
            var __WinRewardItem__ = default(global::System.Collections.Generic.List<uint>);
            var __WinRewardCnt__ = default(global::System.Collections.Generic.List<uint>);
            var __LoseRewardItem__ = default(global::System.Collections.Generic.List<uint>);
            var __LoseRewardCnt__ = default(global::System.Collections.Generic.List<uint>);
            var __MaxRewardCnt__ = default(uint);
            var __WinGuildItem__ = default(global::System.Collections.Generic.List<uint>);
            var __WinGuildCnt__ = default(global::System.Collections.Generic.List<uint>);
            var __LoseGuildItem__ = default(global::System.Collections.Generic.List<uint>);
            var __LoseGuildCnt__ = default(global::System.Collections.Generic.List<uint>);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Grade__ = reader.ReadByte();
                        break;
                    case 1:
                        __GradeIcon__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __GradeEffect__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __GradeName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __ColosseumPoint__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __Rank__ = reader.ReadUInt32();
                        break;
                    case 6:
                        __WinPoint__ = reader.ReadUInt32();
                        break;
                    case 7:
                        __LosePoint__ = reader.ReadInt32();
                        break;
                    case 8:
                        __WinRewardItem__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __WinRewardCnt__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __LoseRewardItem__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __LoseRewardCnt__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __MaxRewardCnt__ = reader.ReadUInt32();
                        break;
                    case 13:
                        __WinGuildItem__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 14:
                        __WinGuildCnt__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        __LoseGuildItem__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 16:
                        __LoseGuildCnt__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Colosseum_Table();
            ____result.Grade = __Grade__;
            ____result.GradeIcon = __GradeIcon__;
            ____result.GradeEffect = __GradeEffect__;
            ____result.GradeName = __GradeName__;
            ____result.ColosseumPoint = __ColosseumPoint__;
            ____result.Rank = __Rank__;
            ____result.WinPoint = __WinPoint__;
            ____result.LosePoint = __LosePoint__;
            ____result.WinRewardItem = __WinRewardItem__;
            ____result.WinRewardCnt = __WinRewardCnt__;
            ____result.LoseRewardItem = __LoseRewardItem__;
            ____result.LoseRewardCnt = __LoseRewardCnt__;
            ____result.MaxRewardCnt = __MaxRewardCnt__;
            ____result.WinGuildItem = __WinGuildItem__;
            ____result.WinGuildCnt = __WinGuildCnt__;
            ____result.LoseGuildItem = __LoseGuildItem__;
            ____result.LoseGuildCnt = __LoseGuildCnt__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Config_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Config_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Config_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.StringName, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Type, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Value, options);
        }

        public global::GameDB.Config_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __StringName__ = default(string);
            var __Type__ = default(string);
            var __Value__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __StringName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Type__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Value__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Config_Table();
            ____result.StringName = __StringName__;
            ____result.Type = __Type__;
            ____result.Value = __Value__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Cooking_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Cooking_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Cooking_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(19);
            writer.Write(value.CookingID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_UnusedType>().Serialize(ref writer, value.UnusedType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.CookingRecipeTitle, options);
            writer.Write(value.PositionNumber);
            writer.Write(value.CookingCharLevel);
            writer.Write(value.CookingTime);
            writer.Write(value.CookingMaterialCount);
            writer.Write(value.MaterialItemID_1);
            writer.Write(value.MaterialItemID_2);
            writer.Write(value.MaterialItemID_3);
            writer.Write(value.MaterialItemID_4);
            writer.Write(value.MaterialItemID_5);
            writer.Write(value.MaterialItemID_6);
            writer.Write(value.GoldCount);
            writer.Write(value.GreatSuccessRate);
            writer.Write(value.SuccessGetItemID);
            writer.Write(value.SuccessGetItemCount);
            writer.Write(value.GSuccessGetItemID);
            writer.Write(value.GSuccessGetItemCount);
        }

        public global::GameDB.Cooking_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __CookingID__ = default(uint);
            var __UnusedType__ = default(global::GameDB.E_UnusedType);
            var __CookingRecipeTitle__ = default(string);
            var __PositionNumber__ = default(uint);
            var __CookingCharLevel__ = default(byte);
            var __CookingTime__ = default(byte);
            var __CookingMaterialCount__ = default(byte);
            var __MaterialItemID_1__ = default(uint);
            var __MaterialItemID_2__ = default(uint);
            var __MaterialItemID_3__ = default(uint);
            var __MaterialItemID_4__ = default(uint);
            var __MaterialItemID_5__ = default(uint);
            var __MaterialItemID_6__ = default(uint);
            var __GoldCount__ = default(uint);
            var __GreatSuccessRate__ = default(uint);
            var __SuccessGetItemID__ = default(uint);
            var __SuccessGetItemCount__ = default(uint);
            var __GSuccessGetItemID__ = default(uint);
            var __GSuccessGetItemCount__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __CookingID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __UnusedType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_UnusedType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __CookingRecipeTitle__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __PositionNumber__ = reader.ReadUInt32();
                        break;
                    case 4:
                        __CookingCharLevel__ = reader.ReadByte();
                        break;
                    case 5:
                        __CookingTime__ = reader.ReadByte();
                        break;
                    case 6:
                        __CookingMaterialCount__ = reader.ReadByte();
                        break;
                    case 7:
                        __MaterialItemID_1__ = reader.ReadUInt32();
                        break;
                    case 8:
                        __MaterialItemID_2__ = reader.ReadUInt32();
                        break;
                    case 9:
                        __MaterialItemID_3__ = reader.ReadUInt32();
                        break;
                    case 10:
                        __MaterialItemID_4__ = reader.ReadUInt32();
                        break;
                    case 11:
                        __MaterialItemID_5__ = reader.ReadUInt32();
                        break;
                    case 12:
                        __MaterialItemID_6__ = reader.ReadUInt32();
                        break;
                    case 13:
                        __GoldCount__ = reader.ReadUInt32();
                        break;
                    case 14:
                        __GreatSuccessRate__ = reader.ReadUInt32();
                        break;
                    case 15:
                        __SuccessGetItemID__ = reader.ReadUInt32();
                        break;
                    case 16:
                        __SuccessGetItemCount__ = reader.ReadUInt32();
                        break;
                    case 17:
                        __GSuccessGetItemID__ = reader.ReadUInt32();
                        break;
                    case 18:
                        __GSuccessGetItemCount__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Cooking_Table();
            ____result.CookingID = __CookingID__;
            ____result.UnusedType = __UnusedType__;
            ____result.CookingRecipeTitle = __CookingRecipeTitle__;
            ____result.PositionNumber = __PositionNumber__;
            ____result.CookingCharLevel = __CookingCharLevel__;
            ____result.CookingTime = __CookingTime__;
            ____result.CookingMaterialCount = __CookingMaterialCount__;
            ____result.MaterialItemID_1 = __MaterialItemID_1__;
            ____result.MaterialItemID_2 = __MaterialItemID_2__;
            ____result.MaterialItemID_3 = __MaterialItemID_3__;
            ____result.MaterialItemID_4 = __MaterialItemID_4__;
            ____result.MaterialItemID_5 = __MaterialItemID_5__;
            ____result.MaterialItemID_6 = __MaterialItemID_6__;
            ____result.GoldCount = __GoldCount__;
            ____result.GreatSuccessRate = __GreatSuccessRate__;
            ____result.SuccessGetItemID = __SuccessGetItemID__;
            ____result.SuccessGetItemCount = __SuccessGetItemCount__;
            ____result.GSuccessGetItemID = __GSuccessGetItemID__;
            ____result.GSuccessGetItemCount = __GSuccessGetItemCount__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CouponGroup_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.CouponGroup_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.CouponGroup_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            writer.Write(value.CouponID);
            writer.Write(value.CouponGroup);
            writer.Write(value.ItemID);
            writer.Write(value.ItemCnt);
        }

        public global::GameDB.CouponGroup_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __CouponID__ = default(uint);
            var __CouponGroup__ = default(uint);
            var __ItemID__ = default(uint);
            var __ItemCnt__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __CouponID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __CouponGroup__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __ItemID__ = reader.ReadUInt32();
                        break;
                    case 3:
                        __ItemCnt__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.CouponGroup_Table();
            ____result.CouponID = __CouponID__;
            ____result.CouponGroup = __CouponGroup__;
            ____result.ItemID = __ItemID__;
            ____result.ItemCnt = __ItemCnt__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DailyQuest_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.DailyQuest_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.DailyQuest_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(9);
            writer.Write(value.DailyQuestID);
            writer.Write(value.OpenLevel);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_QuestGradeType>().Serialize(ref writer, value.QuestGradeType, options);
            writer.Write(value.QuestAcquireRate);
            writer.Write(value.GroupID);
            writer.Write(value.ExpCount);
            writer.Write(value.GoldCount);
            writer.Write(value.RewardID);
            writer.Write(value.RewardCount);
        }

        public global::GameDB.DailyQuest_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __DailyQuestID__ = default(uint);
            var __OpenLevel__ = default(uint);
            var __QuestGradeType__ = default(global::GameDB.E_QuestGradeType);
            var __QuestAcquireRate__ = default(uint);
            var __GroupID__ = default(uint);
            var __ExpCount__ = default(uint);
            var __GoldCount__ = default(uint);
            var __RewardID__ = default(uint);
            var __RewardCount__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __DailyQuestID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __OpenLevel__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __QuestGradeType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_QuestGradeType>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __QuestAcquireRate__ = reader.ReadUInt32();
                        break;
                    case 4:
                        __GroupID__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __ExpCount__ = reader.ReadUInt32();
                        break;
                    case 6:
                        __GoldCount__ = reader.ReadUInt32();
                        break;
                    case 7:
                        __RewardID__ = reader.ReadUInt32();
                        break;
                    case 8:
                        __RewardCount__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.DailyQuest_Table();
            ____result.DailyQuestID = __DailyQuestID__;
            ____result.OpenLevel = __OpenLevel__;
            ____result.QuestGradeType = __QuestGradeType__;
            ____result.QuestAcquireRate = __QuestAcquireRate__;
            ____result.GroupID = __GroupID__;
            ____result.ExpCount = __ExpCount__;
            ____result.GoldCount = __GoldCount__;
            ____result.RewardID = __RewardID__;
            ____result.RewardCount = __RewardCount__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DailyQuestList_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.DailyQuestList_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.DailyQuestList_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(11);
            writer.Write(value.DailyQuestListID);
            writer.Write(value.GroupID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.TextID, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_DailyQuestType>().Serialize(ref writer, value.DailyQuestType, options);
            writer.Write(value.QuestAcquireRate);
            writer.Write(value.MissionConditionID);
            writer.Write(value.MissionMinCount);
            writer.Write(value.MissionMaxCount);
            writer.Write(value.CountUnit);
            writer.Write(value.ShortCutID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_UIShortCut>().Serialize(ref writer, value.UIShortCut, options);
        }

        public global::GameDB.DailyQuestList_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __DailyQuestListID__ = default(uint);
            var __GroupID__ = default(uint);
            var __TextID__ = default(string);
            var __DailyQuestType__ = default(global::GameDB.E_DailyQuestType);
            var __QuestAcquireRate__ = default(uint);
            var __MissionConditionID__ = default(uint);
            var __MissionMinCount__ = default(uint);
            var __MissionMaxCount__ = default(uint);
            var __CountUnit__ = default(uint);
            var __ShortCutID__ = default(uint);
            var __UIShortCut__ = default(global::GameDB.E_UIShortCut);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __DailyQuestListID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __GroupID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __TextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __DailyQuestType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_DailyQuestType>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __QuestAcquireRate__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __MissionConditionID__ = reader.ReadUInt32();
                        break;
                    case 6:
                        __MissionMinCount__ = reader.ReadUInt32();
                        break;
                    case 7:
                        __MissionMaxCount__ = reader.ReadUInt32();
                        break;
                    case 8:
                        __CountUnit__ = reader.ReadUInt32();
                        break;
                    case 9:
                        __ShortCutID__ = reader.ReadUInt32();
                        break;
                    case 10:
                        __UIShortCut__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_UIShortCut>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.DailyQuestList_Table();
            ____result.DailyQuestListID = __DailyQuestListID__;
            ____result.GroupID = __GroupID__;
            ____result.TextID = __TextID__;
            ____result.DailyQuestType = __DailyQuestType__;
            ____result.QuestAcquireRate = __QuestAcquireRate__;
            ____result.MissionConditionID = __MissionConditionID__;
            ____result.MissionMinCount = __MissionMinCount__;
            ____result.MissionMaxCount = __MissionMaxCount__;
            ____result.CountUnit = __CountUnit__;
            ____result.ShortCutID = __ShortCutID__;
            ____result.UIShortCut = __UIShortCut__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DeathPenalty_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.DeathPenalty_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.DeathPenalty_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            writer.Write(value.DeathPenaltyID);
            writer.Write(value.MinTendencyCount);
            writer.Write(value.MaxTendencyCount);
            writer.Write(value.ExpRestoreCount);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.TendencyTextID, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.TendencyIcon, options);
        }

        public global::GameDB.DeathPenalty_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __DeathPenaltyID__ = default(uint);
            var __MinTendencyCount__ = default(int);
            var __MaxTendencyCount__ = default(int);
            var __ExpRestoreCount__ = default(uint);
            var __TendencyTextID__ = default(string);
            var __TendencyIcon__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __DeathPenaltyID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __MinTendencyCount__ = reader.ReadInt32();
                        break;
                    case 2:
                        __MaxTendencyCount__ = reader.ReadInt32();
                        break;
                    case 3:
                        __ExpRestoreCount__ = reader.ReadUInt32();
                        break;
                    case 4:
                        __TendencyTextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __TendencyIcon__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.DeathPenalty_Table();
            ____result.DeathPenaltyID = __DeathPenaltyID__;
            ____result.MinTendencyCount = __MinTendencyCount__;
            ____result.MaxTendencyCount = __MaxTendencyCount__;
            ____result.ExpRestoreCount = __ExpRestoreCount__;
            ____result.TendencyTextID = __TendencyTextID__;
            ____result.TendencyIcon = __TendencyIcon__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Dialogue_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Dialogue_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Dialogue_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(21);
            writer.Write(value.DialogueID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_DialogueType>().Serialize(ref writer, value.DialogueType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.DialogueNPCName, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.DialogueText, options);
            writer.Write(value.DialogueSelectGroup);
            writer.Write(value.SelectSequence);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.DialogueSelectText, options);
            writer.Write(value.DialogueNextID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_SelectRewardOrderType>().Serialize(ref writer, value.SelectRewardOrderType, options);
            writer.Write(value.SelectRewardOrder);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_DialogueAutoNextType>().Serialize(ref writer, value.DialogueAutoNextType, options);
            writer.Write(value.DialogueAutoNextTime);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_DialogueResourceType>().Serialize(ref writer, value.DialogueResourceType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.DialogueResource, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_DialogueSkipType>().Serialize(ref writer, value.DialogueSkipType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_DialogueBGType>().Serialize(ref writer, value.DialogueBGType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.GuideImage, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.GuideText, options);
            writer.Write(value.VoiceSoundID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_GuideType>().Serialize(ref writer, value.GuideType, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Serialize(ref writer, value.GuideParams, options);
        }

        public global::GameDB.Dialogue_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __DialogueID__ = default(uint);
            var __DialogueType__ = default(global::GameDB.E_DialogueType);
            var __DialogueNPCName__ = default(string);
            var __DialogueText__ = default(string);
            var __DialogueSelectGroup__ = default(uint);
            var __SelectSequence__ = default(uint);
            var __DialogueSelectText__ = default(string);
            var __DialogueNextID__ = default(uint);
            var __SelectRewardOrderType__ = default(global::GameDB.E_SelectRewardOrderType);
            var __SelectRewardOrder__ = default(uint);
            var __DialogueAutoNextType__ = default(global::GameDB.E_DialogueAutoNextType);
            var __DialogueAutoNextTime__ = default(uint);
            var __DialogueResourceType__ = default(global::GameDB.E_DialogueResourceType);
            var __DialogueResource__ = default(string);
            var __DialogueSkipType__ = default(global::GameDB.E_DialogueSkipType);
            var __DialogueBGType__ = default(global::GameDB.E_DialogueBGType);
            var __GuideImage__ = default(string);
            var __GuideText__ = default(string);
            var __VoiceSoundID__ = default(uint);
            var __GuideType__ = default(global::GameDB.E_GuideType);
            var __GuideParams__ = default(global::System.Collections.Generic.List<string>);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __DialogueID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __DialogueType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_DialogueType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __DialogueNPCName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __DialogueText__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __DialogueSelectGroup__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __SelectSequence__ = reader.ReadUInt32();
                        break;
                    case 6:
                        __DialogueSelectText__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __DialogueNextID__ = reader.ReadUInt32();
                        break;
                    case 8:
                        __SelectRewardOrderType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_SelectRewardOrderType>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __SelectRewardOrder__ = reader.ReadUInt32();
                        break;
                    case 10:
                        __DialogueAutoNextType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_DialogueAutoNextType>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __DialogueAutoNextTime__ = reader.ReadUInt32();
                        break;
                    case 12:
                        __DialogueResourceType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_DialogueResourceType>().Deserialize(ref reader, options);
                        break;
                    case 13:
                        __DialogueResource__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 14:
                        __DialogueSkipType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_DialogueSkipType>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        __DialogueBGType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_DialogueBGType>().Deserialize(ref reader, options);
                        break;
                    case 16:
                        __GuideImage__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 17:
                        __GuideText__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 18:
                        __VoiceSoundID__ = reader.ReadUInt32();
                        break;
                    case 19:
                        __GuideType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_GuideType>().Deserialize(ref reader, options);
                        break;
                    case 20:
                        __GuideParams__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Dialogue_Table();
            ____result.DialogueID = __DialogueID__;
            ____result.DialogueType = __DialogueType__;
            ____result.DialogueNPCName = __DialogueNPCName__;
            ____result.DialogueText = __DialogueText__;
            ____result.DialogueSelectGroup = __DialogueSelectGroup__;
            ____result.SelectSequence = __SelectSequence__;
            ____result.DialogueSelectText = __DialogueSelectText__;
            ____result.DialogueNextID = __DialogueNextID__;
            ____result.SelectRewardOrderType = __SelectRewardOrderType__;
            ____result.SelectRewardOrder = __SelectRewardOrder__;
            ____result.DialogueAutoNextType = __DialogueAutoNextType__;
            ____result.DialogueAutoNextTime = __DialogueAutoNextTime__;
            ____result.DialogueResourceType = __DialogueResourceType__;
            ____result.DialogueResource = __DialogueResource__;
            ____result.DialogueSkipType = __DialogueSkipType__;
            ____result.DialogueBGType = __DialogueBGType__;
            ____result.GuideImage = __GuideImage__;
            ____result.GuideText = __GuideText__;
            ____result.VoiceSoundID = __VoiceSoundID__;
            ____result.GuideType = __GuideType__;
            ____result.GuideParams = __GuideParams__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DropGroup_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.DropGroup_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.DropGroup_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(7);
            writer.Write(value.DropID);
            writer.Write(value.DropGroupID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_DropType>().Serialize(ref writer, value.DropType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_RuneSetType>().Serialize(ref writer, value.RuneSetType, options);
            writer.Write(value.DropItemID);
            writer.Write(value.DropItemCnt);
            writer.Write(value.DropRate);
        }

        public global::GameDB.DropGroup_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __DropID__ = default(uint);
            var __DropGroupID__ = default(uint);
            var __DropType__ = default(global::GameDB.E_DropType);
            var __RuneSetType__ = default(global::GameDB.E_RuneSetType);
            var __DropItemID__ = default(uint);
            var __DropItemCnt__ = default(uint);
            var __DropRate__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __DropID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __DropGroupID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __DropType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_DropType>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __RuneSetType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_RuneSetType>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __DropItemID__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __DropItemCnt__ = reader.ReadUInt32();
                        break;
                    case 6:
                        __DropRate__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.DropGroup_Table();
            ____result.DropID = __DropID__;
            ____result.DropGroupID = __DropGroupID__;
            ____result.DropType = __DropType__;
            ____result.RuneSetType = __RuneSetType__;
            ____result.DropItemID = __DropItemID__;
            ____result.DropItemCnt = __DropItemCnt__;
            ____result.DropRate = __DropRate__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Effect_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Effect_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Effect_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(9);
            writer.Write(value.EffectID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.EffectFile, options);
            writer.Write(value.EffectSize);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_EffectType>().Serialize(ref writer, value.EffectType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_PlayType>().Serialize(ref writer, value.PlayType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ModelSocket>().Serialize(ref writer, value.ModelSocket, options);
            writer.Write(value.EffectSoundID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_EffectOffsetType>().Serialize(ref writer, value.EffectOffsetType, options);
            writer.Write(value.EffectDelayTime);
        }

        public global::GameDB.Effect_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __EffectID__ = default(uint);
            var __EffectFile__ = default(string);
            var __EffectSize__ = default(uint);
            var __EffectType__ = default(global::GameDB.E_EffectType);
            var __PlayType__ = default(global::GameDB.E_PlayType);
            var __ModelSocket__ = default(global::GameDB.E_ModelSocket);
            var __EffectSoundID__ = default(uint);
            var __EffectOffsetType__ = default(global::GameDB.E_EffectOffsetType);
            var __EffectDelayTime__ = default(float);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __EffectID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __EffectFile__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __EffectSize__ = reader.ReadUInt32();
                        break;
                    case 3:
                        __EffectType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_EffectType>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __PlayType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_PlayType>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __ModelSocket__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ModelSocket>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __EffectSoundID__ = reader.ReadUInt32();
                        break;
                    case 7:
                        __EffectOffsetType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_EffectOffsetType>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __EffectDelayTime__ = reader.ReadSingle();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Effect_Table();
            ____result.EffectID = __EffectID__;
            ____result.EffectFile = __EffectFile__;
            ____result.EffectSize = __EffectSize__;
            ____result.EffectType = __EffectType__;
            ____result.PlayType = __PlayType__;
            ____result.ModelSocket = __ModelSocket__;
            ____result.EffectSoundID = __EffectSoundID__;
            ____result.EffectOffsetType = __EffectOffsetType__;
            ____result.EffectDelayTime = __EffectDelayTime__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Emoticon_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Emoticon_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Emoticon_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            writer.Write(value.EmoticonID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.EmoticonFile, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.EmoticonTextID, options);
        }

        public global::GameDB.Emoticon_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __EmoticonID__ = default(uint);
            var __EmoticonFile__ = default(string);
            var __EmoticonTextID__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __EmoticonID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __EmoticonFile__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __EmoticonTextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Emoticon_Table();
            ____result.EmoticonID = __EmoticonID__;
            ____result.EmoticonFile = __EmoticonFile__;
            ____result.EmoticonTextID = __EmoticonTextID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EventList_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.EventList_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.EventList_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            writer.Write(value.EventID);
            writer.Write(value.EventGroupID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.EventKey, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.EventIcon, options);
        }

        public global::GameDB.EventList_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __EventID__ = default(uint);
            var __EventGroupID__ = default(uint);
            var __EventKey__ = default(string);
            var __EventIcon__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __EventID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __EventGroupID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __EventKey__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __EventIcon__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.EventList_Table();
            ____result.EventID = __EventID__;
            ____result.EventGroupID = __EventGroupID__;
            ____result.EventKey = __EventKey__;
            ____result.EventIcon = __EventIcon__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EventReward_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.EventReward_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.EventReward_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(17);
            writer.Write(value.RewardID);
            writer.Write(value.RewardGroupID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ServerEventSubCategory>().Serialize(ref writer, value.EventType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_PayAttendEventStep>().Serialize(ref writer, value.Step, options);
            writer.Write(value.TypeCount);
            writer.Write(value.No_Pass_ItemID_1);
            writer.Write(value.No_Pass_ItemCount_1);
            writer.Write(value.No_Pass_ItemID_2);
            writer.Write(value.No_Pass_ItemCount_2);
            writer.Write(value.One_Pass_ItemID_1);
            writer.Write(value.One_Pass_ItemCount_1);
            writer.Write(value.One_Pass_ItemID_2);
            writer.Write(value.One_Pass_ItemCount_2);
            writer.Write(value.Two_Pass_ItemID_1);
            writer.Write(value.Two_Pass_ItemCount_1);
            writer.Write(value.Two_Pass_ItemID_2);
            writer.Write(value.Two_Pass_ItemCount_2);
        }

        public global::GameDB.EventReward_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __RewardID__ = default(uint);
            var __RewardGroupID__ = default(uint);
            var __EventType__ = default(global::GameDB.E_ServerEventSubCategory);
            var __Step__ = default(global::GameDB.E_PayAttendEventStep);
            var __TypeCount__ = default(uint);
            var __No_Pass_ItemID_1__ = default(uint);
            var __No_Pass_ItemCount_1__ = default(uint);
            var __No_Pass_ItemID_2__ = default(uint);
            var __No_Pass_ItemCount_2__ = default(uint);
            var __One_Pass_ItemID_1__ = default(uint);
            var __One_Pass_ItemCount_1__ = default(uint);
            var __One_Pass_ItemID_2__ = default(uint);
            var __One_Pass_ItemCount_2__ = default(uint);
            var __Two_Pass_ItemID_1__ = default(uint);
            var __Two_Pass_ItemCount_1__ = default(uint);
            var __Two_Pass_ItemID_2__ = default(uint);
            var __Two_Pass_ItemCount_2__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __RewardID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __RewardGroupID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __EventType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ServerEventSubCategory>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Step__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_PayAttendEventStep>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __TypeCount__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __No_Pass_ItemID_1__ = reader.ReadUInt32();
                        break;
                    case 6:
                        __No_Pass_ItemCount_1__ = reader.ReadUInt32();
                        break;
                    case 7:
                        __No_Pass_ItemID_2__ = reader.ReadUInt32();
                        break;
                    case 8:
                        __No_Pass_ItemCount_2__ = reader.ReadUInt32();
                        break;
                    case 9:
                        __One_Pass_ItemID_1__ = reader.ReadUInt32();
                        break;
                    case 10:
                        __One_Pass_ItemCount_1__ = reader.ReadUInt32();
                        break;
                    case 11:
                        __One_Pass_ItemID_2__ = reader.ReadUInt32();
                        break;
                    case 12:
                        __One_Pass_ItemCount_2__ = reader.ReadUInt32();
                        break;
                    case 13:
                        __Two_Pass_ItemID_1__ = reader.ReadUInt32();
                        break;
                    case 14:
                        __Two_Pass_ItemCount_1__ = reader.ReadUInt32();
                        break;
                    case 15:
                        __Two_Pass_ItemID_2__ = reader.ReadUInt32();
                        break;
                    case 16:
                        __Two_Pass_ItemCount_2__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.EventReward_Table();
            ____result.RewardID = __RewardID__;
            ____result.RewardGroupID = __RewardGroupID__;
            ____result.EventType = __EventType__;
            ____result.Step = __Step__;
            ____result.TypeCount = __TypeCount__;
            ____result.No_Pass_ItemID_1 = __No_Pass_ItemID_1__;
            ____result.No_Pass_ItemCount_1 = __No_Pass_ItemCount_1__;
            ____result.No_Pass_ItemID_2 = __No_Pass_ItemID_2__;
            ____result.No_Pass_ItemCount_2 = __No_Pass_ItemCount_2__;
            ____result.One_Pass_ItemID_1 = __One_Pass_ItemID_1__;
            ____result.One_Pass_ItemCount_1 = __One_Pass_ItemCount_1__;
            ____result.One_Pass_ItemID_2 = __One_Pass_ItemID_2__;
            ____result.One_Pass_ItemCount_2 = __One_Pass_ItemCount_2__;
            ____result.Two_Pass_ItemID_1 = __Two_Pass_ItemID_1__;
            ____result.Two_Pass_ItemCount_1 = __Two_Pass_ItemCount_1__;
            ____result.Two_Pass_ItemID_2 = __Two_Pass_ItemID_2__;
            ____result.Two_Pass_ItemCount_2 = __Two_Pass_ItemCount_2__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Gacha_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Gacha_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Gacha_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            writer.Write(value.GachaListID);
            writer.Write(value.GroupID);
            writer.Write(value.ListGroupID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_RuneType>().Serialize(ref writer, value.RuneType, options);
            writer.Write(value.GetRate);
            writer.Write(value.UITipNo);
        }

        public global::GameDB.Gacha_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __GachaListID__ = default(uint);
            var __GroupID__ = default(uint);
            var __ListGroupID__ = default(uint);
            var __RuneType__ = default(global::GameDB.E_RuneType);
            var __GetRate__ = default(uint);
            var __UITipNo__ = default(byte);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __GachaListID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __GroupID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __ListGroupID__ = reader.ReadUInt32();
                        break;
                    case 3:
                        __RuneType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_RuneType>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __GetRate__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __UITipNo__ = reader.ReadByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Gacha_Table();
            ____result.GachaListID = __GachaListID__;
            ____result.GroupID = __GroupID__;
            ____result.ListGroupID = __ListGroupID__;
            ____result.RuneType = __RuneType__;
            ____result.GetRate = __GetRate__;
            ____result.UITipNo = __UITipNo__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GodBuff_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.GodBuff_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.GodBuff_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            writer.Write(value.GodbuffID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_GodBuffType>().Serialize(ref writer, value.GodBuffType, options);
            writer.Write(value.Stack);
            writer.Write(value.AbilityActionID_01);
            writer.Write(value.AbilityActionID_02);
        }

        public global::GameDB.GodBuff_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __GodbuffID__ = default(uint);
            var __GodBuffType__ = default(global::GameDB.E_GodBuffType);
            var __Stack__ = default(uint);
            var __AbilityActionID_01__ = default(uint);
            var __AbilityActionID_02__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __GodbuffID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __GodBuffType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_GodBuffType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Stack__ = reader.ReadUInt32();
                        break;
                    case 3:
                        __AbilityActionID_01__ = reader.ReadUInt32();
                        break;
                    case 4:
                        __AbilityActionID_02__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.GodBuff_Table();
            ____result.GodbuffID = __GodbuffID__;
            ____result.GodBuffType = __GodBuffType__;
            ____result.Stack = __Stack__;
            ____result.AbilityActionID_01 = __AbilityActionID_01__;
            ____result.AbilityActionID_02 = __AbilityActionID_02__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GodLand_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.GodLand_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.GodLand_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(25);
            writer.Write(value.GodLandID);
            writer.Write(value.SlotGroupID);
            writer.Write(value.LevelLimit);
            writer.Write(value.MapNumber);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.MapFileName, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.GodLandUpperTextID, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.GodLandTextID, options);
            writer.Write(value.DefaultMonsterID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Icon, options);
            writer.Write(value.ProductionItemID);
            writer.Write(value.ProductionItemCount);
            writer.Write(value.ProductionItemCountMax);
            writer.Write(value.ProductionTime);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Serialize(ref writer, value.LocalMapPosition, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Serialize(ref writer, value.WorldMapPosition, options);
            writer.Write(value.UseAbilityActionID_01);
            writer.Write(value.UseAbilityActionID_02);
            writer.Write(value.UseAbilityActionID_03);
            writer.Write(value.UseAbilityActionID_04);
            writer.Write(value.UseAbilityActionID_05);
            writer.Write(value.UseAbilityActionID_06);
            writer.Write(value.UseAbilityActionID_07);
            writer.Write(value.UseAbilityActionID_08);
            writer.Write(value.UseAbilityActionID_09);
            writer.Write(value.UseAbilityActionID_10);
        }

        public global::GameDB.GodLand_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __GodLandID__ = default(uint);
            var __SlotGroupID__ = default(uint);
            var __LevelLimit__ = default(uint);
            var __MapNumber__ = default(byte);
            var __MapFileName__ = default(string);
            var __GodLandUpperTextID__ = default(string);
            var __GodLandTextID__ = default(string);
            var __DefaultMonsterID__ = default(uint);
            var __Icon__ = default(string);
            var __ProductionItemID__ = default(uint);
            var __ProductionItemCount__ = default(uint);
            var __ProductionItemCountMax__ = default(uint);
            var __ProductionTime__ = default(uint);
            var __LocalMapPosition__ = default(global::System.Collections.Generic.List<int>);
            var __WorldMapPosition__ = default(global::System.Collections.Generic.List<int>);
            var __UseAbilityActionID_01__ = default(uint);
            var __UseAbilityActionID_02__ = default(uint);
            var __UseAbilityActionID_03__ = default(uint);
            var __UseAbilityActionID_04__ = default(uint);
            var __UseAbilityActionID_05__ = default(uint);
            var __UseAbilityActionID_06__ = default(uint);
            var __UseAbilityActionID_07__ = default(uint);
            var __UseAbilityActionID_08__ = default(uint);
            var __UseAbilityActionID_09__ = default(uint);
            var __UseAbilityActionID_10__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __GodLandID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __SlotGroupID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __LevelLimit__ = reader.ReadUInt32();
                        break;
                    case 3:
                        __MapNumber__ = reader.ReadByte();
                        break;
                    case 4:
                        __MapFileName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __GodLandUpperTextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __GodLandTextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __DefaultMonsterID__ = reader.ReadUInt32();
                        break;
                    case 8:
                        __Icon__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __ProductionItemID__ = reader.ReadUInt32();
                        break;
                    case 10:
                        __ProductionItemCount__ = reader.ReadUInt32();
                        break;
                    case 11:
                        __ProductionItemCountMax__ = reader.ReadUInt32();
                        break;
                    case 12:
                        __ProductionTime__ = reader.ReadUInt32();
                        break;
                    case 13:
                        __LocalMapPosition__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Deserialize(ref reader, options);
                        break;
                    case 14:
                        __WorldMapPosition__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        __UseAbilityActionID_01__ = reader.ReadUInt32();
                        break;
                    case 16:
                        __UseAbilityActionID_02__ = reader.ReadUInt32();
                        break;
                    case 17:
                        __UseAbilityActionID_03__ = reader.ReadUInt32();
                        break;
                    case 18:
                        __UseAbilityActionID_04__ = reader.ReadUInt32();
                        break;
                    case 19:
                        __UseAbilityActionID_05__ = reader.ReadUInt32();
                        break;
                    case 20:
                        __UseAbilityActionID_06__ = reader.ReadUInt32();
                        break;
                    case 21:
                        __UseAbilityActionID_07__ = reader.ReadUInt32();
                        break;
                    case 22:
                        __UseAbilityActionID_08__ = reader.ReadUInt32();
                        break;
                    case 23:
                        __UseAbilityActionID_09__ = reader.ReadUInt32();
                        break;
                    case 24:
                        __UseAbilityActionID_10__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.GodLand_Table();
            ____result.GodLandID = __GodLandID__;
            ____result.SlotGroupID = __SlotGroupID__;
            ____result.LevelLimit = __LevelLimit__;
            ____result.MapNumber = __MapNumber__;
            ____result.MapFileName = __MapFileName__;
            ____result.GodLandUpperTextID = __GodLandUpperTextID__;
            ____result.GodLandTextID = __GodLandTextID__;
            ____result.DefaultMonsterID = __DefaultMonsterID__;
            ____result.Icon = __Icon__;
            ____result.ProductionItemID = __ProductionItemID__;
            ____result.ProductionItemCount = __ProductionItemCount__;
            ____result.ProductionItemCountMax = __ProductionItemCountMax__;
            ____result.ProductionTime = __ProductionTime__;
            ____result.LocalMapPosition = __LocalMapPosition__;
            ____result.WorldMapPosition = __WorldMapPosition__;
            ____result.UseAbilityActionID_01 = __UseAbilityActionID_01__;
            ____result.UseAbilityActionID_02 = __UseAbilityActionID_02__;
            ____result.UseAbilityActionID_03 = __UseAbilityActionID_03__;
            ____result.UseAbilityActionID_04 = __UseAbilityActionID_04__;
            ____result.UseAbilityActionID_05 = __UseAbilityActionID_05__;
            ____result.UseAbilityActionID_06 = __UseAbilityActionID_06__;
            ____result.UseAbilityActionID_07 = __UseAbilityActionID_07__;
            ____result.UseAbilityActionID_08 = __UseAbilityActionID_08__;
            ____result.UseAbilityActionID_09 = __UseAbilityActionID_09__;
            ____result.UseAbilityActionID_10 = __UseAbilityActionID_10__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Guild_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Guild_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Guild_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(9);
            writer.Write(value.GuildID);
            writer.Write(value.GuildLevel);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_LevelUpType>().Serialize(ref writer, value.LevelUpType, options);
            writer.Write(value.LevelUpExp);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ContentsTextID, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.DungeonTextID, options);
            writer.Write(value.DungeonOpenCnt);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ShopTextID, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.BuffTextID, options);
        }

        public global::GameDB.Guild_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __GuildID__ = default(uint);
            var __GuildLevel__ = default(uint);
            var __LevelUpType__ = default(global::GameDB.E_LevelUpType);
            var __LevelUpExp__ = default(ulong);
            var __ContentsTextID__ = default(string);
            var __DungeonTextID__ = default(string);
            var __DungeonOpenCnt__ = default(byte);
            var __ShopTextID__ = default(string);
            var __BuffTextID__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __GuildID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __GuildLevel__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __LevelUpType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_LevelUpType>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __LevelUpExp__ = reader.ReadUInt64();
                        break;
                    case 4:
                        __ContentsTextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __DungeonTextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __DungeonOpenCnt__ = reader.ReadByte();
                        break;
                    case 7:
                        __ShopTextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __BuffTextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Guild_Table();
            ____result.GuildID = __GuildID__;
            ____result.GuildLevel = __GuildLevel__;
            ____result.LevelUpType = __LevelUpType__;
            ____result.LevelUpExp = __LevelUpExp__;
            ____result.ContentsTextID = __ContentsTextID__;
            ____result.DungeonTextID = __DungeonTextID__;
            ____result.DungeonOpenCnt = __DungeonOpenCnt__;
            ____result.ShopTextID = __ShopTextID__;
            ____result.BuffTextID = __BuffTextID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GuildBuff_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.GuildBuff_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.GuildBuff_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            writer.Write(value.GuildBuffID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.GuildBuffTextID, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_GuildBuffType>().Serialize(ref writer, value.GuildBuffType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.IconID, options);
            writer.Write(value.OpenLevel);
            writer.Write(value.AbilityActionID);
        }

        public global::GameDB.GuildBuff_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __GuildBuffID__ = default(uint);
            var __GuildBuffTextID__ = default(string);
            var __GuildBuffType__ = default(global::GameDB.E_GuildBuffType);
            var __IconID__ = default(string);
            var __OpenLevel__ = default(uint);
            var __AbilityActionID__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __GuildBuffID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __GuildBuffTextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __GuildBuffType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_GuildBuffType>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __IconID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __OpenLevel__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __AbilityActionID__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.GuildBuff_Table();
            ____result.GuildBuffID = __GuildBuffID__;
            ____result.GuildBuffTextID = __GuildBuffTextID__;
            ____result.GuildBuffType = __GuildBuffType__;
            ____result.IconID = __IconID__;
            ____result.OpenLevel = __OpenLevel__;
            ____result.AbilityActionID = __AbilityActionID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GuildMark_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.GuildMark_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.GuildMark_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            writer.Write(value.GuildMarkID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.GuildMarkFile, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.GuildMarkSmallFile, options);
            writer.Write(value.GuildLevel);
        }

        public global::GameDB.GuildMark_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __GuildMarkID__ = default(byte);
            var __GuildMarkFile__ = default(string);
            var __GuildMarkSmallFile__ = default(string);
            var __GuildLevel__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __GuildMarkID__ = reader.ReadByte();
                        break;
                    case 1:
                        __GuildMarkFile__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __GuildMarkSmallFile__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __GuildLevel__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.GuildMark_Table();
            ____result.GuildMarkID = __GuildMarkID__;
            ____result.GuildMarkFile = __GuildMarkFile__;
            ____result.GuildMarkSmallFile = __GuildMarkSmallFile__;
            ____result.GuildLevel = __GuildLevel__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class InfiBuff_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.InfiBuff_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.InfiBuff_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            writer.Write(value.InfiBuffID);
            writer.Write(value.InfiBuffGroupID);
            writer.Write(value.InfiBuffRate);
            writer.Write(value.AbilityActionID);
        }

        public global::GameDB.InfiBuff_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __InfiBuffID__ = default(uint);
            var __InfiBuffGroupID__ = default(uint);
            var __InfiBuffRate__ = default(uint);
            var __AbilityActionID__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __InfiBuffID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __InfiBuffGroupID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __InfiBuffRate__ = reader.ReadUInt32();
                        break;
                    case 3:
                        __AbilityActionID__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.InfiBuff_Table();
            ____result.InfiBuffID = __InfiBuffID__;
            ____result.InfiBuffGroupID = __InfiBuffGroupID__;
            ____result.InfiBuffRate = __InfiBuffRate__;
            ____result.AbilityActionID = __AbilityActionID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class InfinityDungeon_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.InfinityDungeon_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.InfinityDungeon_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(19);
            writer.Write(value.DungeonID);
            writer.Write(value.StageID);
            writer.Write(value.InfinityDungeonGroupID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_DungeonType>().Serialize(ref writer, value.DungeonType, options);
            writer.Write(value.StageLevel);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.StageLevelName, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.StageName, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_StageClearType>().Serialize(ref writer, value.StageClearType, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Serialize(ref writer, value.NormalMonster, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.UseRanker, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.UseRankerName, options);
            writer.Write(value.ClearRewardExp);
            writer.Write(value.DayRewardExp);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.ClearRewardItemID, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.ClearRewardItemIDCnt, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.DayRewardItemID, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.DayRewardItemIDCnt, options);
            writer.Write(value.InfiBuffGroupID);
            writer.Write(value.InfiBuffCnt);
        }

        public global::GameDB.InfinityDungeon_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __DungeonID__ = default(uint);
            var __StageID__ = default(uint);
            var __InfinityDungeonGroupID__ = default(uint);
            var __DungeonType__ = default(global::GameDB.E_DungeonType);
            var __StageLevel__ = default(uint);
            var __StageLevelName__ = default(string);
            var __StageName__ = default(string);
            var __StageClearType__ = default(global::GameDB.E_StageClearType);
            var __NormalMonster__ = default(global::System.Collections.Generic.List<string>);
            var __UseRanker__ = default(string);
            var __UseRankerName__ = default(string);
            var __ClearRewardExp__ = default(uint);
            var __DayRewardExp__ = default(uint);
            var __ClearRewardItemID__ = default(global::System.Collections.Generic.List<uint>);
            var __ClearRewardItemIDCnt__ = default(global::System.Collections.Generic.List<uint>);
            var __DayRewardItemID__ = default(global::System.Collections.Generic.List<uint>);
            var __DayRewardItemIDCnt__ = default(global::System.Collections.Generic.List<uint>);
            var __InfiBuffGroupID__ = default(uint);
            var __InfiBuffCnt__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __DungeonID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __StageID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __InfinityDungeonGroupID__ = reader.ReadUInt32();
                        break;
                    case 3:
                        __DungeonType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_DungeonType>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __StageLevel__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __StageLevelName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __StageName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __StageClearType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_StageClearType>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __NormalMonster__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __UseRanker__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __UseRankerName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __ClearRewardExp__ = reader.ReadUInt32();
                        break;
                    case 12:
                        __DayRewardExp__ = reader.ReadUInt32();
                        break;
                    case 13:
                        __ClearRewardItemID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 14:
                        __ClearRewardItemIDCnt__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        __DayRewardItemID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 16:
                        __DayRewardItemIDCnt__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 17:
                        __InfiBuffGroupID__ = reader.ReadUInt32();
                        break;
                    case 18:
                        __InfiBuffCnt__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.InfinityDungeon_Table();
            ____result.DungeonID = __DungeonID__;
            ____result.StageID = __StageID__;
            ____result.InfinityDungeonGroupID = __InfinityDungeonGroupID__;
            ____result.DungeonType = __DungeonType__;
            ____result.StageLevel = __StageLevel__;
            ____result.StageLevelName = __StageLevelName__;
            ____result.StageName = __StageName__;
            ____result.StageClearType = __StageClearType__;
            ____result.NormalMonster = __NormalMonster__;
            ____result.UseRanker = __UseRanker__;
            ____result.UseRankerName = __UseRankerName__;
            ____result.ClearRewardExp = __ClearRewardExp__;
            ____result.DayRewardExp = __DayRewardExp__;
            ____result.ClearRewardItemID = __ClearRewardItemID__;
            ____result.ClearRewardItemIDCnt = __ClearRewardItemIDCnt__;
            ____result.DayRewardItemID = __DayRewardItemID__;
            ____result.DayRewardItemIDCnt = __DayRewardItemIDCnt__;
            ____result.InfiBuffGroupID = __InfiBuffGroupID__;
            ____result.InfiBuffCnt = __InfiBuffCnt__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class InfinitySchedule_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.InfinitySchedule_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.InfinitySchedule_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            writer.Write(value.InfinityScheduleID);
            writer.Write(value.InfinityDungeonGroupID);
            writer.Write(value.Start);
            writer.Write(value.End);
        }

        public global::GameDB.InfinitySchedule_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __InfinityScheduleID__ = default(uint);
            var __InfinityDungeonGroupID__ = default(uint);
            var __Start__ = default(ulong);
            var __End__ = default(ulong);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __InfinityScheduleID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __InfinityDungeonGroupID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __Start__ = reader.ReadUInt64();
                        break;
                    case 3:
                        __End__ = reader.ReadUInt64();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.InfinitySchedule_Table();
            ____result.InfinityScheduleID = __InfinityScheduleID__;
            ____result.InfinityDungeonGroupID = __InfinityDungeonGroupID__;
            ____result.Start = __Start__;
            ____result.End = __End__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Infor_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Infor_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Infor_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            writer.Write(value.InforID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.InforType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_UnusedType>().Serialize(ref writer, value.UnusedType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.InforTextID, options);
        }

        public global::GameDB.Infor_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __InforID__ = default(uint);
            var __InforType__ = default(string);
            var __UnusedType__ = default(global::GameDB.E_UnusedType);
            var __InforTextID__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __InforID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __InforType__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __UnusedType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_UnusedType>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __InforTextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Infor_Table();
            ____result.InforID = __InforID__;
            ____result.InforType = __InforType__;
            ____result.UnusedType = __UnusedType__;
            ____result.InforTextID = __InforTextID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Item_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Item_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Item_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(61);
            writer.Write(value.ItemID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ItemTextID, options);
            writer.Write(value.GroupID);
            writer.Write(value.ViewGroupID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ItemUseType>().Serialize(ref writer, value.ItemUseType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ItemType>().Serialize(ref writer, value.ItemType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ItemSubType>().Serialize(ref writer, value.ItemSubType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_TradeTapType>().Serialize(ref writer, value.TradeTapType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_TradeSubTapType>().Serialize(ref writer, value.TradeSubTapType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_UniqueType>().Serialize(ref writer, value.UniqueType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ItemStackType>().Serialize(ref writer, value.ItemStackType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_CharacterType>().Serialize(ref writer, value.UseCharacterType, options);
            writer.Write(value.Grade);
            writer.Write(value.Step);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_RuneGradeType>().Serialize(ref writer, value.RuneGradeType, options);
            writer.Write(value.LimitLevel);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.SocketData, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_SmeltScrollUseType>().Serialize(ref writer, value.SmeltScrollUseType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_EnchantUseType>().Serialize(ref writer, value.EnchantUseType, options);
            writer.Write(value.ItemEnchantID);
            writer.Write(value.StepUpID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_InvenUseType>().Serialize(ref writer, value.InvenUseType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_QuickSlotType>().Serialize(ref writer, value.QuickSlotType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_QuickSlotAutoType>().Serialize(ref writer, value.QuickSlotAutoType, options);
            writer.Write(value.Weight);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_EquipSlotType>().Serialize(ref writer, value.EquipSlotType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.IconID, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_BelongType>().Serialize(ref writer, value.BelongType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_LimitType>().Serialize(ref writer, value.LimitType, options);
            writer.Write(value.SellItemCount);
            writer.Write(value.BreakUseCount);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.BreakItemID, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.BreakItemCount, options);
            writer.Write(value.RuneliftItemCount);
            writer.Write(value.StorageItemCount);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.TooltipID, options);
            writer.Write(value.AbilityTipOff);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_GachaType>().Serialize(ref writer, value.GachaType, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.GachaGroupID, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.ShopListGroupID, options);
            writer.Write(value.RestorationGroup);
            writer.Write(value.MovePortalID);
            writer.Write(value.OpenSkillID);
            writer.Write(value.CoolTime);
            writer.Write(value.AbilityActionID_01);
            writer.Write(value.AbilityActionID_02);
            writer.Write(value.AbilityActionID_03);
            writer.Write(value.RuneBaseOptionID);
            writer.Write(value.RuneFirstOptionRate);
            writer.Write(value.RuneFirstOptionID);
            writer.Write(value.RuneSubOptionCount);
            writer.Write(value.RuneSubOptionID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_RuneSetType>().Serialize(ref writer, value.RuneSetType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_HaveSupportType>().Serialize(ref writer, value.HaveSupportType, options);
            writer.Write(value.HaveSupportTime);
            writer.Write(value.HaveEndTime);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_DropModelType>().Serialize(ref writer, value.DropModelType, options);
            writer.Write(value.DropEffectGrade);
            writer.Write(value.SoundID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.DropTip, options);
            writer.Write(value.TempleStageID);
        }

        public global::GameDB.Item_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __ItemID__ = default(uint);
            var __ItemTextID__ = default(string);
            var __GroupID__ = default(uint);
            var __ViewGroupID__ = default(uint);
            var __ItemUseType__ = default(global::GameDB.E_ItemUseType);
            var __ItemType__ = default(global::GameDB.E_ItemType);
            var __ItemSubType__ = default(global::GameDB.E_ItemSubType);
            var __TradeTapType__ = default(global::GameDB.E_TradeTapType);
            var __TradeSubTapType__ = default(global::GameDB.E_TradeSubTapType);
            var __UniqueType__ = default(global::GameDB.E_UniqueType);
            var __ItemStackType__ = default(global::GameDB.E_ItemStackType);
            var __UseCharacterType__ = default(global::GameDB.E_CharacterType);
            var __Grade__ = default(byte);
            var __Step__ = default(byte);
            var __RuneGradeType__ = default(global::GameDB.E_RuneGradeType);
            var __LimitLevel__ = default(byte);
            var __SocketData__ = default(global::System.Collections.Generic.List<uint>);
            var __SmeltScrollUseType__ = default(global::GameDB.E_SmeltScrollUseType);
            var __EnchantUseType__ = default(global::GameDB.E_EnchantUseType);
            var __ItemEnchantID__ = default(uint);
            var __StepUpID__ = default(uint);
            var __InvenUseType__ = default(global::GameDB.E_InvenUseType);
            var __QuickSlotType__ = default(global::GameDB.E_QuickSlotType);
            var __QuickSlotAutoType__ = default(global::GameDB.E_QuickSlotAutoType);
            var __Weight__ = default(float);
            var __EquipSlotType__ = default(global::GameDB.E_EquipSlotType);
            var __IconID__ = default(string);
            var __BelongType__ = default(global::GameDB.E_BelongType);
            var __LimitType__ = default(global::GameDB.E_LimitType);
            var __SellItemCount__ = default(uint);
            var __BreakUseCount__ = default(uint);
            var __BreakItemID__ = default(global::System.Collections.Generic.List<uint>);
            var __BreakItemCount__ = default(global::System.Collections.Generic.List<uint>);
            var __RuneliftItemCount__ = default(uint);
            var __StorageItemCount__ = default(uint);
            var __TooltipID__ = default(string);
            var __AbilityTipOff__ = default(byte);
            var __GachaType__ = default(global::GameDB.E_GachaType);
            var __GachaGroupID__ = default(global::System.Collections.Generic.List<uint>);
            var __ShopListGroupID__ = default(global::System.Collections.Generic.List<uint>);
            var __RestorationGroup__ = default(uint);
            var __MovePortalID__ = default(uint);
            var __OpenSkillID__ = default(uint);
            var __CoolTime__ = default(float);
            var __AbilityActionID_01__ = default(uint);
            var __AbilityActionID_02__ = default(uint);
            var __AbilityActionID_03__ = default(uint);
            var __RuneBaseOptionID__ = default(uint);
            var __RuneFirstOptionRate__ = default(uint);
            var __RuneFirstOptionID__ = default(uint);
            var __RuneSubOptionCount__ = default(byte);
            var __RuneSubOptionID__ = default(uint);
            var __RuneSetType__ = default(global::GameDB.E_RuneSetType);
            var __HaveSupportType__ = default(global::GameDB.E_HaveSupportType);
            var __HaveSupportTime__ = default(uint);
            var __HaveEndTime__ = default(ulong);
            var __DropModelType__ = default(global::GameDB.E_DropModelType);
            var __DropEffectGrade__ = default(byte);
            var __SoundID__ = default(uint);
            var __DropTip__ = default(string);
            var __TempleStageID__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __ItemID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __ItemTextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __GroupID__ = reader.ReadUInt32();
                        break;
                    case 3:
                        __ViewGroupID__ = reader.ReadUInt32();
                        break;
                    case 4:
                        __ItemUseType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ItemUseType>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __ItemType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ItemType>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __ItemSubType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ItemSubType>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __TradeTapType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_TradeTapType>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __TradeSubTapType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_TradeSubTapType>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __UniqueType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_UniqueType>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __ItemStackType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ItemStackType>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __UseCharacterType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_CharacterType>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __Grade__ = reader.ReadByte();
                        break;
                    case 13:
                        __Step__ = reader.ReadByte();
                        break;
                    case 14:
                        __RuneGradeType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_RuneGradeType>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        __LimitLevel__ = reader.ReadByte();
                        break;
                    case 16:
                        __SocketData__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 17:
                        __SmeltScrollUseType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_SmeltScrollUseType>().Deserialize(ref reader, options);
                        break;
                    case 18:
                        __EnchantUseType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_EnchantUseType>().Deserialize(ref reader, options);
                        break;
                    case 19:
                        __ItemEnchantID__ = reader.ReadUInt32();
                        break;
                    case 20:
                        __StepUpID__ = reader.ReadUInt32();
                        break;
                    case 21:
                        __InvenUseType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_InvenUseType>().Deserialize(ref reader, options);
                        break;
                    case 22:
                        __QuickSlotType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_QuickSlotType>().Deserialize(ref reader, options);
                        break;
                    case 23:
                        __QuickSlotAutoType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_QuickSlotAutoType>().Deserialize(ref reader, options);
                        break;
                    case 24:
                        __Weight__ = reader.ReadSingle();
                        break;
                    case 25:
                        __EquipSlotType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_EquipSlotType>().Deserialize(ref reader, options);
                        break;
                    case 26:
                        __IconID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 27:
                        __BelongType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_BelongType>().Deserialize(ref reader, options);
                        break;
                    case 28:
                        __LimitType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_LimitType>().Deserialize(ref reader, options);
                        break;
                    case 29:
                        __SellItemCount__ = reader.ReadUInt32();
                        break;
                    case 30:
                        __BreakUseCount__ = reader.ReadUInt32();
                        break;
                    case 31:
                        __BreakItemID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 32:
                        __BreakItemCount__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 33:
                        __RuneliftItemCount__ = reader.ReadUInt32();
                        break;
                    case 34:
                        __StorageItemCount__ = reader.ReadUInt32();
                        break;
                    case 35:
                        __TooltipID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 36:
                        __AbilityTipOff__ = reader.ReadByte();
                        break;
                    case 37:
                        __GachaType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_GachaType>().Deserialize(ref reader, options);
                        break;
                    case 38:
                        __GachaGroupID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 39:
                        __ShopListGroupID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 40:
                        __RestorationGroup__ = reader.ReadUInt32();
                        break;
                    case 41:
                        __MovePortalID__ = reader.ReadUInt32();
                        break;
                    case 42:
                        __OpenSkillID__ = reader.ReadUInt32();
                        break;
                    case 43:
                        __CoolTime__ = reader.ReadSingle();
                        break;
                    case 44:
                        __AbilityActionID_01__ = reader.ReadUInt32();
                        break;
                    case 45:
                        __AbilityActionID_02__ = reader.ReadUInt32();
                        break;
                    case 46:
                        __AbilityActionID_03__ = reader.ReadUInt32();
                        break;
                    case 47:
                        __RuneBaseOptionID__ = reader.ReadUInt32();
                        break;
                    case 48:
                        __RuneFirstOptionRate__ = reader.ReadUInt32();
                        break;
                    case 49:
                        __RuneFirstOptionID__ = reader.ReadUInt32();
                        break;
                    case 50:
                        __RuneSubOptionCount__ = reader.ReadByte();
                        break;
                    case 51:
                        __RuneSubOptionID__ = reader.ReadUInt32();
                        break;
                    case 52:
                        __RuneSetType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_RuneSetType>().Deserialize(ref reader, options);
                        break;
                    case 53:
                        __HaveSupportType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_HaveSupportType>().Deserialize(ref reader, options);
                        break;
                    case 54:
                        __HaveSupportTime__ = reader.ReadUInt32();
                        break;
                    case 55:
                        __HaveEndTime__ = reader.ReadUInt64();
                        break;
                    case 56:
                        __DropModelType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_DropModelType>().Deserialize(ref reader, options);
                        break;
                    case 57:
                        __DropEffectGrade__ = reader.ReadByte();
                        break;
                    case 58:
                        __SoundID__ = reader.ReadUInt32();
                        break;
                    case 59:
                        __DropTip__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 60:
                        __TempleStageID__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Item_Table();
            ____result.ItemID = __ItemID__;
            ____result.ItemTextID = __ItemTextID__;
            ____result.GroupID = __GroupID__;
            ____result.ViewGroupID = __ViewGroupID__;
            ____result.ItemUseType = __ItemUseType__;
            ____result.ItemType = __ItemType__;
            ____result.ItemSubType = __ItemSubType__;
            ____result.TradeTapType = __TradeTapType__;
            ____result.TradeSubTapType = __TradeSubTapType__;
            ____result.UniqueType = __UniqueType__;
            ____result.ItemStackType = __ItemStackType__;
            ____result.UseCharacterType = __UseCharacterType__;
            ____result.Grade = __Grade__;
            ____result.Step = __Step__;
            ____result.RuneGradeType = __RuneGradeType__;
            ____result.LimitLevel = __LimitLevel__;
            ____result.SocketData = __SocketData__;
            ____result.SmeltScrollUseType = __SmeltScrollUseType__;
            ____result.EnchantUseType = __EnchantUseType__;
            ____result.ItemEnchantID = __ItemEnchantID__;
            ____result.StepUpID = __StepUpID__;
            ____result.InvenUseType = __InvenUseType__;
            ____result.QuickSlotType = __QuickSlotType__;
            ____result.QuickSlotAutoType = __QuickSlotAutoType__;
            ____result.Weight = __Weight__;
            ____result.EquipSlotType = __EquipSlotType__;
            ____result.IconID = __IconID__;
            ____result.BelongType = __BelongType__;
            ____result.LimitType = __LimitType__;
            ____result.SellItemCount = __SellItemCount__;
            ____result.BreakUseCount = __BreakUseCount__;
            ____result.BreakItemID = __BreakItemID__;
            ____result.BreakItemCount = __BreakItemCount__;
            ____result.RuneliftItemCount = __RuneliftItemCount__;
            ____result.StorageItemCount = __StorageItemCount__;
            ____result.TooltipID = __TooltipID__;
            ____result.AbilityTipOff = __AbilityTipOff__;
            ____result.GachaType = __GachaType__;
            ____result.GachaGroupID = __GachaGroupID__;
            ____result.ShopListGroupID = __ShopListGroupID__;
            ____result.RestorationGroup = __RestorationGroup__;
            ____result.MovePortalID = __MovePortalID__;
            ____result.OpenSkillID = __OpenSkillID__;
            ____result.CoolTime = __CoolTime__;
            ____result.AbilityActionID_01 = __AbilityActionID_01__;
            ____result.AbilityActionID_02 = __AbilityActionID_02__;
            ____result.AbilityActionID_03 = __AbilityActionID_03__;
            ____result.RuneBaseOptionID = __RuneBaseOptionID__;
            ____result.RuneFirstOptionRate = __RuneFirstOptionRate__;
            ____result.RuneFirstOptionID = __RuneFirstOptionID__;
            ____result.RuneSubOptionCount = __RuneSubOptionCount__;
            ____result.RuneSubOptionID = __RuneSubOptionID__;
            ____result.RuneSetType = __RuneSetType__;
            ____result.HaveSupportType = __HaveSupportType__;
            ____result.HaveSupportTime = __HaveSupportTime__;
            ____result.HaveEndTime = __HaveEndTime__;
            ____result.DropModelType = __DropModelType__;
            ____result.DropEffectGrade = __DropEffectGrade__;
            ____result.SoundID = __SoundID__;
            ____result.DropTip = __DropTip__;
            ____result.TempleStageID = __TempleStageID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ItemCollection_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.ItemCollection_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.ItemCollection_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(17);
            writer.Write(value.ItemCollectionID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ItemCollectionTextID, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_TapType>().Serialize(ref writer, value.TapType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_CollectionType>().Serialize(ref writer, value.CollectionType, options);
            writer.Write(value.Sort);
            writer.Write(value.CollectionItemCount);
            writer.Write(value.CollectionItemID_01);
            writer.Write(value.CollectionItemID_02);
            writer.Write(value.CollectionItemID_03);
            writer.Write(value.CollectionItemID_04);
            writer.Write(value.CollectionItemID_05);
            writer.Write(value.CollectionItemID_06);
            writer.Write(value.CollectionItemID_07);
            writer.Write(value.CollectionItemID_08);
            writer.Write(value.AbilityActionID_01);
            writer.Write(value.AbilityActionID_02);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ToolTipID, options);
        }

        public global::GameDB.ItemCollection_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __ItemCollectionID__ = default(uint);
            var __ItemCollectionTextID__ = default(string);
            var __TapType__ = default(global::GameDB.E_TapType);
            var __CollectionType__ = default(global::GameDB.E_CollectionType);
            var __Sort__ = default(uint);
            var __CollectionItemCount__ = default(byte);
            var __CollectionItemID_01__ = default(uint);
            var __CollectionItemID_02__ = default(uint);
            var __CollectionItemID_03__ = default(uint);
            var __CollectionItemID_04__ = default(uint);
            var __CollectionItemID_05__ = default(uint);
            var __CollectionItemID_06__ = default(uint);
            var __CollectionItemID_07__ = default(uint);
            var __CollectionItemID_08__ = default(uint);
            var __AbilityActionID_01__ = default(uint);
            var __AbilityActionID_02__ = default(uint);
            var __ToolTipID__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __ItemCollectionID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __ItemCollectionTextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __TapType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_TapType>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __CollectionType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_CollectionType>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Sort__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __CollectionItemCount__ = reader.ReadByte();
                        break;
                    case 6:
                        __CollectionItemID_01__ = reader.ReadUInt32();
                        break;
                    case 7:
                        __CollectionItemID_02__ = reader.ReadUInt32();
                        break;
                    case 8:
                        __CollectionItemID_03__ = reader.ReadUInt32();
                        break;
                    case 9:
                        __CollectionItemID_04__ = reader.ReadUInt32();
                        break;
                    case 10:
                        __CollectionItemID_05__ = reader.ReadUInt32();
                        break;
                    case 11:
                        __CollectionItemID_06__ = reader.ReadUInt32();
                        break;
                    case 12:
                        __CollectionItemID_07__ = reader.ReadUInt32();
                        break;
                    case 13:
                        __CollectionItemID_08__ = reader.ReadUInt32();
                        break;
                    case 14:
                        __AbilityActionID_01__ = reader.ReadUInt32();
                        break;
                    case 15:
                        __AbilityActionID_02__ = reader.ReadUInt32();
                        break;
                    case 16:
                        __ToolTipID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.ItemCollection_Table();
            ____result.ItemCollectionID = __ItemCollectionID__;
            ____result.ItemCollectionTextID = __ItemCollectionTextID__;
            ____result.TapType = __TapType__;
            ____result.CollectionType = __CollectionType__;
            ____result.Sort = __Sort__;
            ____result.CollectionItemCount = __CollectionItemCount__;
            ____result.CollectionItemID_01 = __CollectionItemID_01__;
            ____result.CollectionItemID_02 = __CollectionItemID_02__;
            ____result.CollectionItemID_03 = __CollectionItemID_03__;
            ____result.CollectionItemID_04 = __CollectionItemID_04__;
            ____result.CollectionItemID_05 = __CollectionItemID_05__;
            ____result.CollectionItemID_06 = __CollectionItemID_06__;
            ____result.CollectionItemID_07 = __CollectionItemID_07__;
            ____result.CollectionItemID_08 = __CollectionItemID_08__;
            ____result.AbilityActionID_01 = __AbilityActionID_01__;
            ____result.AbilityActionID_02 = __AbilityActionID_02__;
            ____result.ToolTipID = __ToolTipID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ItemEnchant_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.ItemEnchant_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.ItemEnchant_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(29);
            writer.Write(value.ItemEnchantID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_EnchantType>().Serialize(ref writer, value.EnchantType, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.NormalUseItemID, options);
            writer.Write(value.NormalUseItemCount);
            writer.Write(value.NormalUseGoldCount);
            writer.Write(value.NormalEnchantRate);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.BlessUseItemID, options);
            writer.Write(value.BlessUseItemCount);
            writer.Write(value.BlessUseGoldCount);
            writer.Write(value.BlessNormalEnchantRate);
            writer.Write(value.BlessEnchantRate);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.CurseUseItemID, options);
            writer.Write(value.CurseUseItemCount);
            writer.Write(value.CurseUseGoldCount);
            writer.Write(value.CurseEnchantRate);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.NonDestroyUseItemID, options);
            writer.Write(value.NonDestroyUseItemCount);
            writer.Write(value.NonDestroyUseGoldCount);
            writer.Write(value.NonDestroyEnchantRate);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.UpgradeUseItemID, options);
            writer.Write(value.UpgradeUseItemCount);
            writer.Write(value.UpgradeUseGoldCount);
            writer.Write(value.UpgradeGroupID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_DestroyType>().Serialize(ref writer, value.DestroyType, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.FailItemID, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.FailItemCount, options);
            writer.Write(value.MileageID);
            writer.Write(value.MileageCount);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.MileageShopID, options);
        }

        public global::GameDB.ItemEnchant_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __ItemEnchantID__ = default(uint);
            var __EnchantType__ = default(global::GameDB.E_EnchantType);
            var __NormalUseItemID__ = default(global::System.Collections.Generic.List<uint>);
            var __NormalUseItemCount__ = default(uint);
            var __NormalUseGoldCount__ = default(uint);
            var __NormalEnchantRate__ = default(uint);
            var __BlessUseItemID__ = default(global::System.Collections.Generic.List<uint>);
            var __BlessUseItemCount__ = default(uint);
            var __BlessUseGoldCount__ = default(uint);
            var __BlessNormalEnchantRate__ = default(uint);
            var __BlessEnchantRate__ = default(uint);
            var __CurseUseItemID__ = default(global::System.Collections.Generic.List<uint>);
            var __CurseUseItemCount__ = default(uint);
            var __CurseUseGoldCount__ = default(uint);
            var __CurseEnchantRate__ = default(uint);
            var __NonDestroyUseItemID__ = default(global::System.Collections.Generic.List<uint>);
            var __NonDestroyUseItemCount__ = default(uint);
            var __NonDestroyUseGoldCount__ = default(uint);
            var __NonDestroyEnchantRate__ = default(uint);
            var __UpgradeUseItemID__ = default(global::System.Collections.Generic.List<uint>);
            var __UpgradeUseItemCount__ = default(uint);
            var __UpgradeUseGoldCount__ = default(uint);
            var __UpgradeGroupID__ = default(uint);
            var __DestroyType__ = default(global::GameDB.E_DestroyType);
            var __FailItemID__ = default(global::System.Collections.Generic.List<uint>);
            var __FailItemCount__ = default(global::System.Collections.Generic.List<uint>);
            var __MileageID__ = default(uint);
            var __MileageCount__ = default(uint);
            var __MileageShopID__ = default(global::System.Collections.Generic.List<uint>);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __ItemEnchantID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __EnchantType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_EnchantType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __NormalUseItemID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __NormalUseItemCount__ = reader.ReadUInt32();
                        break;
                    case 4:
                        __NormalUseGoldCount__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __NormalEnchantRate__ = reader.ReadUInt32();
                        break;
                    case 6:
                        __BlessUseItemID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __BlessUseItemCount__ = reader.ReadUInt32();
                        break;
                    case 8:
                        __BlessUseGoldCount__ = reader.ReadUInt32();
                        break;
                    case 9:
                        __BlessNormalEnchantRate__ = reader.ReadUInt32();
                        break;
                    case 10:
                        __BlessEnchantRate__ = reader.ReadUInt32();
                        break;
                    case 11:
                        __CurseUseItemID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __CurseUseItemCount__ = reader.ReadUInt32();
                        break;
                    case 13:
                        __CurseUseGoldCount__ = reader.ReadUInt32();
                        break;
                    case 14:
                        __CurseEnchantRate__ = reader.ReadUInt32();
                        break;
                    case 15:
                        __NonDestroyUseItemID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 16:
                        __NonDestroyUseItemCount__ = reader.ReadUInt32();
                        break;
                    case 17:
                        __NonDestroyUseGoldCount__ = reader.ReadUInt32();
                        break;
                    case 18:
                        __NonDestroyEnchantRate__ = reader.ReadUInt32();
                        break;
                    case 19:
                        __UpgradeUseItemID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 20:
                        __UpgradeUseItemCount__ = reader.ReadUInt32();
                        break;
                    case 21:
                        __UpgradeUseGoldCount__ = reader.ReadUInt32();
                        break;
                    case 22:
                        __UpgradeGroupID__ = reader.ReadUInt32();
                        break;
                    case 23:
                        __DestroyType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_DestroyType>().Deserialize(ref reader, options);
                        break;
                    case 24:
                        __FailItemID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 25:
                        __FailItemCount__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 26:
                        __MileageID__ = reader.ReadUInt32();
                        break;
                    case 27:
                        __MileageCount__ = reader.ReadUInt32();
                        break;
                    case 28:
                        __MileageShopID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.ItemEnchant_Table();
            ____result.ItemEnchantID = __ItemEnchantID__;
            ____result.EnchantType = __EnchantType__;
            ____result.NormalUseItemID = __NormalUseItemID__;
            ____result.NormalUseItemCount = __NormalUseItemCount__;
            ____result.NormalUseGoldCount = __NormalUseGoldCount__;
            ____result.NormalEnchantRate = __NormalEnchantRate__;
            ____result.BlessUseItemID = __BlessUseItemID__;
            ____result.BlessUseItemCount = __BlessUseItemCount__;
            ____result.BlessUseGoldCount = __BlessUseGoldCount__;
            ____result.BlessNormalEnchantRate = __BlessNormalEnchantRate__;
            ____result.BlessEnchantRate = __BlessEnchantRate__;
            ____result.CurseUseItemID = __CurseUseItemID__;
            ____result.CurseUseItemCount = __CurseUseItemCount__;
            ____result.CurseUseGoldCount = __CurseUseGoldCount__;
            ____result.CurseEnchantRate = __CurseEnchantRate__;
            ____result.NonDestroyUseItemID = __NonDestroyUseItemID__;
            ____result.NonDestroyUseItemCount = __NonDestroyUseItemCount__;
            ____result.NonDestroyUseGoldCount = __NonDestroyUseGoldCount__;
            ____result.NonDestroyEnchantRate = __NonDestroyEnchantRate__;
            ____result.UpgradeUseItemID = __UpgradeUseItemID__;
            ____result.UpgradeUseItemCount = __UpgradeUseItemCount__;
            ____result.UpgradeUseGoldCount = __UpgradeUseGoldCount__;
            ____result.UpgradeGroupID = __UpgradeGroupID__;
            ____result.DestroyType = __DestroyType__;
            ____result.FailItemID = __FailItemID__;
            ____result.FailItemCount = __FailItemCount__;
            ____result.MileageID = __MileageID__;
            ____result.MileageCount = __MileageCount__;
            ____result.MileageShopID = __MileageShopID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Level_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Level_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Level_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(24);
            writer.Write(value.LevelID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_CharacterType>().Serialize(ref writer, value.CharacterType, options);
            writer.Write(value.CharacterLevel);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_LevelUpType>().Serialize(ref writer, value.LevelUpType, options);
            writer.Write(value.LevelUpExp);
            writer.Write(value.GetStatPoint);
            writer.Write(value.MaxHP);
            writer.Write(value.MaxMP);
            writer.Write(value.ShortAttack);
            writer.Write(value.LongAttack);
            writer.Write(value.MagicAttack);
            writer.Write(value.ShortAccuracy);
            writer.Write(value.LongAccuracy);
            writer.Write(value.MagicAccuracy);
            writer.Write(value.ShortCritical);
            writer.Write(value.LongCritical);
            writer.Write(value.MagicCritical);
            writer.Write(value.MeleeDefense);
            writer.Write(value.MagicDefense);
            writer.Write(value.ShortEvasion);
            writer.Write(value.LongEvasion);
            writer.Write(value.MagicEvasion);
            writer.Write(value.HPRecovery);
            writer.Write(value.MPRecovery);
        }

        public global::GameDB.Level_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __LevelID__ = default(uint);
            var __CharacterType__ = default(global::GameDB.E_CharacterType);
            var __CharacterLevel__ = default(uint);
            var __LevelUpType__ = default(global::GameDB.E_LevelUpType);
            var __LevelUpExp__ = default(ulong);
            var __GetStatPoint__ = default(byte);
            var __MaxHP__ = default(uint);
            var __MaxMP__ = default(uint);
            var __ShortAttack__ = default(uint);
            var __LongAttack__ = default(uint);
            var __MagicAttack__ = default(uint);
            var __ShortAccuracy__ = default(uint);
            var __LongAccuracy__ = default(uint);
            var __MagicAccuracy__ = default(uint);
            var __ShortCritical__ = default(uint);
            var __LongCritical__ = default(uint);
            var __MagicCritical__ = default(uint);
            var __MeleeDefense__ = default(uint);
            var __MagicDefense__ = default(uint);
            var __ShortEvasion__ = default(uint);
            var __LongEvasion__ = default(uint);
            var __MagicEvasion__ = default(uint);
            var __HPRecovery__ = default(uint);
            var __MPRecovery__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __LevelID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __CharacterType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_CharacterType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __CharacterLevel__ = reader.ReadUInt32();
                        break;
                    case 3:
                        __LevelUpType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_LevelUpType>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __LevelUpExp__ = reader.ReadUInt64();
                        break;
                    case 5:
                        __GetStatPoint__ = reader.ReadByte();
                        break;
                    case 6:
                        __MaxHP__ = reader.ReadUInt32();
                        break;
                    case 7:
                        __MaxMP__ = reader.ReadUInt32();
                        break;
                    case 8:
                        __ShortAttack__ = reader.ReadUInt32();
                        break;
                    case 9:
                        __LongAttack__ = reader.ReadUInt32();
                        break;
                    case 10:
                        __MagicAttack__ = reader.ReadUInt32();
                        break;
                    case 11:
                        __ShortAccuracy__ = reader.ReadUInt32();
                        break;
                    case 12:
                        __LongAccuracy__ = reader.ReadUInt32();
                        break;
                    case 13:
                        __MagicAccuracy__ = reader.ReadUInt32();
                        break;
                    case 14:
                        __ShortCritical__ = reader.ReadUInt32();
                        break;
                    case 15:
                        __LongCritical__ = reader.ReadUInt32();
                        break;
                    case 16:
                        __MagicCritical__ = reader.ReadUInt32();
                        break;
                    case 17:
                        __MeleeDefense__ = reader.ReadUInt32();
                        break;
                    case 18:
                        __MagicDefense__ = reader.ReadUInt32();
                        break;
                    case 19:
                        __ShortEvasion__ = reader.ReadUInt32();
                        break;
                    case 20:
                        __LongEvasion__ = reader.ReadUInt32();
                        break;
                    case 21:
                        __MagicEvasion__ = reader.ReadUInt32();
                        break;
                    case 22:
                        __HPRecovery__ = reader.ReadUInt32();
                        break;
                    case 23:
                        __MPRecovery__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Level_Table();
            ____result.LevelID = __LevelID__;
            ____result.CharacterType = __CharacterType__;
            ____result.CharacterLevel = __CharacterLevel__;
            ____result.LevelUpType = __LevelUpType__;
            ____result.LevelUpExp = __LevelUpExp__;
            ____result.GetStatPoint = __GetStatPoint__;
            ____result.MaxHP = __MaxHP__;
            ____result.MaxMP = __MaxMP__;
            ____result.ShortAttack = __ShortAttack__;
            ____result.LongAttack = __LongAttack__;
            ____result.MagicAttack = __MagicAttack__;
            ____result.ShortAccuracy = __ShortAccuracy__;
            ____result.LongAccuracy = __LongAccuracy__;
            ____result.MagicAccuracy = __MagicAccuracy__;
            ____result.ShortCritical = __ShortCritical__;
            ____result.LongCritical = __LongCritical__;
            ____result.MagicCritical = __MagicCritical__;
            ____result.MeleeDefense = __MeleeDefense__;
            ____result.MagicDefense = __MagicDefense__;
            ____result.ShortEvasion = __ShortEvasion__;
            ____result.LongEvasion = __LongEvasion__;
            ____result.MagicEvasion = __MagicEvasion__;
            ____result.HPRecovery = __HPRecovery__;
            ____result.MPRecovery = __MPRecovery__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class LineLog_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.LineLog_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.LineLog_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(8);
            writer.Write(value.LogID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.CollectionName, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Key, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Type, options);
            writer.Write(value.MaxLength);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Value, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Comment, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Etc, options);
        }

        public global::GameDB.LineLog_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __LogID__ = default(uint);
            var __CollectionName__ = default(string);
            var __Key__ = default(string);
            var __Type__ = default(string);
            var __MaxLength__ = default(uint);
            var __Value__ = default(string);
            var __Comment__ = default(string);
            var __Etc__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __LogID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __CollectionName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Key__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Type__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __MaxLength__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __Value__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Comment__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __Etc__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.LineLog_Table();
            ____result.LogID = __LogID__;
            ____result.CollectionName = __CollectionName__;
            ____result.Key = __Key__;
            ____result.Type = __Type__;
            ____result.MaxLength = __MaxLength__;
            ____result.Value = __Value__;
            ____result.Comment = __Comment__;
            ____result.Etc = __Etc__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ListGroup_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.ListGroup_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.ListGroup_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(8);
            writer.Write(value.ListID);
            writer.Write(value.ListGroupID);
            writer.Write(value.ItemID);
            writer.Write(value.ItemCount);
            writer.Write(value.ChangeID);
            writer.Write(value.PetID);
            writer.Write(value.RuneID);
            writer.Write(value.GetRate);
        }

        public global::GameDB.ListGroup_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __ListID__ = default(uint);
            var __ListGroupID__ = default(uint);
            var __ItemID__ = default(uint);
            var __ItemCount__ = default(uint);
            var __ChangeID__ = default(uint);
            var __PetID__ = default(uint);
            var __RuneID__ = default(uint);
            var __GetRate__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __ListID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __ListGroupID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __ItemID__ = reader.ReadUInt32();
                        break;
                    case 3:
                        __ItemCount__ = reader.ReadUInt32();
                        break;
                    case 4:
                        __ChangeID__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __PetID__ = reader.ReadUInt32();
                        break;
                    case 6:
                        __RuneID__ = reader.ReadUInt32();
                        break;
                    case 7:
                        __GetRate__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.ListGroup_Table();
            ____result.ListID = __ListID__;
            ____result.ListGroupID = __ListGroupID__;
            ____result.ItemID = __ItemID__;
            ____result.ItemCount = __ItemCount__;
            ____result.ChangeID = __ChangeID__;
            ____result.PetID = __PetID__;
            ____result.RuneID = __RuneID__;
            ____result.GetRate = __GetRate__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Loading_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Loading_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Loading_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(7);
            writer.Write(value.LoadingID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_LoadingType>().Serialize(ref writer, value.LoadingType, options);
            writer.Write(value.MinLevel);
            writer.Write(value.MaxLevel);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.FileName, options);
            writer.Write(value.GroupID);
            writer.Write(value.EventOutputRate);
        }

        public global::GameDB.Loading_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __LoadingID__ = default(uint);
            var __LoadingType__ = default(global::GameDB.E_LoadingType);
            var __MinLevel__ = default(byte);
            var __MaxLevel__ = default(byte);
            var __FileName__ = default(string);
            var __GroupID__ = default(uint);
            var __EventOutputRate__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __LoadingID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __LoadingType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_LoadingType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __MinLevel__ = reader.ReadByte();
                        break;
                    case 3:
                        __MaxLevel__ = reader.ReadByte();
                        break;
                    case 4:
                        __FileName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __GroupID__ = reader.ReadUInt32();
                        break;
                    case 6:
                        __EventOutputRate__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Loading_Table();
            ____result.LoadingID = __LoadingID__;
            ____result.LoadingType = __LoadingType__;
            ____result.MinLevel = __MinLevel__;
            ____result.MaxLevel = __MaxLevel__;
            ____result.FileName = __FileName__;
            ____result.GroupID = __GroupID__;
            ____result.EventOutputRate = __EventOutputRate__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class LoadingTip_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.LoadingTip_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.LoadingTip_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            writer.Write(value.LoadingTipID);
            writer.Write(value.GroupID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.TipText, options);
        }

        public global::GameDB.LoadingTip_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __LoadingTipID__ = default(uint);
            var __GroupID__ = default(uint);
            var __TipText__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __LoadingTipID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __GroupID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __TipText__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.LoadingTip_Table();
            ____result.LoadingTipID = __LoadingTipID__;
            ____result.GroupID = __GroupID__;
            ____result.TipText = __TipText__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Locale_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Locale_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Locale_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.StringName, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_TextType>().Serialize(ref writer, value.TextType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Text, options);
        }

        public global::GameDB.Locale_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __StringName__ = default(string);
            var __TextType__ = default(global::GameDB.E_TextType);
            var __Text__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __StringName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __TextType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_TextType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Text__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Locale_Table();
            ____result.StringName = __StringName__;
            ____result.TextType = __TextType__;
            ____result.Text = __Text__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Mail_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Mail_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Mail_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            writer.Write(value.MailID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_MailType>().Serialize(ref writer, value.MailType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_MailReceiver>().Serialize(ref writer, value.MailReceiver, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.TitleTextID, options);
            writer.Write(value.KeepTime);
        }

        public global::GameDB.Mail_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __MailID__ = default(uint);
            var __MailType__ = default(global::GameDB.E_MailType);
            var __MailReceiver__ = default(global::GameDB.E_MailReceiver);
            var __TitleTextID__ = default(string);
            var __KeepTime__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __MailID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __MailType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_MailType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __MailReceiver__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_MailReceiver>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __TitleTextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __KeepTime__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Mail_Table();
            ____result.MailID = __MailID__;
            ____result.MailType = __MailType__;
            ____result.MailReceiver = __MailReceiver__;
            ____result.TitleTextID = __TitleTextID__;
            ____result.KeepTime = __KeepTime__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Make_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Make_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Make_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(32);
            writer.Write(value.MakeID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_UnusedType>().Serialize(ref writer, value.UnusedType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_MakeType>().Serialize(ref writer, value.MakeType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_MakeTapType>().Serialize(ref writer, value.MakeTapType, options);
            writer.Write(value.PositionNumber);
            writer.Write(value.MakeCharLevel);
            writer.Write(value.MakeMaterialCount);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_MaterialType>().Serialize(ref writer, value.MaterialType, options);
            writer.Write(value.MaterialIncrement);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.MaterialItemID_01, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.MaterialItemCount_01, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.MaterialItemID_02, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.MaterialItemCount_02, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.MaterialItemID_03, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.MaterialItemCount_03, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.MaterialItemID_04, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.MaterialItemCount_04, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.MaterialItemID_05, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.MaterialItemCount_05, options);
            writer.Write(value.MakeSuccessRate);
            writer.Write(value.SuccessGetItemID);
            writer.Write(value.SuccessGetItemCount);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.FailGetItemID, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.FailGetItemCount, options);
            writer.Write(value.MileageShopID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ServerType>().Serialize(ref writer, value.ServerType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_MakeLimitType>().Serialize(ref writer, value.MakeLimitType, options);
            writer.Write(value.MakeLimitCount);
            writer.Write(value.AccountLimitCount);
            writer.Write(value.ServerLimitCount);
            writer.Write(value.EventOpenDay);
            writer.Write(value.EventEndDay);
        }

        public global::GameDB.Make_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __MakeID__ = default(uint);
            var __UnusedType__ = default(global::GameDB.E_UnusedType);
            var __MakeType__ = default(global::GameDB.E_MakeType);
            var __MakeTapType__ = default(global::GameDB.E_MakeTapType);
            var __PositionNumber__ = default(uint);
            var __MakeCharLevel__ = default(byte);
            var __MakeMaterialCount__ = default(byte);
            var __MaterialType__ = default(global::GameDB.E_MaterialType);
            var __MaterialIncrement__ = default(uint);
            var __MaterialItemID_01__ = default(global::System.Collections.Generic.List<uint>);
            var __MaterialItemCount_01__ = default(global::System.Collections.Generic.List<uint>);
            var __MaterialItemID_02__ = default(global::System.Collections.Generic.List<uint>);
            var __MaterialItemCount_02__ = default(global::System.Collections.Generic.List<uint>);
            var __MaterialItemID_03__ = default(global::System.Collections.Generic.List<uint>);
            var __MaterialItemCount_03__ = default(global::System.Collections.Generic.List<uint>);
            var __MaterialItemID_04__ = default(global::System.Collections.Generic.List<uint>);
            var __MaterialItemCount_04__ = default(global::System.Collections.Generic.List<uint>);
            var __MaterialItemID_05__ = default(global::System.Collections.Generic.List<uint>);
            var __MaterialItemCount_05__ = default(global::System.Collections.Generic.List<uint>);
            var __MakeSuccessRate__ = default(uint);
            var __SuccessGetItemID__ = default(uint);
            var __SuccessGetItemCount__ = default(uint);
            var __FailGetItemID__ = default(global::System.Collections.Generic.List<uint>);
            var __FailGetItemCount__ = default(global::System.Collections.Generic.List<uint>);
            var __MileageShopID__ = default(uint);
            var __ServerType__ = default(global::GameDB.E_ServerType);
            var __MakeLimitType__ = default(global::GameDB.E_MakeLimitType);
            var __MakeLimitCount__ = default(uint);
            var __AccountLimitCount__ = default(uint);
            var __ServerLimitCount__ = default(uint);
            var __EventOpenDay__ = default(ulong);
            var __EventEndDay__ = default(ulong);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __MakeID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __UnusedType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_UnusedType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __MakeType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_MakeType>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __MakeTapType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_MakeTapType>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __PositionNumber__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __MakeCharLevel__ = reader.ReadByte();
                        break;
                    case 6:
                        __MakeMaterialCount__ = reader.ReadByte();
                        break;
                    case 7:
                        __MaterialType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_MaterialType>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __MaterialIncrement__ = reader.ReadUInt32();
                        break;
                    case 9:
                        __MaterialItemID_01__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __MaterialItemCount_01__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __MaterialItemID_02__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __MaterialItemCount_02__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 13:
                        __MaterialItemID_03__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 14:
                        __MaterialItemCount_03__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        __MaterialItemID_04__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 16:
                        __MaterialItemCount_04__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 17:
                        __MaterialItemID_05__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 18:
                        __MaterialItemCount_05__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 19:
                        __MakeSuccessRate__ = reader.ReadUInt32();
                        break;
                    case 20:
                        __SuccessGetItemID__ = reader.ReadUInt32();
                        break;
                    case 21:
                        __SuccessGetItemCount__ = reader.ReadUInt32();
                        break;
                    case 22:
                        __FailGetItemID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 23:
                        __FailGetItemCount__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 24:
                        __MileageShopID__ = reader.ReadUInt32();
                        break;
                    case 25:
                        __ServerType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ServerType>().Deserialize(ref reader, options);
                        break;
                    case 26:
                        __MakeLimitType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_MakeLimitType>().Deserialize(ref reader, options);
                        break;
                    case 27:
                        __MakeLimitCount__ = reader.ReadUInt32();
                        break;
                    case 28:
                        __AccountLimitCount__ = reader.ReadUInt32();
                        break;
                    case 29:
                        __ServerLimitCount__ = reader.ReadUInt32();
                        break;
                    case 30:
                        __EventOpenDay__ = reader.ReadUInt64();
                        break;
                    case 31:
                        __EventEndDay__ = reader.ReadUInt64();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Make_Table();
            ____result.MakeID = __MakeID__;
            ____result.UnusedType = __UnusedType__;
            ____result.MakeType = __MakeType__;
            ____result.MakeTapType = __MakeTapType__;
            ____result.PositionNumber = __PositionNumber__;
            ____result.MakeCharLevel = __MakeCharLevel__;
            ____result.MakeMaterialCount = __MakeMaterialCount__;
            ____result.MaterialType = __MaterialType__;
            ____result.MaterialIncrement = __MaterialIncrement__;
            ____result.MaterialItemID_01 = __MaterialItemID_01__;
            ____result.MaterialItemCount_01 = __MaterialItemCount_01__;
            ____result.MaterialItemID_02 = __MaterialItemID_02__;
            ____result.MaterialItemCount_02 = __MaterialItemCount_02__;
            ____result.MaterialItemID_03 = __MaterialItemID_03__;
            ____result.MaterialItemCount_03 = __MaterialItemCount_03__;
            ____result.MaterialItemID_04 = __MaterialItemID_04__;
            ____result.MaterialItemCount_04 = __MaterialItemCount_04__;
            ____result.MaterialItemID_05 = __MaterialItemID_05__;
            ____result.MaterialItemCount_05 = __MaterialItemCount_05__;
            ____result.MakeSuccessRate = __MakeSuccessRate__;
            ____result.SuccessGetItemID = __SuccessGetItemID__;
            ____result.SuccessGetItemCount = __SuccessGetItemCount__;
            ____result.FailGetItemID = __FailGetItemID__;
            ____result.FailGetItemCount = __FailGetItemCount__;
            ____result.MileageShopID = __MileageShopID__;
            ____result.ServerType = __ServerType__;
            ____result.MakeLimitType = __MakeLimitType__;
            ____result.MakeLimitCount = __MakeLimitCount__;
            ____result.AccountLimitCount = __AccountLimitCount__;
            ____result.ServerLimitCount = __ServerLimitCount__;
            ____result.EventOpenDay = __EventOpenDay__;
            ____result.EventEndDay = __EventEndDay__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Mark_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Mark_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Mark_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(21);
            writer.Write(value.MarkID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.MarkTextID, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_MarkAbleType>().Serialize(ref writer, value.MarkAbleType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_MarkUniqueType>().Serialize(ref writer, value.MarkUniqueType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_DiceUseType>().Serialize(ref writer, value.DiceUseType, options);
            writer.Write(value.Step);
            writer.Write(value.MaxStep);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_MarkEnchantType>().Serialize(ref writer, value.MarkEnchantType, options);
            writer.Write(value.EssenceCount);
            writer.Write(value.GoldCount);
            writer.Write(value.UpRate);
            writer.Write(value.SuccesStep);
            writer.Write(value.FailStep);
            writer.Write(value.AbilityActionID_01);
            writer.Write(value.AbilityActionID_02);
            writer.Write(value.UniqAbilityOpenItemCount);
            writer.Write(value.UniqAbilityOpenRate);
            writer.Write(value.UniqAbilityActionID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Icon, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ToolTipID, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::GameDB.E_AbilityType>>().Serialize(ref writer, value.HighlightAbility, options);
        }

        public global::GameDB.Mark_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __MarkID__ = default(uint);
            var __MarkTextID__ = default(string);
            var __MarkAbleType__ = default(global::GameDB.E_MarkAbleType);
            var __MarkUniqueType__ = default(global::GameDB.E_MarkUniqueType);
            var __DiceUseType__ = default(global::GameDB.E_DiceUseType);
            var __Step__ = default(byte);
            var __MaxStep__ = default(byte);
            var __MarkEnchantType__ = default(global::GameDB.E_MarkEnchantType);
            var __EssenceCount__ = default(uint);
            var __GoldCount__ = default(uint);
            var __UpRate__ = default(uint);
            var __SuccesStep__ = default(byte);
            var __FailStep__ = default(byte);
            var __AbilityActionID_01__ = default(uint);
            var __AbilityActionID_02__ = default(uint);
            var __UniqAbilityOpenItemCount__ = default(uint);
            var __UniqAbilityOpenRate__ = default(uint);
            var __UniqAbilityActionID__ = default(uint);
            var __Icon__ = default(string);
            var __ToolTipID__ = default(string);
            var __HighlightAbility__ = default(global::System.Collections.Generic.List<global::GameDB.E_AbilityType>);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __MarkID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __MarkTextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __MarkAbleType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_MarkAbleType>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __MarkUniqueType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_MarkUniqueType>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __DiceUseType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_DiceUseType>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Step__ = reader.ReadByte();
                        break;
                    case 6:
                        __MaxStep__ = reader.ReadByte();
                        break;
                    case 7:
                        __MarkEnchantType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_MarkEnchantType>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __EssenceCount__ = reader.ReadUInt32();
                        break;
                    case 9:
                        __GoldCount__ = reader.ReadUInt32();
                        break;
                    case 10:
                        __UpRate__ = reader.ReadUInt32();
                        break;
                    case 11:
                        __SuccesStep__ = reader.ReadByte();
                        break;
                    case 12:
                        __FailStep__ = reader.ReadByte();
                        break;
                    case 13:
                        __AbilityActionID_01__ = reader.ReadUInt32();
                        break;
                    case 14:
                        __AbilityActionID_02__ = reader.ReadUInt32();
                        break;
                    case 15:
                        __UniqAbilityOpenItemCount__ = reader.ReadUInt32();
                        break;
                    case 16:
                        __UniqAbilityOpenRate__ = reader.ReadUInt32();
                        break;
                    case 17:
                        __UniqAbilityActionID__ = reader.ReadUInt32();
                        break;
                    case 18:
                        __Icon__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 19:
                        __ToolTipID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 20:
                        __HighlightAbility__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::GameDB.E_AbilityType>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Mark_Table();
            ____result.MarkID = __MarkID__;
            ____result.MarkTextID = __MarkTextID__;
            ____result.MarkAbleType = __MarkAbleType__;
            ____result.MarkUniqueType = __MarkUniqueType__;
            ____result.DiceUseType = __DiceUseType__;
            ____result.Step = __Step__;
            ____result.MaxStep = __MaxStep__;
            ____result.MarkEnchantType = __MarkEnchantType__;
            ____result.EssenceCount = __EssenceCount__;
            ____result.GoldCount = __GoldCount__;
            ____result.UpRate = __UpRate__;
            ____result.SuccesStep = __SuccesStep__;
            ____result.FailStep = __FailStep__;
            ____result.AbilityActionID_01 = __AbilityActionID_01__;
            ____result.AbilityActionID_02 = __AbilityActionID_02__;
            ____result.UniqAbilityOpenItemCount = __UniqAbilityOpenItemCount__;
            ____result.UniqAbilityOpenRate = __UniqAbilityOpenRate__;
            ____result.UniqAbilityActionID = __UniqAbilityActionID__;
            ____result.Icon = __Icon__;
            ____result.ToolTipID = __ToolTipID__;
            ____result.HighlightAbility = __HighlightAbility__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MarkEnchant_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.MarkEnchant_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.MarkEnchant_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            writer.Write(value.MarkEnchantID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.TextID, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.IconID, options);
        }

        public global::GameDB.MarkEnchant_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __MarkEnchantID__ = default(uint);
            var __TextID__ = default(string);
            var __IconID__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __MarkEnchantID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __TextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __IconID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.MarkEnchant_Table();
            ____result.MarkEnchantID = __MarkEnchantID__;
            ____result.TextID = __TextID__;
            ____result.IconID = __IconID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MezRate_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.MezRate_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.MezRate_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(104);
            writer.Write(value.MezRateID);
            writer.Write(value.GroupID);
            writer.Write(value.Section);
            writer.Write(value.Down50);
            writer.Write(value.Down49);
            writer.Write(value.Down48);
            writer.Write(value.Down47);
            writer.Write(value.Down46);
            writer.Write(value.Down45);
            writer.Write(value.Down44);
            writer.Write(value.Down43);
            writer.Write(value.Down42);
            writer.Write(value.Down41);
            writer.Write(value.Down40);
            writer.Write(value.Down39);
            writer.Write(value.Down38);
            writer.Write(value.Down37);
            writer.Write(value.Down36);
            writer.Write(value.Down35);
            writer.Write(value.Down34);
            writer.Write(value.Down33);
            writer.Write(value.Down32);
            writer.Write(value.Down31);
            writer.Write(value.Down30);
            writer.Write(value.Down29);
            writer.Write(value.Down28);
            writer.Write(value.Down27);
            writer.Write(value.Down26);
            writer.Write(value.Down25);
            writer.Write(value.Down24);
            writer.Write(value.Down23);
            writer.Write(value.Down22);
            writer.Write(value.Down21);
            writer.Write(value.Down20);
            writer.Write(value.Down19);
            writer.Write(value.Down18);
            writer.Write(value.Down17);
            writer.Write(value.Down16);
            writer.Write(value.Down15);
            writer.Write(value.Down14);
            writer.Write(value.Down13);
            writer.Write(value.Down12);
            writer.Write(value.Down11);
            writer.Write(value.Down10);
            writer.Write(value.Down9);
            writer.Write(value.Down8);
            writer.Write(value.Down7);
            writer.Write(value.Down6);
            writer.Write(value.Down5);
            writer.Write(value.Down4);
            writer.Write(value.Down3);
            writer.Write(value.Down2);
            writer.Write(value.Down1);
            writer.Write(value.Normal);
            writer.Write(value.up1);
            writer.Write(value.up2);
            writer.Write(value.up3);
            writer.Write(value.up4);
            writer.Write(value.up5);
            writer.Write(value.up6);
            writer.Write(value.up7);
            writer.Write(value.up8);
            writer.Write(value.up9);
            writer.Write(value.up10);
            writer.Write(value.up11);
            writer.Write(value.up12);
            writer.Write(value.up13);
            writer.Write(value.up14);
            writer.Write(value.up15);
            writer.Write(value.up16);
            writer.Write(value.up17);
            writer.Write(value.up18);
            writer.Write(value.up19);
            writer.Write(value.up20);
            writer.Write(value.up21);
            writer.Write(value.up22);
            writer.Write(value.up23);
            writer.Write(value.up24);
            writer.Write(value.up25);
            writer.Write(value.up26);
            writer.Write(value.up27);
            writer.Write(value.up28);
            writer.Write(value.up29);
            writer.Write(value.up30);
            writer.Write(value.up31);
            writer.Write(value.up32);
            writer.Write(value.up33);
            writer.Write(value.up34);
            writer.Write(value.up35);
            writer.Write(value.up36);
            writer.Write(value.up37);
            writer.Write(value.up38);
            writer.Write(value.up39);
            writer.Write(value.up40);
            writer.Write(value.up41);
            writer.Write(value.up42);
            writer.Write(value.up43);
            writer.Write(value.up44);
            writer.Write(value.up45);
            writer.Write(value.up46);
            writer.Write(value.up47);
            writer.Write(value.up48);
            writer.Write(value.up49);
            writer.Write(value.up50);
        }

        public global::GameDB.MezRate_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __MezRateID__ = default(uint);
            var __GroupID__ = default(uint);
            var __Section__ = default(byte);
            var __Down50__ = default(byte);
            var __Down49__ = default(byte);
            var __Down48__ = default(byte);
            var __Down47__ = default(byte);
            var __Down46__ = default(byte);
            var __Down45__ = default(byte);
            var __Down44__ = default(byte);
            var __Down43__ = default(byte);
            var __Down42__ = default(byte);
            var __Down41__ = default(byte);
            var __Down40__ = default(byte);
            var __Down39__ = default(byte);
            var __Down38__ = default(byte);
            var __Down37__ = default(byte);
            var __Down36__ = default(byte);
            var __Down35__ = default(byte);
            var __Down34__ = default(byte);
            var __Down33__ = default(byte);
            var __Down32__ = default(byte);
            var __Down31__ = default(byte);
            var __Down30__ = default(byte);
            var __Down29__ = default(byte);
            var __Down28__ = default(byte);
            var __Down27__ = default(byte);
            var __Down26__ = default(byte);
            var __Down25__ = default(byte);
            var __Down24__ = default(byte);
            var __Down23__ = default(byte);
            var __Down22__ = default(byte);
            var __Down21__ = default(byte);
            var __Down20__ = default(byte);
            var __Down19__ = default(byte);
            var __Down18__ = default(byte);
            var __Down17__ = default(byte);
            var __Down16__ = default(byte);
            var __Down15__ = default(byte);
            var __Down14__ = default(byte);
            var __Down13__ = default(byte);
            var __Down12__ = default(byte);
            var __Down11__ = default(byte);
            var __Down10__ = default(byte);
            var __Down9__ = default(byte);
            var __Down8__ = default(byte);
            var __Down7__ = default(byte);
            var __Down6__ = default(byte);
            var __Down5__ = default(byte);
            var __Down4__ = default(byte);
            var __Down3__ = default(byte);
            var __Down2__ = default(byte);
            var __Down1__ = default(byte);
            var __Normal__ = default(byte);
            var __up1__ = default(byte);
            var __up2__ = default(byte);
            var __up3__ = default(byte);
            var __up4__ = default(byte);
            var __up5__ = default(byte);
            var __up6__ = default(byte);
            var __up7__ = default(byte);
            var __up8__ = default(byte);
            var __up9__ = default(byte);
            var __up10__ = default(byte);
            var __up11__ = default(byte);
            var __up12__ = default(byte);
            var __up13__ = default(byte);
            var __up14__ = default(byte);
            var __up15__ = default(byte);
            var __up16__ = default(byte);
            var __up17__ = default(byte);
            var __up18__ = default(byte);
            var __up19__ = default(byte);
            var __up20__ = default(byte);
            var __up21__ = default(byte);
            var __up22__ = default(byte);
            var __up23__ = default(byte);
            var __up24__ = default(byte);
            var __up25__ = default(byte);
            var __up26__ = default(byte);
            var __up27__ = default(byte);
            var __up28__ = default(byte);
            var __up29__ = default(byte);
            var __up30__ = default(byte);
            var __up31__ = default(byte);
            var __up32__ = default(byte);
            var __up33__ = default(byte);
            var __up34__ = default(byte);
            var __up35__ = default(byte);
            var __up36__ = default(byte);
            var __up37__ = default(byte);
            var __up38__ = default(byte);
            var __up39__ = default(byte);
            var __up40__ = default(byte);
            var __up41__ = default(byte);
            var __up42__ = default(byte);
            var __up43__ = default(byte);
            var __up44__ = default(byte);
            var __up45__ = default(byte);
            var __up46__ = default(byte);
            var __up47__ = default(byte);
            var __up48__ = default(byte);
            var __up49__ = default(byte);
            var __up50__ = default(byte);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __MezRateID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __GroupID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __Section__ = reader.ReadByte();
                        break;
                    case 3:
                        __Down50__ = reader.ReadByte();
                        break;
                    case 4:
                        __Down49__ = reader.ReadByte();
                        break;
                    case 5:
                        __Down48__ = reader.ReadByte();
                        break;
                    case 6:
                        __Down47__ = reader.ReadByte();
                        break;
                    case 7:
                        __Down46__ = reader.ReadByte();
                        break;
                    case 8:
                        __Down45__ = reader.ReadByte();
                        break;
                    case 9:
                        __Down44__ = reader.ReadByte();
                        break;
                    case 10:
                        __Down43__ = reader.ReadByte();
                        break;
                    case 11:
                        __Down42__ = reader.ReadByte();
                        break;
                    case 12:
                        __Down41__ = reader.ReadByte();
                        break;
                    case 13:
                        __Down40__ = reader.ReadByte();
                        break;
                    case 14:
                        __Down39__ = reader.ReadByte();
                        break;
                    case 15:
                        __Down38__ = reader.ReadByte();
                        break;
                    case 16:
                        __Down37__ = reader.ReadByte();
                        break;
                    case 17:
                        __Down36__ = reader.ReadByte();
                        break;
                    case 18:
                        __Down35__ = reader.ReadByte();
                        break;
                    case 19:
                        __Down34__ = reader.ReadByte();
                        break;
                    case 20:
                        __Down33__ = reader.ReadByte();
                        break;
                    case 21:
                        __Down32__ = reader.ReadByte();
                        break;
                    case 22:
                        __Down31__ = reader.ReadByte();
                        break;
                    case 23:
                        __Down30__ = reader.ReadByte();
                        break;
                    case 24:
                        __Down29__ = reader.ReadByte();
                        break;
                    case 25:
                        __Down28__ = reader.ReadByte();
                        break;
                    case 26:
                        __Down27__ = reader.ReadByte();
                        break;
                    case 27:
                        __Down26__ = reader.ReadByte();
                        break;
                    case 28:
                        __Down25__ = reader.ReadByte();
                        break;
                    case 29:
                        __Down24__ = reader.ReadByte();
                        break;
                    case 30:
                        __Down23__ = reader.ReadByte();
                        break;
                    case 31:
                        __Down22__ = reader.ReadByte();
                        break;
                    case 32:
                        __Down21__ = reader.ReadByte();
                        break;
                    case 33:
                        __Down20__ = reader.ReadByte();
                        break;
                    case 34:
                        __Down19__ = reader.ReadByte();
                        break;
                    case 35:
                        __Down18__ = reader.ReadByte();
                        break;
                    case 36:
                        __Down17__ = reader.ReadByte();
                        break;
                    case 37:
                        __Down16__ = reader.ReadByte();
                        break;
                    case 38:
                        __Down15__ = reader.ReadByte();
                        break;
                    case 39:
                        __Down14__ = reader.ReadByte();
                        break;
                    case 40:
                        __Down13__ = reader.ReadByte();
                        break;
                    case 41:
                        __Down12__ = reader.ReadByte();
                        break;
                    case 42:
                        __Down11__ = reader.ReadByte();
                        break;
                    case 43:
                        __Down10__ = reader.ReadByte();
                        break;
                    case 44:
                        __Down9__ = reader.ReadByte();
                        break;
                    case 45:
                        __Down8__ = reader.ReadByte();
                        break;
                    case 46:
                        __Down7__ = reader.ReadByte();
                        break;
                    case 47:
                        __Down6__ = reader.ReadByte();
                        break;
                    case 48:
                        __Down5__ = reader.ReadByte();
                        break;
                    case 49:
                        __Down4__ = reader.ReadByte();
                        break;
                    case 50:
                        __Down3__ = reader.ReadByte();
                        break;
                    case 51:
                        __Down2__ = reader.ReadByte();
                        break;
                    case 52:
                        __Down1__ = reader.ReadByte();
                        break;
                    case 53:
                        __Normal__ = reader.ReadByte();
                        break;
                    case 54:
                        __up1__ = reader.ReadByte();
                        break;
                    case 55:
                        __up2__ = reader.ReadByte();
                        break;
                    case 56:
                        __up3__ = reader.ReadByte();
                        break;
                    case 57:
                        __up4__ = reader.ReadByte();
                        break;
                    case 58:
                        __up5__ = reader.ReadByte();
                        break;
                    case 59:
                        __up6__ = reader.ReadByte();
                        break;
                    case 60:
                        __up7__ = reader.ReadByte();
                        break;
                    case 61:
                        __up8__ = reader.ReadByte();
                        break;
                    case 62:
                        __up9__ = reader.ReadByte();
                        break;
                    case 63:
                        __up10__ = reader.ReadByte();
                        break;
                    case 64:
                        __up11__ = reader.ReadByte();
                        break;
                    case 65:
                        __up12__ = reader.ReadByte();
                        break;
                    case 66:
                        __up13__ = reader.ReadByte();
                        break;
                    case 67:
                        __up14__ = reader.ReadByte();
                        break;
                    case 68:
                        __up15__ = reader.ReadByte();
                        break;
                    case 69:
                        __up16__ = reader.ReadByte();
                        break;
                    case 70:
                        __up17__ = reader.ReadByte();
                        break;
                    case 71:
                        __up18__ = reader.ReadByte();
                        break;
                    case 72:
                        __up19__ = reader.ReadByte();
                        break;
                    case 73:
                        __up20__ = reader.ReadByte();
                        break;
                    case 74:
                        __up21__ = reader.ReadByte();
                        break;
                    case 75:
                        __up22__ = reader.ReadByte();
                        break;
                    case 76:
                        __up23__ = reader.ReadByte();
                        break;
                    case 77:
                        __up24__ = reader.ReadByte();
                        break;
                    case 78:
                        __up25__ = reader.ReadByte();
                        break;
                    case 79:
                        __up26__ = reader.ReadByte();
                        break;
                    case 80:
                        __up27__ = reader.ReadByte();
                        break;
                    case 81:
                        __up28__ = reader.ReadByte();
                        break;
                    case 82:
                        __up29__ = reader.ReadByte();
                        break;
                    case 83:
                        __up30__ = reader.ReadByte();
                        break;
                    case 84:
                        __up31__ = reader.ReadByte();
                        break;
                    case 85:
                        __up32__ = reader.ReadByte();
                        break;
                    case 86:
                        __up33__ = reader.ReadByte();
                        break;
                    case 87:
                        __up34__ = reader.ReadByte();
                        break;
                    case 88:
                        __up35__ = reader.ReadByte();
                        break;
                    case 89:
                        __up36__ = reader.ReadByte();
                        break;
                    case 90:
                        __up37__ = reader.ReadByte();
                        break;
                    case 91:
                        __up38__ = reader.ReadByte();
                        break;
                    case 92:
                        __up39__ = reader.ReadByte();
                        break;
                    case 93:
                        __up40__ = reader.ReadByte();
                        break;
                    case 94:
                        __up41__ = reader.ReadByte();
                        break;
                    case 95:
                        __up42__ = reader.ReadByte();
                        break;
                    case 96:
                        __up43__ = reader.ReadByte();
                        break;
                    case 97:
                        __up44__ = reader.ReadByte();
                        break;
                    case 98:
                        __up45__ = reader.ReadByte();
                        break;
                    case 99:
                        __up46__ = reader.ReadByte();
                        break;
                    case 100:
                        __up47__ = reader.ReadByte();
                        break;
                    case 101:
                        __up48__ = reader.ReadByte();
                        break;
                    case 102:
                        __up49__ = reader.ReadByte();
                        break;
                    case 103:
                        __up50__ = reader.ReadByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.MezRate_Table();
            ____result.MezRateID = __MezRateID__;
            ____result.GroupID = __GroupID__;
            ____result.Section = __Section__;
            ____result.Down50 = __Down50__;
            ____result.Down49 = __Down49__;
            ____result.Down48 = __Down48__;
            ____result.Down47 = __Down47__;
            ____result.Down46 = __Down46__;
            ____result.Down45 = __Down45__;
            ____result.Down44 = __Down44__;
            ____result.Down43 = __Down43__;
            ____result.Down42 = __Down42__;
            ____result.Down41 = __Down41__;
            ____result.Down40 = __Down40__;
            ____result.Down39 = __Down39__;
            ____result.Down38 = __Down38__;
            ____result.Down37 = __Down37__;
            ____result.Down36 = __Down36__;
            ____result.Down35 = __Down35__;
            ____result.Down34 = __Down34__;
            ____result.Down33 = __Down33__;
            ____result.Down32 = __Down32__;
            ____result.Down31 = __Down31__;
            ____result.Down30 = __Down30__;
            ____result.Down29 = __Down29__;
            ____result.Down28 = __Down28__;
            ____result.Down27 = __Down27__;
            ____result.Down26 = __Down26__;
            ____result.Down25 = __Down25__;
            ____result.Down24 = __Down24__;
            ____result.Down23 = __Down23__;
            ____result.Down22 = __Down22__;
            ____result.Down21 = __Down21__;
            ____result.Down20 = __Down20__;
            ____result.Down19 = __Down19__;
            ____result.Down18 = __Down18__;
            ____result.Down17 = __Down17__;
            ____result.Down16 = __Down16__;
            ____result.Down15 = __Down15__;
            ____result.Down14 = __Down14__;
            ____result.Down13 = __Down13__;
            ____result.Down12 = __Down12__;
            ____result.Down11 = __Down11__;
            ____result.Down10 = __Down10__;
            ____result.Down9 = __Down9__;
            ____result.Down8 = __Down8__;
            ____result.Down7 = __Down7__;
            ____result.Down6 = __Down6__;
            ____result.Down5 = __Down5__;
            ____result.Down4 = __Down4__;
            ____result.Down3 = __Down3__;
            ____result.Down2 = __Down2__;
            ____result.Down1 = __Down1__;
            ____result.Normal = __Normal__;
            ____result.up1 = __up1__;
            ____result.up2 = __up2__;
            ____result.up3 = __up3__;
            ____result.up4 = __up4__;
            ____result.up5 = __up5__;
            ____result.up6 = __up6__;
            ____result.up7 = __up7__;
            ____result.up8 = __up8__;
            ____result.up9 = __up9__;
            ____result.up10 = __up10__;
            ____result.up11 = __up11__;
            ____result.up12 = __up12__;
            ____result.up13 = __up13__;
            ____result.up14 = __up14__;
            ____result.up15 = __up15__;
            ____result.up16 = __up16__;
            ____result.up17 = __up17__;
            ____result.up18 = __up18__;
            ____result.up19 = __up19__;
            ____result.up20 = __up20__;
            ____result.up21 = __up21__;
            ____result.up22 = __up22__;
            ____result.up23 = __up23__;
            ____result.up24 = __up24__;
            ____result.up25 = __up25__;
            ____result.up26 = __up26__;
            ____result.up27 = __up27__;
            ____result.up28 = __up28__;
            ____result.up29 = __up29__;
            ____result.up30 = __up30__;
            ____result.up31 = __up31__;
            ____result.up32 = __up32__;
            ____result.up33 = __up33__;
            ____result.up34 = __up34__;
            ____result.up35 = __up35__;
            ____result.up36 = __up36__;
            ____result.up37 = __up37__;
            ____result.up38 = __up38__;
            ____result.up39 = __up39__;
            ____result.up40 = __up40__;
            ____result.up41 = __up41__;
            ____result.up42 = __up42__;
            ____result.up43 = __up43__;
            ____result.up44 = __up44__;
            ____result.up45 = __up45__;
            ____result.up46 = __up46__;
            ____result.up47 = __up47__;
            ____result.up48 = __up48__;
            ____result.up49 = __up49__;
            ____result.up50 = __up50__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MileageShop_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.MileageShop_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.MileageShop_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(21);
            writer.Write(value.MileageShopID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_UnusedType>().Serialize(ref writer, value.UnusedType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ShopTextID, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.IconID, options);
            writer.Write(value.Grade);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_MileageShopType>().Serialize(ref writer, value.MileageShopType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_SubTapType>().Serialize(ref writer, value.SubTapType, options);
            writer.Write(value.PositionNumber);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_BuyBonusType>().Serialize(ref writer, value.BuyBonusType, options);
            writer.Write(value.ShopListID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_GoodsKindType>().Serialize(ref writer, value.GoodsKindType, options);
            writer.Write(value.BuyItemID);
            writer.Write(value.BuyItemCount);
            writer.Write(value.BuyCharLevel);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_BuyLimitType>().Serialize(ref writer, value.BuyLimitType, options);
            writer.Write(value.BuyLimitCount);
            writer.Write(value.BuyLimitSlotCount);
            writer.Write(value.BuyStartTime);
            writer.Write(value.BuyFinishTime);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.TooltipImageCode, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.TooltipID, options);
        }

        public global::GameDB.MileageShop_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __MileageShopID__ = default(uint);
            var __UnusedType__ = default(global::GameDB.E_UnusedType);
            var __ShopTextID__ = default(string);
            var __IconID__ = default(string);
            var __Grade__ = default(byte);
            var __MileageShopType__ = default(global::GameDB.E_MileageShopType);
            var __SubTapType__ = default(global::GameDB.E_SubTapType);
            var __PositionNumber__ = default(uint);
            var __BuyBonusType__ = default(global::GameDB.E_BuyBonusType);
            var __ShopListID__ = default(uint);
            var __GoodsKindType__ = default(global::GameDB.E_GoodsKindType);
            var __BuyItemID__ = default(uint);
            var __BuyItemCount__ = default(uint);
            var __BuyCharLevel__ = default(byte);
            var __BuyLimitType__ = default(global::GameDB.E_BuyLimitType);
            var __BuyLimitCount__ = default(uint);
            var __BuyLimitSlotCount__ = default(uint);
            var __BuyStartTime__ = default(ulong);
            var __BuyFinishTime__ = default(ulong);
            var __TooltipImageCode__ = default(string);
            var __TooltipID__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __MileageShopID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __UnusedType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_UnusedType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __ShopTextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __IconID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Grade__ = reader.ReadByte();
                        break;
                    case 5:
                        __MileageShopType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_MileageShopType>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __SubTapType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_SubTapType>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __PositionNumber__ = reader.ReadUInt32();
                        break;
                    case 8:
                        __BuyBonusType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_BuyBonusType>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __ShopListID__ = reader.ReadUInt32();
                        break;
                    case 10:
                        __GoodsKindType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_GoodsKindType>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __BuyItemID__ = reader.ReadUInt32();
                        break;
                    case 12:
                        __BuyItemCount__ = reader.ReadUInt32();
                        break;
                    case 13:
                        __BuyCharLevel__ = reader.ReadByte();
                        break;
                    case 14:
                        __BuyLimitType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_BuyLimitType>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        __BuyLimitCount__ = reader.ReadUInt32();
                        break;
                    case 16:
                        __BuyLimitSlotCount__ = reader.ReadUInt32();
                        break;
                    case 17:
                        __BuyStartTime__ = reader.ReadUInt64();
                        break;
                    case 18:
                        __BuyFinishTime__ = reader.ReadUInt64();
                        break;
                    case 19:
                        __TooltipImageCode__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 20:
                        __TooltipID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.MileageShop_Table();
            ____result.MileageShopID = __MileageShopID__;
            ____result.UnusedType = __UnusedType__;
            ____result.ShopTextID = __ShopTextID__;
            ____result.IconID = __IconID__;
            ____result.Grade = __Grade__;
            ____result.MileageShopType = __MileageShopType__;
            ____result.SubTapType = __SubTapType__;
            ____result.PositionNumber = __PositionNumber__;
            ____result.BuyBonusType = __BuyBonusType__;
            ____result.ShopListID = __ShopListID__;
            ____result.GoodsKindType = __GoodsKindType__;
            ____result.BuyItemID = __BuyItemID__;
            ____result.BuyItemCount = __BuyItemCount__;
            ____result.BuyCharLevel = __BuyCharLevel__;
            ____result.BuyLimitType = __BuyLimitType__;
            ____result.BuyLimitCount = __BuyLimitCount__;
            ____result.BuyLimitSlotCount = __BuyLimitSlotCount__;
            ____result.BuyStartTime = __BuyStartTime__;
            ____result.BuyFinishTime = __BuyFinishTime__;
            ____result.TooltipImageCode = __TooltipImageCode__;
            ____result.TooltipID = __TooltipID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Monster_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Monster_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Monster_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(90);
            writer.Write(value.MonsterID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.MonsterTextID, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_MonsterType>().Serialize(ref writer, value.MonsterType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_UnitAttributeType>().Serialize(ref writer, value.AttributeType, options);
            writer.Write(value.AttributeLevel);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_SkillArouseType>().Serialize(ref writer, value.SkillArouseType, options);
            writer.Write(value.PlaceStageID);
            writer.Write(value.Level);
            writer.Write(value.MaxHP);
            writer.Write(value.MaxMP);
            writer.Write(value.ShortAttack);
            writer.Write(value.LongAttack);
            writer.Write(value.WeaponAttack);
            writer.Write(value.MagicAttack);
            writer.Write(value.ShortAccuracy);
            writer.Write(value.LongAccuracy);
            writer.Write(value.MagicAccuracy);
            writer.Write(value.ShortCritical);
            writer.Write(value.LongCritical);
            writer.Write(value.MagicCritical);
            writer.Write(value.ShortCriticalMinus);
            writer.Write(value.LongCriticalMinus);
            writer.Write(value.MagicCriticalMinus);
            writer.Write(value.ShortCriticalDmg);
            writer.Write(value.LongCriticalDmg);
            writer.Write(value.MagicCriticalDmg);
            writer.Write(value.ShortCriticalDmgMinus);
            writer.Write(value.LongCriticalDmgMinus);
            writer.Write(value.MagicCriticalDmgMinus);
            writer.Write(value.MeleeDefense);
            writer.Write(value.MagicDefense);
            writer.Write(value.WalkSpeed);
            writer.Write(value.RunSpeed);
            writer.Write(value.AttackSpeed);
            writer.Write(value.Reduction);
            writer.Write(value.ReductionIgnore);
            writer.Write(value.ShortEvasion);
            writer.Write(value.LongEvasion);
            writer.Write(value.MagicEvasion);
            writer.Write(value.ShortEvasionIgnore);
            writer.Write(value.LongEvasionIgnore);
            writer.Write(value.MagicEvasionIgnore);
            writer.Write(value.HPRecovery);
            writer.Write(value.MPRecovery);
            writer.Write(value.HPRecoveryTime);
            writer.Write(value.MPRecoveryTime);
            writer.Write(value.GetCritical);
            writer.Write(value.GetMezRate);
            writer.Write(value.BaseAttackCount);
            writer.Write(value.BaseAttackID_01);
            writer.Write(value.BaseAttackID_02);
            writer.Write(value.BaseAttackID_03);
            writer.Write(value.ActiveSkillCount);
            writer.Write(value.ActiveSkillID_01);
            writer.Write(value.ActiveSkillID_02);
            writer.Write(value.ActiveSkillID_03);
            writer.Write(value.ActiveSkillID_04);
            writer.Write(value.ActiveSkillID_05);
            writer.Write(value.ActiveSkillID_06);
            writer.Write(value.ActiveSkillID_07);
            writer.Write(value.ActiveSkillID_08);
            writer.Write(value.ActiveSkillID_09);
            writer.Write(value.PassiveSkillID);
            writer.Write(value.ResourceID);
            writer.Write(value.Scale);
            writer.Write(value.ViewScale);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_CollisionType>().Serialize(ref writer, value.CollisionType, options);
            writer.Write(value.CollisionRadius);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_HitPossibleType>().Serialize(ref writer, value.HitPossibleType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_RotationType>().Serialize(ref writer, value.RotationType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_MoveType>().Serialize(ref writer, value.MoveType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_BattleType>().Serialize(ref writer, value.BattleType, options);
            writer.Write(value.SearchRange);
            writer.Write(value.CorpseRetentionTime);
            writer.Write(value.RoamingRange);
            writer.Write(value.MaxRoamingTime);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_SpawnType>().Serialize(ref writer, value.SpawnType, options);
            writer.Write(value.SpawnTime);
            writer.Write(value.SpawnCnt);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ReturnType>().Serialize(ref writer, value.ReturnType, options);
            writer.Write(value.ReturnRange);
            writer.Write(value.TendencyCount);
            writer.Write(value.DropGroupID);
            writer.Write(value.ResultDropGroupID);
            writer.Write(value.GuildDropItemID);
            writer.Write(value.Auction_DropGroupID);
            writer.Write(value.ExpCount);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Icon, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ToolTipID, options);
            writer.Write(value.ReplaceMonsterID);
        }

        public global::GameDB.Monster_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __MonsterID__ = default(uint);
            var __MonsterTextID__ = default(string);
            var __MonsterType__ = default(global::GameDB.E_MonsterType);
            var __AttributeType__ = default(global::GameDB.E_UnitAttributeType);
            var __AttributeLevel__ = default(int);
            var __SkillArouseType__ = default(global::GameDB.E_SkillArouseType);
            var __PlaceStageID__ = default(uint);
            var __Level__ = default(uint);
            var __MaxHP__ = default(uint);
            var __MaxMP__ = default(uint);
            var __ShortAttack__ = default(uint);
            var __LongAttack__ = default(uint);
            var __WeaponAttack__ = default(uint);
            var __MagicAttack__ = default(uint);
            var __ShortAccuracy__ = default(uint);
            var __LongAccuracy__ = default(uint);
            var __MagicAccuracy__ = default(uint);
            var __ShortCritical__ = default(uint);
            var __LongCritical__ = default(uint);
            var __MagicCritical__ = default(uint);
            var __ShortCriticalMinus__ = default(uint);
            var __LongCriticalMinus__ = default(uint);
            var __MagicCriticalMinus__ = default(uint);
            var __ShortCriticalDmg__ = default(uint);
            var __LongCriticalDmg__ = default(uint);
            var __MagicCriticalDmg__ = default(uint);
            var __ShortCriticalDmgMinus__ = default(uint);
            var __LongCriticalDmgMinus__ = default(uint);
            var __MagicCriticalDmgMinus__ = default(uint);
            var __MeleeDefense__ = default(uint);
            var __MagicDefense__ = default(uint);
            var __WalkSpeed__ = default(float);
            var __RunSpeed__ = default(float);
            var __AttackSpeed__ = default(float);
            var __Reduction__ = default(uint);
            var __ReductionIgnore__ = default(uint);
            var __ShortEvasion__ = default(int);
            var __LongEvasion__ = default(int);
            var __MagicEvasion__ = default(int);
            var __ShortEvasionIgnore__ = default(uint);
            var __LongEvasionIgnore__ = default(uint);
            var __MagicEvasionIgnore__ = default(uint);
            var __HPRecovery__ = default(uint);
            var __MPRecovery__ = default(uint);
            var __HPRecoveryTime__ = default(float);
            var __MPRecoveryTime__ = default(float);
            var __GetCritical__ = default(uint);
            var __GetMezRate__ = default(int);
            var __BaseAttackCount__ = default(byte);
            var __BaseAttackID_01__ = default(uint);
            var __BaseAttackID_02__ = default(uint);
            var __BaseAttackID_03__ = default(uint);
            var __ActiveSkillCount__ = default(byte);
            var __ActiveSkillID_01__ = default(uint);
            var __ActiveSkillID_02__ = default(uint);
            var __ActiveSkillID_03__ = default(uint);
            var __ActiveSkillID_04__ = default(uint);
            var __ActiveSkillID_05__ = default(uint);
            var __ActiveSkillID_06__ = default(uint);
            var __ActiveSkillID_07__ = default(uint);
            var __ActiveSkillID_08__ = default(uint);
            var __ActiveSkillID_09__ = default(uint);
            var __PassiveSkillID__ = default(uint);
            var __ResourceID__ = default(uint);
            var __Scale__ = default(uint);
            var __ViewScale__ = default(uint);
            var __CollisionType__ = default(global::GameDB.E_CollisionType);
            var __CollisionRadius__ = default(float);
            var __HitPossibleType__ = default(global::GameDB.E_HitPossibleType);
            var __RotationType__ = default(global::GameDB.E_RotationType);
            var __MoveType__ = default(global::GameDB.E_MoveType);
            var __BattleType__ = default(global::GameDB.E_BattleType);
            var __SearchRange__ = default(float);
            var __CorpseRetentionTime__ = default(float);
            var __RoamingRange__ = default(float);
            var __MaxRoamingTime__ = default(byte);
            var __SpawnType__ = default(global::GameDB.E_SpawnType);
            var __SpawnTime__ = default(float);
            var __SpawnCnt__ = default(byte);
            var __ReturnType__ = default(global::GameDB.E_ReturnType);
            var __ReturnRange__ = default(float);
            var __TendencyCount__ = default(float);
            var __DropGroupID__ = default(uint);
            var __ResultDropGroupID__ = default(uint);
            var __GuildDropItemID__ = default(uint);
            var __Auction_DropGroupID__ = default(uint);
            var __ExpCount__ = default(uint);
            var __Icon__ = default(string);
            var __ToolTipID__ = default(string);
            var __ReplaceMonsterID__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __MonsterID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __MonsterTextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __MonsterType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_MonsterType>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __AttributeType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_UnitAttributeType>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __AttributeLevel__ = reader.ReadInt32();
                        break;
                    case 5:
                        __SkillArouseType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_SkillArouseType>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __PlaceStageID__ = reader.ReadUInt32();
                        break;
                    case 7:
                        __Level__ = reader.ReadUInt32();
                        break;
                    case 8:
                        __MaxHP__ = reader.ReadUInt32();
                        break;
                    case 9:
                        __MaxMP__ = reader.ReadUInt32();
                        break;
                    case 10:
                        __ShortAttack__ = reader.ReadUInt32();
                        break;
                    case 11:
                        __LongAttack__ = reader.ReadUInt32();
                        break;
                    case 12:
                        __WeaponAttack__ = reader.ReadUInt32();
                        break;
                    case 13:
                        __MagicAttack__ = reader.ReadUInt32();
                        break;
                    case 14:
                        __ShortAccuracy__ = reader.ReadUInt32();
                        break;
                    case 15:
                        __LongAccuracy__ = reader.ReadUInt32();
                        break;
                    case 16:
                        __MagicAccuracy__ = reader.ReadUInt32();
                        break;
                    case 17:
                        __ShortCritical__ = reader.ReadUInt32();
                        break;
                    case 18:
                        __LongCritical__ = reader.ReadUInt32();
                        break;
                    case 19:
                        __MagicCritical__ = reader.ReadUInt32();
                        break;
                    case 20:
                        __ShortCriticalMinus__ = reader.ReadUInt32();
                        break;
                    case 21:
                        __LongCriticalMinus__ = reader.ReadUInt32();
                        break;
                    case 22:
                        __MagicCriticalMinus__ = reader.ReadUInt32();
                        break;
                    case 23:
                        __ShortCriticalDmg__ = reader.ReadUInt32();
                        break;
                    case 24:
                        __LongCriticalDmg__ = reader.ReadUInt32();
                        break;
                    case 25:
                        __MagicCriticalDmg__ = reader.ReadUInt32();
                        break;
                    case 26:
                        __ShortCriticalDmgMinus__ = reader.ReadUInt32();
                        break;
                    case 27:
                        __LongCriticalDmgMinus__ = reader.ReadUInt32();
                        break;
                    case 28:
                        __MagicCriticalDmgMinus__ = reader.ReadUInt32();
                        break;
                    case 29:
                        __MeleeDefense__ = reader.ReadUInt32();
                        break;
                    case 30:
                        __MagicDefense__ = reader.ReadUInt32();
                        break;
                    case 31:
                        __WalkSpeed__ = reader.ReadSingle();
                        break;
                    case 32:
                        __RunSpeed__ = reader.ReadSingle();
                        break;
                    case 33:
                        __AttackSpeed__ = reader.ReadSingle();
                        break;
                    case 34:
                        __Reduction__ = reader.ReadUInt32();
                        break;
                    case 35:
                        __ReductionIgnore__ = reader.ReadUInt32();
                        break;
                    case 36:
                        __ShortEvasion__ = reader.ReadInt32();
                        break;
                    case 37:
                        __LongEvasion__ = reader.ReadInt32();
                        break;
                    case 38:
                        __MagicEvasion__ = reader.ReadInt32();
                        break;
                    case 39:
                        __ShortEvasionIgnore__ = reader.ReadUInt32();
                        break;
                    case 40:
                        __LongEvasionIgnore__ = reader.ReadUInt32();
                        break;
                    case 41:
                        __MagicEvasionIgnore__ = reader.ReadUInt32();
                        break;
                    case 42:
                        __HPRecovery__ = reader.ReadUInt32();
                        break;
                    case 43:
                        __MPRecovery__ = reader.ReadUInt32();
                        break;
                    case 44:
                        __HPRecoveryTime__ = reader.ReadSingle();
                        break;
                    case 45:
                        __MPRecoveryTime__ = reader.ReadSingle();
                        break;
                    case 46:
                        __GetCritical__ = reader.ReadUInt32();
                        break;
                    case 47:
                        __GetMezRate__ = reader.ReadInt32();
                        break;
                    case 48:
                        __BaseAttackCount__ = reader.ReadByte();
                        break;
                    case 49:
                        __BaseAttackID_01__ = reader.ReadUInt32();
                        break;
                    case 50:
                        __BaseAttackID_02__ = reader.ReadUInt32();
                        break;
                    case 51:
                        __BaseAttackID_03__ = reader.ReadUInt32();
                        break;
                    case 52:
                        __ActiveSkillCount__ = reader.ReadByte();
                        break;
                    case 53:
                        __ActiveSkillID_01__ = reader.ReadUInt32();
                        break;
                    case 54:
                        __ActiveSkillID_02__ = reader.ReadUInt32();
                        break;
                    case 55:
                        __ActiveSkillID_03__ = reader.ReadUInt32();
                        break;
                    case 56:
                        __ActiveSkillID_04__ = reader.ReadUInt32();
                        break;
                    case 57:
                        __ActiveSkillID_05__ = reader.ReadUInt32();
                        break;
                    case 58:
                        __ActiveSkillID_06__ = reader.ReadUInt32();
                        break;
                    case 59:
                        __ActiveSkillID_07__ = reader.ReadUInt32();
                        break;
                    case 60:
                        __ActiveSkillID_08__ = reader.ReadUInt32();
                        break;
                    case 61:
                        __ActiveSkillID_09__ = reader.ReadUInt32();
                        break;
                    case 62:
                        __PassiveSkillID__ = reader.ReadUInt32();
                        break;
                    case 63:
                        __ResourceID__ = reader.ReadUInt32();
                        break;
                    case 64:
                        __Scale__ = reader.ReadUInt32();
                        break;
                    case 65:
                        __ViewScale__ = reader.ReadUInt32();
                        break;
                    case 66:
                        __CollisionType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_CollisionType>().Deserialize(ref reader, options);
                        break;
                    case 67:
                        __CollisionRadius__ = reader.ReadSingle();
                        break;
                    case 68:
                        __HitPossibleType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_HitPossibleType>().Deserialize(ref reader, options);
                        break;
                    case 69:
                        __RotationType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_RotationType>().Deserialize(ref reader, options);
                        break;
                    case 70:
                        __MoveType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_MoveType>().Deserialize(ref reader, options);
                        break;
                    case 71:
                        __BattleType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_BattleType>().Deserialize(ref reader, options);
                        break;
                    case 72:
                        __SearchRange__ = reader.ReadSingle();
                        break;
                    case 73:
                        __CorpseRetentionTime__ = reader.ReadSingle();
                        break;
                    case 74:
                        __RoamingRange__ = reader.ReadSingle();
                        break;
                    case 75:
                        __MaxRoamingTime__ = reader.ReadByte();
                        break;
                    case 76:
                        __SpawnType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_SpawnType>().Deserialize(ref reader, options);
                        break;
                    case 77:
                        __SpawnTime__ = reader.ReadSingle();
                        break;
                    case 78:
                        __SpawnCnt__ = reader.ReadByte();
                        break;
                    case 79:
                        __ReturnType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ReturnType>().Deserialize(ref reader, options);
                        break;
                    case 80:
                        __ReturnRange__ = reader.ReadSingle();
                        break;
                    case 81:
                        __TendencyCount__ = reader.ReadSingle();
                        break;
                    case 82:
                        __DropGroupID__ = reader.ReadUInt32();
                        break;
                    case 83:
                        __ResultDropGroupID__ = reader.ReadUInt32();
                        break;
                    case 84:
                        __GuildDropItemID__ = reader.ReadUInt32();
                        break;
                    case 85:
                        __Auction_DropGroupID__ = reader.ReadUInt32();
                        break;
                    case 86:
                        __ExpCount__ = reader.ReadUInt32();
                        break;
                    case 87:
                        __Icon__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 88:
                        __ToolTipID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 89:
                        __ReplaceMonsterID__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Monster_Table();
            ____result.MonsterID = __MonsterID__;
            ____result.MonsterTextID = __MonsterTextID__;
            ____result.MonsterType = __MonsterType__;
            ____result.AttributeType = __AttributeType__;
            ____result.AttributeLevel = __AttributeLevel__;
            ____result.SkillArouseType = __SkillArouseType__;
            ____result.PlaceStageID = __PlaceStageID__;
            ____result.Level = __Level__;
            ____result.MaxHP = __MaxHP__;
            ____result.MaxMP = __MaxMP__;
            ____result.ShortAttack = __ShortAttack__;
            ____result.LongAttack = __LongAttack__;
            ____result.WeaponAttack = __WeaponAttack__;
            ____result.MagicAttack = __MagicAttack__;
            ____result.ShortAccuracy = __ShortAccuracy__;
            ____result.LongAccuracy = __LongAccuracy__;
            ____result.MagicAccuracy = __MagicAccuracy__;
            ____result.ShortCritical = __ShortCritical__;
            ____result.LongCritical = __LongCritical__;
            ____result.MagicCritical = __MagicCritical__;
            ____result.ShortCriticalMinus = __ShortCriticalMinus__;
            ____result.LongCriticalMinus = __LongCriticalMinus__;
            ____result.MagicCriticalMinus = __MagicCriticalMinus__;
            ____result.ShortCriticalDmg = __ShortCriticalDmg__;
            ____result.LongCriticalDmg = __LongCriticalDmg__;
            ____result.MagicCriticalDmg = __MagicCriticalDmg__;
            ____result.ShortCriticalDmgMinus = __ShortCriticalDmgMinus__;
            ____result.LongCriticalDmgMinus = __LongCriticalDmgMinus__;
            ____result.MagicCriticalDmgMinus = __MagicCriticalDmgMinus__;
            ____result.MeleeDefense = __MeleeDefense__;
            ____result.MagicDefense = __MagicDefense__;
            ____result.WalkSpeed = __WalkSpeed__;
            ____result.RunSpeed = __RunSpeed__;
            ____result.AttackSpeed = __AttackSpeed__;
            ____result.Reduction = __Reduction__;
            ____result.ReductionIgnore = __ReductionIgnore__;
            ____result.ShortEvasion = __ShortEvasion__;
            ____result.LongEvasion = __LongEvasion__;
            ____result.MagicEvasion = __MagicEvasion__;
            ____result.ShortEvasionIgnore = __ShortEvasionIgnore__;
            ____result.LongEvasionIgnore = __LongEvasionIgnore__;
            ____result.MagicEvasionIgnore = __MagicEvasionIgnore__;
            ____result.HPRecovery = __HPRecovery__;
            ____result.MPRecovery = __MPRecovery__;
            ____result.HPRecoveryTime = __HPRecoveryTime__;
            ____result.MPRecoveryTime = __MPRecoveryTime__;
            ____result.GetCritical = __GetCritical__;
            ____result.GetMezRate = __GetMezRate__;
            ____result.BaseAttackCount = __BaseAttackCount__;
            ____result.BaseAttackID_01 = __BaseAttackID_01__;
            ____result.BaseAttackID_02 = __BaseAttackID_02__;
            ____result.BaseAttackID_03 = __BaseAttackID_03__;
            ____result.ActiveSkillCount = __ActiveSkillCount__;
            ____result.ActiveSkillID_01 = __ActiveSkillID_01__;
            ____result.ActiveSkillID_02 = __ActiveSkillID_02__;
            ____result.ActiveSkillID_03 = __ActiveSkillID_03__;
            ____result.ActiveSkillID_04 = __ActiveSkillID_04__;
            ____result.ActiveSkillID_05 = __ActiveSkillID_05__;
            ____result.ActiveSkillID_06 = __ActiveSkillID_06__;
            ____result.ActiveSkillID_07 = __ActiveSkillID_07__;
            ____result.ActiveSkillID_08 = __ActiveSkillID_08__;
            ____result.ActiveSkillID_09 = __ActiveSkillID_09__;
            ____result.PassiveSkillID = __PassiveSkillID__;
            ____result.ResourceID = __ResourceID__;
            ____result.Scale = __Scale__;
            ____result.ViewScale = __ViewScale__;
            ____result.CollisionType = __CollisionType__;
            ____result.CollisionRadius = __CollisionRadius__;
            ____result.HitPossibleType = __HitPossibleType__;
            ____result.RotationType = __RotationType__;
            ____result.MoveType = __MoveType__;
            ____result.BattleType = __BattleType__;
            ____result.SearchRange = __SearchRange__;
            ____result.CorpseRetentionTime = __CorpseRetentionTime__;
            ____result.RoamingRange = __RoamingRange__;
            ____result.MaxRoamingTime = __MaxRoamingTime__;
            ____result.SpawnType = __SpawnType__;
            ____result.SpawnTime = __SpawnTime__;
            ____result.SpawnCnt = __SpawnCnt__;
            ____result.ReturnType = __ReturnType__;
            ____result.ReturnRange = __ReturnRange__;
            ____result.TendencyCount = __TendencyCount__;
            ____result.DropGroupID = __DropGroupID__;
            ____result.ResultDropGroupID = __ResultDropGroupID__;
            ____result.GuildDropItemID = __GuildDropItemID__;
            ____result.Auction_DropGroupID = __Auction_DropGroupID__;
            ____result.ExpCount = __ExpCount__;
            ____result.Icon = __Icon__;
            ____result.ToolTipID = __ToolTipID__;
            ____result.ReplaceMonsterID = __ReplaceMonsterID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MonsterDrop_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.MonsterDrop_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.MonsterDrop_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(17);
            writer.Write(value.MonsterDropID);
            writer.Write(value.DropGroupID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_CharacterType>().Serialize(ref writer, value.DropCharacterType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_DropConditionType>().Serialize(ref writer, value.DropConditionType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_DropItemType>().Serialize(ref writer, value.DropItemType, options);
            writer.Write(value.DropItemID);
            writer.Write(value.DropItemGroupID);
            writer.Write(value.NormalDropRate);
            writer.Write(value.ProdDropRate);
            writer.Write(value.BlessDropRate);
            writer.Write(value.PowerDropRate);
            writer.Write(value.Ch1_NormalDropRate);
            writer.Write(value.Ch1_ProdDropRate);
            writer.Write(value.Ch1_BlessDropRate);
            writer.Write(value.Ch1_PowerDropRate);
            writer.Write(value.DropItemMinCount);
            writer.Write(value.DropItemMaxCount);
        }

        public global::GameDB.MonsterDrop_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __MonsterDropID__ = default(uint);
            var __DropGroupID__ = default(uint);
            var __DropCharacterType__ = default(global::GameDB.E_CharacterType);
            var __DropConditionType__ = default(global::GameDB.E_DropConditionType);
            var __DropItemType__ = default(global::GameDB.E_DropItemType);
            var __DropItemID__ = default(uint);
            var __DropItemGroupID__ = default(uint);
            var __NormalDropRate__ = default(uint);
            var __ProdDropRate__ = default(uint);
            var __BlessDropRate__ = default(uint);
            var __PowerDropRate__ = default(uint);
            var __Ch1_NormalDropRate__ = default(uint);
            var __Ch1_ProdDropRate__ = default(uint);
            var __Ch1_BlessDropRate__ = default(uint);
            var __Ch1_PowerDropRate__ = default(uint);
            var __DropItemMinCount__ = default(uint);
            var __DropItemMaxCount__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __MonsterDropID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __DropGroupID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __DropCharacterType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_CharacterType>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __DropConditionType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_DropConditionType>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __DropItemType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_DropItemType>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __DropItemID__ = reader.ReadUInt32();
                        break;
                    case 6:
                        __DropItemGroupID__ = reader.ReadUInt32();
                        break;
                    case 7:
                        __NormalDropRate__ = reader.ReadUInt32();
                        break;
                    case 8:
                        __ProdDropRate__ = reader.ReadUInt32();
                        break;
                    case 9:
                        __BlessDropRate__ = reader.ReadUInt32();
                        break;
                    case 10:
                        __PowerDropRate__ = reader.ReadUInt32();
                        break;
                    case 11:
                        __Ch1_NormalDropRate__ = reader.ReadUInt32();
                        break;
                    case 12:
                        __Ch1_ProdDropRate__ = reader.ReadUInt32();
                        break;
                    case 13:
                        __Ch1_BlessDropRate__ = reader.ReadUInt32();
                        break;
                    case 14:
                        __Ch1_PowerDropRate__ = reader.ReadUInt32();
                        break;
                    case 15:
                        __DropItemMinCount__ = reader.ReadUInt32();
                        break;
                    case 16:
                        __DropItemMaxCount__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.MonsterDrop_Table();
            ____result.MonsterDropID = __MonsterDropID__;
            ____result.DropGroupID = __DropGroupID__;
            ____result.DropCharacterType = __DropCharacterType__;
            ____result.DropConditionType = __DropConditionType__;
            ____result.DropItemType = __DropItemType__;
            ____result.DropItemID = __DropItemID__;
            ____result.DropItemGroupID = __DropItemGroupID__;
            ____result.NormalDropRate = __NormalDropRate__;
            ____result.ProdDropRate = __ProdDropRate__;
            ____result.BlessDropRate = __BlessDropRate__;
            ____result.PowerDropRate = __PowerDropRate__;
            ____result.Ch1_NormalDropRate = __Ch1_NormalDropRate__;
            ____result.Ch1_ProdDropRate = __Ch1_ProdDropRate__;
            ____result.Ch1_BlessDropRate = __Ch1_BlessDropRate__;
            ____result.Ch1_PowerDropRate = __Ch1_PowerDropRate__;
            ____result.DropItemMinCount = __DropItemMinCount__;
            ____result.DropItemMaxCount = __DropItemMaxCount__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class NormalShop_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.NormalShop_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.NormalShop_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(20);
            writer.Write(value.NormalShopID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_UnusedType>().Serialize(ref writer, value.UnusedType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ShopTextID, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ShopType>().Serialize(ref writer, value.ShopType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_NormalShopType>().Serialize(ref writer, value.NormalShopType, options);
            writer.Write(value.PositionNumber);
            writer.Write(value.ColosseumGrade);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_StateOutputType>().Serialize(ref writer, value.StateType, options);
            writer.Write(value.GoodsItemID);
            writer.Write(value.GoodsCount);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_PriceType>().Serialize(ref writer, value.PriceType, options);
            writer.Write(value.BuyItemID);
            writer.Write(value.BuyItemCount);
            writer.Write(value.BuyCharLevel);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_BuyLimitType>().Serialize(ref writer, value.BuyLimitType, options);
            writer.Write(value.BuyLimitCount);
            writer.Write(value.BuyLimitSlotCount);
            writer.Write(value.AutoBuyCount);
            writer.Write(value.BuyStartTime);
            writer.Write(value.BuyFinishTime);
        }

        public global::GameDB.NormalShop_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __NormalShopID__ = default(uint);
            var __UnusedType__ = default(global::GameDB.E_UnusedType);
            var __ShopTextID__ = default(string);
            var __ShopType__ = default(global::GameDB.E_ShopType);
            var __NormalShopType__ = default(global::GameDB.E_NormalShopType);
            var __PositionNumber__ = default(uint);
            var __ColosseumGrade__ = default(byte);
            var __StateType__ = default(global::GameDB.E_StateOutputType);
            var __GoodsItemID__ = default(uint);
            var __GoodsCount__ = default(uint);
            var __PriceType__ = default(global::GameDB.E_PriceType);
            var __BuyItemID__ = default(uint);
            var __BuyItemCount__ = default(uint);
            var __BuyCharLevel__ = default(byte);
            var __BuyLimitType__ = default(global::GameDB.E_BuyLimitType);
            var __BuyLimitCount__ = default(uint);
            var __BuyLimitSlotCount__ = default(uint);
            var __AutoBuyCount__ = default(uint);
            var __BuyStartTime__ = default(ulong);
            var __BuyFinishTime__ = default(ulong);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __NormalShopID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __UnusedType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_UnusedType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __ShopTextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __ShopType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ShopType>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __NormalShopType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_NormalShopType>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __PositionNumber__ = reader.ReadUInt32();
                        break;
                    case 6:
                        __ColosseumGrade__ = reader.ReadByte();
                        break;
                    case 7:
                        __StateType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_StateOutputType>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __GoodsItemID__ = reader.ReadUInt32();
                        break;
                    case 9:
                        __GoodsCount__ = reader.ReadUInt32();
                        break;
                    case 10:
                        __PriceType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_PriceType>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __BuyItemID__ = reader.ReadUInt32();
                        break;
                    case 12:
                        __BuyItemCount__ = reader.ReadUInt32();
                        break;
                    case 13:
                        __BuyCharLevel__ = reader.ReadByte();
                        break;
                    case 14:
                        __BuyLimitType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_BuyLimitType>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        __BuyLimitCount__ = reader.ReadUInt32();
                        break;
                    case 16:
                        __BuyLimitSlotCount__ = reader.ReadUInt32();
                        break;
                    case 17:
                        __AutoBuyCount__ = reader.ReadUInt32();
                        break;
                    case 18:
                        __BuyStartTime__ = reader.ReadUInt64();
                        break;
                    case 19:
                        __BuyFinishTime__ = reader.ReadUInt64();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.NormalShop_Table();
            ____result.NormalShopID = __NormalShopID__;
            ____result.UnusedType = __UnusedType__;
            ____result.ShopTextID = __ShopTextID__;
            ____result.ShopType = __ShopType__;
            ____result.NormalShopType = __NormalShopType__;
            ____result.PositionNumber = __PositionNumber__;
            ____result.ColosseumGrade = __ColosseumGrade__;
            ____result.StateType = __StateType__;
            ____result.GoodsItemID = __GoodsItemID__;
            ____result.GoodsCount = __GoodsCount__;
            ____result.PriceType = __PriceType__;
            ____result.BuyItemID = __BuyItemID__;
            ____result.BuyItemCount = __BuyItemCount__;
            ____result.BuyCharLevel = __BuyCharLevel__;
            ____result.BuyLimitType = __BuyLimitType__;
            ____result.BuyLimitCount = __BuyLimitCount__;
            ____result.BuyLimitSlotCount = __BuyLimitSlotCount__;
            ____result.AutoBuyCount = __AutoBuyCount__;
            ____result.BuyStartTime = __BuyStartTime__;
            ____result.BuyFinishTime = __BuyFinishTime__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class NPC_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.NPC_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.NPC_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(29);
            writer.Write(value.NPCID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.NPCTextID, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_NPCType>().Serialize(ref writer, value.NPCType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_JobType>().Serialize(ref writer, value.JobType, options);
            writer.Write(value.WalkSpeed);
            writer.Write(value.RunSpeed);
            writer.Write(value.ResourceID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.QuestResource, options);
            writer.Write(value.Scale);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_CollisionType>().Serialize(ref writer, value.CollisionType, options);
            writer.Write(value.CollisionRadius);
            writer.Write(value.CollisionVoiceRadius);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_TargetUseType>().Serialize(ref writer, value.TargetUseType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_RotationType>().Serialize(ref writer, value.RotationType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_MoveType>().Serialize(ref writer, value.MoveType, options);
            writer.Write(value.SearchRange);
            writer.Write(value.TouchRange);
            writer.Write(value.RoamingRange);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_NPCSpawnType>().Serialize(ref writer, value.NPCSpawnType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Icon, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.MinimapIcon, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ToolTipType>().Serialize(ref writer, value.ToolTipType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ToolTipID, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.ActionStartSoundID, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.ActionEndSoundID, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.NearbySoundID, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.RecorverySoundID, options);
            writer.Write(value.IdleEffectID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.MetaData, options);
        }

        public global::GameDB.NPC_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __NPCID__ = default(uint);
            var __NPCTextID__ = default(string);
            var __NPCType__ = default(global::GameDB.E_NPCType);
            var __JobType__ = default(global::GameDB.E_JobType);
            var __WalkSpeed__ = default(float);
            var __RunSpeed__ = default(float);
            var __ResourceID__ = default(uint);
            var __QuestResource__ = default(string);
            var __Scale__ = default(uint);
            var __CollisionType__ = default(global::GameDB.E_CollisionType);
            var __CollisionRadius__ = default(float);
            var __CollisionVoiceRadius__ = default(float);
            var __TargetUseType__ = default(global::GameDB.E_TargetUseType);
            var __RotationType__ = default(global::GameDB.E_RotationType);
            var __MoveType__ = default(global::GameDB.E_MoveType);
            var __SearchRange__ = default(float);
            var __TouchRange__ = default(float);
            var __RoamingRange__ = default(float);
            var __NPCSpawnType__ = default(global::GameDB.E_NPCSpawnType);
            var __Icon__ = default(string);
            var __MinimapIcon__ = default(string);
            var __ToolTipType__ = default(global::GameDB.E_ToolTipType);
            var __ToolTipID__ = default(string);
            var __ActionStartSoundID__ = default(global::System.Collections.Generic.List<uint>);
            var __ActionEndSoundID__ = default(global::System.Collections.Generic.List<uint>);
            var __NearbySoundID__ = default(global::System.Collections.Generic.List<uint>);
            var __RecorverySoundID__ = default(global::System.Collections.Generic.List<uint>);
            var __IdleEffectID__ = default(uint);
            var __MetaData__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __NPCID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __NPCTextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __NPCType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_NPCType>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __JobType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_JobType>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __WalkSpeed__ = reader.ReadSingle();
                        break;
                    case 5:
                        __RunSpeed__ = reader.ReadSingle();
                        break;
                    case 6:
                        __ResourceID__ = reader.ReadUInt32();
                        break;
                    case 7:
                        __QuestResource__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __Scale__ = reader.ReadUInt32();
                        break;
                    case 9:
                        __CollisionType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_CollisionType>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __CollisionRadius__ = reader.ReadSingle();
                        break;
                    case 11:
                        __CollisionVoiceRadius__ = reader.ReadSingle();
                        break;
                    case 12:
                        __TargetUseType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_TargetUseType>().Deserialize(ref reader, options);
                        break;
                    case 13:
                        __RotationType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_RotationType>().Deserialize(ref reader, options);
                        break;
                    case 14:
                        __MoveType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_MoveType>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        __SearchRange__ = reader.ReadSingle();
                        break;
                    case 16:
                        __TouchRange__ = reader.ReadSingle();
                        break;
                    case 17:
                        __RoamingRange__ = reader.ReadSingle();
                        break;
                    case 18:
                        __NPCSpawnType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_NPCSpawnType>().Deserialize(ref reader, options);
                        break;
                    case 19:
                        __Icon__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 20:
                        __MinimapIcon__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 21:
                        __ToolTipType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ToolTipType>().Deserialize(ref reader, options);
                        break;
                    case 22:
                        __ToolTipID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 23:
                        __ActionStartSoundID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 24:
                        __ActionEndSoundID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 25:
                        __NearbySoundID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 26:
                        __RecorverySoundID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 27:
                        __IdleEffectID__ = reader.ReadUInt32();
                        break;
                    case 28:
                        __MetaData__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.NPC_Table();
            ____result.NPCID = __NPCID__;
            ____result.NPCTextID = __NPCTextID__;
            ____result.NPCType = __NPCType__;
            ____result.JobType = __JobType__;
            ____result.WalkSpeed = __WalkSpeed__;
            ____result.RunSpeed = __RunSpeed__;
            ____result.ResourceID = __ResourceID__;
            ____result.QuestResource = __QuestResource__;
            ____result.Scale = __Scale__;
            ____result.CollisionType = __CollisionType__;
            ____result.CollisionRadius = __CollisionRadius__;
            ____result.CollisionVoiceRadius = __CollisionVoiceRadius__;
            ____result.TargetUseType = __TargetUseType__;
            ____result.RotationType = __RotationType__;
            ____result.MoveType = __MoveType__;
            ____result.SearchRange = __SearchRange__;
            ____result.TouchRange = __TouchRange__;
            ____result.RoamingRange = __RoamingRange__;
            ____result.NPCSpawnType = __NPCSpawnType__;
            ____result.Icon = __Icon__;
            ____result.MinimapIcon = __MinimapIcon__;
            ____result.ToolTipType = __ToolTipType__;
            ____result.ToolTipID = __ToolTipID__;
            ____result.ActionStartSoundID = __ActionStartSoundID__;
            ____result.ActionEndSoundID = __ActionEndSoundID__;
            ____result.NearbySoundID = __NearbySoundID__;
            ____result.RecorverySoundID = __RecorverySoundID__;
            ____result.IdleEffectID = __IdleEffectID__;
            ____result.MetaData = __MetaData__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Object_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Object_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Object_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(28);
            writer.Write(value.ObjectID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ObjectTextID, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ObjectType>().Serialize(ref writer, value.ObjectType, options);
            writer.Write(value.GreatSuccessRate);
            writer.Write(value.GreatSuccessItemID);
            writer.Write(value.GreatSuccessItemCntMin);
            writer.Write(value.GreatSuccessItemCntMax);
            writer.Write(value.ItemID);
            writer.Write(value.ItemCntMin);
            writer.Write(value.ItemCntMax);
            writer.Write(value.CastTime);
            writer.Write(value.StageID);
            writer.Write(value.MaxSpawnCount);
            writer.Write(value.RespawnTime);
            writer.Write(value.RespawnLimitCount);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ObjectActionType>().Serialize(ref writer, value.ActionType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_CollisionType>().Serialize(ref writer, value.CollisionType, options);
            writer.Write(value.CollisionRadius);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ObjectSpawnType>().Serialize(ref writer, value.ObjectSpawnType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ResourceName, options);
            writer.Write(value.IdleEffect);
            writer.Write(value.SpawnEffect);
            writer.Write(value.ActionEffect);
            writer.Write(value.DisapearEffect);
            writer.Write(value.ActionStartSoundID);
            writer.Write(value.ActionContinueSoundID);
            writer.Write(value.ActionEndSoundID);
            writer.Write(value.Scale);
        }

        public global::GameDB.Object_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __ObjectID__ = default(uint);
            var __ObjectTextID__ = default(string);
            var __ObjectType__ = default(global::GameDB.E_ObjectType);
            var __GreatSuccessRate__ = default(uint);
            var __GreatSuccessItemID__ = default(uint);
            var __GreatSuccessItemCntMin__ = default(uint);
            var __GreatSuccessItemCntMax__ = default(uint);
            var __ItemID__ = default(uint);
            var __ItemCntMin__ = default(uint);
            var __ItemCntMax__ = default(uint);
            var __CastTime__ = default(uint);
            var __StageID__ = default(uint);
            var __MaxSpawnCount__ = default(uint);
            var __RespawnTime__ = default(uint);
            var __RespawnLimitCount__ = default(uint);
            var __ActionType__ = default(global::GameDB.E_ObjectActionType);
            var __CollisionType__ = default(global::GameDB.E_CollisionType);
            var __CollisionRadius__ = default(float);
            var __ObjectSpawnType__ = default(global::GameDB.E_ObjectSpawnType);
            var __ResourceName__ = default(string);
            var __IdleEffect__ = default(uint);
            var __SpawnEffect__ = default(uint);
            var __ActionEffect__ = default(uint);
            var __DisapearEffect__ = default(uint);
            var __ActionStartSoundID__ = default(uint);
            var __ActionContinueSoundID__ = default(uint);
            var __ActionEndSoundID__ = default(uint);
            var __Scale__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __ObjectID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __ObjectTextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __ObjectType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ObjectType>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __GreatSuccessRate__ = reader.ReadUInt32();
                        break;
                    case 4:
                        __GreatSuccessItemID__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __GreatSuccessItemCntMin__ = reader.ReadUInt32();
                        break;
                    case 6:
                        __GreatSuccessItemCntMax__ = reader.ReadUInt32();
                        break;
                    case 7:
                        __ItemID__ = reader.ReadUInt32();
                        break;
                    case 8:
                        __ItemCntMin__ = reader.ReadUInt32();
                        break;
                    case 9:
                        __ItemCntMax__ = reader.ReadUInt32();
                        break;
                    case 10:
                        __CastTime__ = reader.ReadUInt32();
                        break;
                    case 11:
                        __StageID__ = reader.ReadUInt32();
                        break;
                    case 12:
                        __MaxSpawnCount__ = reader.ReadUInt32();
                        break;
                    case 13:
                        __RespawnTime__ = reader.ReadUInt32();
                        break;
                    case 14:
                        __RespawnLimitCount__ = reader.ReadUInt32();
                        break;
                    case 15:
                        __ActionType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ObjectActionType>().Deserialize(ref reader, options);
                        break;
                    case 16:
                        __CollisionType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_CollisionType>().Deserialize(ref reader, options);
                        break;
                    case 17:
                        __CollisionRadius__ = reader.ReadSingle();
                        break;
                    case 18:
                        __ObjectSpawnType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ObjectSpawnType>().Deserialize(ref reader, options);
                        break;
                    case 19:
                        __ResourceName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 20:
                        __IdleEffect__ = reader.ReadUInt32();
                        break;
                    case 21:
                        __SpawnEffect__ = reader.ReadUInt32();
                        break;
                    case 22:
                        __ActionEffect__ = reader.ReadUInt32();
                        break;
                    case 23:
                        __DisapearEffect__ = reader.ReadUInt32();
                        break;
                    case 24:
                        __ActionStartSoundID__ = reader.ReadUInt32();
                        break;
                    case 25:
                        __ActionContinueSoundID__ = reader.ReadUInt32();
                        break;
                    case 26:
                        __ActionEndSoundID__ = reader.ReadUInt32();
                        break;
                    case 27:
                        __Scale__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Object_Table();
            ____result.ObjectID = __ObjectID__;
            ____result.ObjectTextID = __ObjectTextID__;
            ____result.ObjectType = __ObjectType__;
            ____result.GreatSuccessRate = __GreatSuccessRate__;
            ____result.GreatSuccessItemID = __GreatSuccessItemID__;
            ____result.GreatSuccessItemCntMin = __GreatSuccessItemCntMin__;
            ____result.GreatSuccessItemCntMax = __GreatSuccessItemCntMax__;
            ____result.ItemID = __ItemID__;
            ____result.ItemCntMin = __ItemCntMin__;
            ____result.ItemCntMax = __ItemCntMax__;
            ____result.CastTime = __CastTime__;
            ____result.StageID = __StageID__;
            ____result.MaxSpawnCount = __MaxSpawnCount__;
            ____result.RespawnTime = __RespawnTime__;
            ____result.RespawnLimitCount = __RespawnLimitCount__;
            ____result.ActionType = __ActionType__;
            ____result.CollisionType = __CollisionType__;
            ____result.CollisionRadius = __CollisionRadius__;
            ____result.ObjectSpawnType = __ObjectSpawnType__;
            ____result.ResourceName = __ResourceName__;
            ____result.IdleEffect = __IdleEffect__;
            ____result.SpawnEffect = __SpawnEffect__;
            ____result.ActionEffect = __ActionEffect__;
            ____result.DisapearEffect = __DisapearEffect__;
            ____result.ActionStartSoundID = __ActionStartSoundID__;
            ____result.ActionContinueSoundID = __ActionContinueSoundID__;
            ____result.ActionEndSoundID = __ActionEndSoundID__;
            ____result.Scale = __Scale__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Pet_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Pet_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Pet_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(30);
            writer.Write(value.PetID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ViewType>().Serialize(ref writer, value.ViewType, options);
            writer.Write(value.Sort);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ExtractionType>().Serialize(ref writer, value.ExtractionType, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.ExtractionMaterialItemID, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.ExtractionMaterialItemCnt, options);
            writer.Write(value.ExtractionGetItemID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.PetTextID, options);
            writer.Write(value.Grade);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_PetType>().Serialize(ref writer, value.PetType, options);
            writer.Write(value.CoolTime);
            writer.Write(value.PetExpGroup);
            writer.Write(value.PetGrowthGroup);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_UniqueType>().Serialize(ref writer, value.UniqueType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_MoveType>().Serialize(ref writer, value.MoveType, options);
            writer.Write(value.MoveSpeed);
            writer.Write(value.UseItemCount);
            writer.Write(value.SupportTime);
            writer.Write(value.RideAbilityActionID);
            writer.Write(value.GrowthAbility);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.AbilityActionID, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.EnchantAbilityActionID, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ResourceFile, options);
            writer.Write(value.RunSpeed);
            writer.Write(value.Scale);
            writer.Write(value.ViewScale);
            writer.Write(value.ViewScaleLocY);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Icon, options);
            writer.Write(value.ActionEffectID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ToolTipID, options);
        }

        public global::GameDB.Pet_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __PetID__ = default(uint);
            var __ViewType__ = default(global::GameDB.E_ViewType);
            var __Sort__ = default(uint);
            var __ExtractionType__ = default(global::GameDB.E_ExtractionType);
            var __ExtractionMaterialItemID__ = default(global::System.Collections.Generic.List<uint>);
            var __ExtractionMaterialItemCnt__ = default(global::System.Collections.Generic.List<uint>);
            var __ExtractionGetItemID__ = default(uint);
            var __PetTextID__ = default(string);
            var __Grade__ = default(byte);
            var __PetType__ = default(global::GameDB.E_PetType);
            var __CoolTime__ = default(uint);
            var __PetExpGroup__ = default(uint);
            var __PetGrowthGroup__ = default(uint);
            var __UniqueType__ = default(global::GameDB.E_UniqueType);
            var __MoveType__ = default(global::GameDB.E_MoveType);
            var __MoveSpeed__ = default(uint);
            var __UseItemCount__ = default(uint);
            var __SupportTime__ = default(uint);
            var __RideAbilityActionID__ = default(uint);
            var __GrowthAbility__ = default(uint);
            var __AbilityActionID__ = default(global::System.Collections.Generic.List<uint>);
            var __EnchantAbilityActionID__ = default(global::System.Collections.Generic.List<uint>);
            var __ResourceFile__ = default(string);
            var __RunSpeed__ = default(float);
            var __Scale__ = default(uint);
            var __ViewScale__ = default(uint);
            var __ViewScaleLocY__ = default(float);
            var __Icon__ = default(string);
            var __ActionEffectID__ = default(uint);
            var __ToolTipID__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __PetID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __ViewType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ViewType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Sort__ = reader.ReadUInt32();
                        break;
                    case 3:
                        __ExtractionType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ExtractionType>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __ExtractionMaterialItemID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __ExtractionMaterialItemCnt__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __ExtractionGetItemID__ = reader.ReadUInt32();
                        break;
                    case 7:
                        __PetTextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __Grade__ = reader.ReadByte();
                        break;
                    case 9:
                        __PetType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_PetType>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __CoolTime__ = reader.ReadUInt32();
                        break;
                    case 11:
                        __PetExpGroup__ = reader.ReadUInt32();
                        break;
                    case 12:
                        __PetGrowthGroup__ = reader.ReadUInt32();
                        break;
                    case 13:
                        __UniqueType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_UniqueType>().Deserialize(ref reader, options);
                        break;
                    case 14:
                        __MoveType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_MoveType>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        __MoveSpeed__ = reader.ReadUInt32();
                        break;
                    case 16:
                        __UseItemCount__ = reader.ReadUInt32();
                        break;
                    case 17:
                        __SupportTime__ = reader.ReadUInt32();
                        break;
                    case 18:
                        __RideAbilityActionID__ = reader.ReadUInt32();
                        break;
                    case 19:
                        __GrowthAbility__ = reader.ReadUInt32();
                        break;
                    case 20:
                        __AbilityActionID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 21:
                        __EnchantAbilityActionID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 22:
                        __ResourceFile__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 23:
                        __RunSpeed__ = reader.ReadSingle();
                        break;
                    case 24:
                        __Scale__ = reader.ReadUInt32();
                        break;
                    case 25:
                        __ViewScale__ = reader.ReadUInt32();
                        break;
                    case 26:
                        __ViewScaleLocY__ = reader.ReadSingle();
                        break;
                    case 27:
                        __Icon__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 28:
                        __ActionEffectID__ = reader.ReadUInt32();
                        break;
                    case 29:
                        __ToolTipID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Pet_Table();
            ____result.PetID = __PetID__;
            ____result.ViewType = __ViewType__;
            ____result.Sort = __Sort__;
            ____result.ExtractionType = __ExtractionType__;
            ____result.ExtractionMaterialItemID = __ExtractionMaterialItemID__;
            ____result.ExtractionMaterialItemCnt = __ExtractionMaterialItemCnt__;
            ____result.ExtractionGetItemID = __ExtractionGetItemID__;
            ____result.PetTextID = __PetTextID__;
            ____result.Grade = __Grade__;
            ____result.PetType = __PetType__;
            ____result.CoolTime = __CoolTime__;
            ____result.PetExpGroup = __PetExpGroup__;
            ____result.PetGrowthGroup = __PetGrowthGroup__;
            ____result.UniqueType = __UniqueType__;
            ____result.MoveType = __MoveType__;
            ____result.MoveSpeed = __MoveSpeed__;
            ____result.UseItemCount = __UseItemCount__;
            ____result.SupportTime = __SupportTime__;
            ____result.RideAbilityActionID = __RideAbilityActionID__;
            ____result.GrowthAbility = __GrowthAbility__;
            ____result.AbilityActionID = __AbilityActionID__;
            ____result.EnchantAbilityActionID = __EnchantAbilityActionID__;
            ____result.ResourceFile = __ResourceFile__;
            ____result.RunSpeed = __RunSpeed__;
            ____result.Scale = __Scale__;
            ____result.ViewScale = __ViewScale__;
            ____result.ViewScaleLocY = __ViewScaleLocY__;
            ____result.Icon = __Icon__;
            ____result.ActionEffectID = __ActionEffectID__;
            ____result.ToolTipID = __ToolTipID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PetAdventure_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.PetAdventure_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.PetAdventure_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(29);
            writer.Write(value.AdventureID);
            writer.Write(value.AdventureGroupID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_AdventureTab>().Serialize(ref writer, value.AdventureTab, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.AdventureScene, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.AdventureIcon, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.AdventureNameText, options);
            writer.Write(value.ResetCoolTime);
            writer.Write(value.ResetItemID);
            writer.Write(value.ResetItemCnt);
            writer.Write(value.AdventureMinSlotCnt);
            writer.Write(value.AdventureMaxSlotCnt);
            writer.Write(value.NeedPetPower);
            writer.Write(value.OpenRate);
            writer.Write(value.Time);
            writer.Write(value.DefaultDropGroupID);
            writer.Write(value.AdvancedPetPower_1);
            writer.Write(value.AdvancedDropGroupID_1);
            writer.Write(value.AdvancedPetPower_2);
            writer.Write(value.AdvancedDropGroupID_2);
            writer.Write(value.AdvancedPetPower_3);
            writer.Write(value.AdvancedDropGroupID_3);
            writer.Write(value.BattleMonsterResourceID_1);
            writer.Write(value.MonsterScale_1);
            writer.Write(value.BattleMonsterResourceID_2);
            writer.Write(value.MonsterScale_2);
            writer.Write(value.BattleMonsterResourceID_3);
            writer.Write(value.MonsterScale_3);
            writer.Write(value.BattleMonsterResourceID_4);
            writer.Write(value.MonsterScale_4);
        }

        public global::GameDB.PetAdventure_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __AdventureID__ = default(uint);
            var __AdventureGroupID__ = default(uint);
            var __AdventureTab__ = default(global::GameDB.E_AdventureTab);
            var __AdventureScene__ = default(string);
            var __AdventureIcon__ = default(string);
            var __AdventureNameText__ = default(string);
            var __ResetCoolTime__ = default(uint);
            var __ResetItemID__ = default(uint);
            var __ResetItemCnt__ = default(uint);
            var __AdventureMinSlotCnt__ = default(byte);
            var __AdventureMaxSlotCnt__ = default(byte);
            var __NeedPetPower__ = default(uint);
            var __OpenRate__ = default(uint);
            var __Time__ = default(uint);
            var __DefaultDropGroupID__ = default(uint);
            var __AdvancedPetPower_1__ = default(uint);
            var __AdvancedDropGroupID_1__ = default(uint);
            var __AdvancedPetPower_2__ = default(uint);
            var __AdvancedDropGroupID_2__ = default(uint);
            var __AdvancedPetPower_3__ = default(uint);
            var __AdvancedDropGroupID_3__ = default(uint);
            var __BattleMonsterResourceID_1__ = default(uint);
            var __MonsterScale_1__ = default(uint);
            var __BattleMonsterResourceID_2__ = default(uint);
            var __MonsterScale_2__ = default(uint);
            var __BattleMonsterResourceID_3__ = default(uint);
            var __MonsterScale_3__ = default(uint);
            var __BattleMonsterResourceID_4__ = default(uint);
            var __MonsterScale_4__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __AdventureID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __AdventureGroupID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __AdventureTab__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_AdventureTab>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __AdventureScene__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __AdventureIcon__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __AdventureNameText__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __ResetCoolTime__ = reader.ReadUInt32();
                        break;
                    case 7:
                        __ResetItemID__ = reader.ReadUInt32();
                        break;
                    case 8:
                        __ResetItemCnt__ = reader.ReadUInt32();
                        break;
                    case 9:
                        __AdventureMinSlotCnt__ = reader.ReadByte();
                        break;
                    case 10:
                        __AdventureMaxSlotCnt__ = reader.ReadByte();
                        break;
                    case 11:
                        __NeedPetPower__ = reader.ReadUInt32();
                        break;
                    case 12:
                        __OpenRate__ = reader.ReadUInt32();
                        break;
                    case 13:
                        __Time__ = reader.ReadUInt32();
                        break;
                    case 14:
                        __DefaultDropGroupID__ = reader.ReadUInt32();
                        break;
                    case 15:
                        __AdvancedPetPower_1__ = reader.ReadUInt32();
                        break;
                    case 16:
                        __AdvancedDropGroupID_1__ = reader.ReadUInt32();
                        break;
                    case 17:
                        __AdvancedPetPower_2__ = reader.ReadUInt32();
                        break;
                    case 18:
                        __AdvancedDropGroupID_2__ = reader.ReadUInt32();
                        break;
                    case 19:
                        __AdvancedPetPower_3__ = reader.ReadUInt32();
                        break;
                    case 20:
                        __AdvancedDropGroupID_3__ = reader.ReadUInt32();
                        break;
                    case 21:
                        __BattleMonsterResourceID_1__ = reader.ReadUInt32();
                        break;
                    case 22:
                        __MonsterScale_1__ = reader.ReadUInt32();
                        break;
                    case 23:
                        __BattleMonsterResourceID_2__ = reader.ReadUInt32();
                        break;
                    case 24:
                        __MonsterScale_2__ = reader.ReadUInt32();
                        break;
                    case 25:
                        __BattleMonsterResourceID_3__ = reader.ReadUInt32();
                        break;
                    case 26:
                        __MonsterScale_3__ = reader.ReadUInt32();
                        break;
                    case 27:
                        __BattleMonsterResourceID_4__ = reader.ReadUInt32();
                        break;
                    case 28:
                        __MonsterScale_4__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.PetAdventure_Table();
            ____result.AdventureID = __AdventureID__;
            ____result.AdventureGroupID = __AdventureGroupID__;
            ____result.AdventureTab = __AdventureTab__;
            ____result.AdventureScene = __AdventureScene__;
            ____result.AdventureIcon = __AdventureIcon__;
            ____result.AdventureNameText = __AdventureNameText__;
            ____result.ResetCoolTime = __ResetCoolTime__;
            ____result.ResetItemID = __ResetItemID__;
            ____result.ResetItemCnt = __ResetItemCnt__;
            ____result.AdventureMinSlotCnt = __AdventureMinSlotCnt__;
            ____result.AdventureMaxSlotCnt = __AdventureMaxSlotCnt__;
            ____result.NeedPetPower = __NeedPetPower__;
            ____result.OpenRate = __OpenRate__;
            ____result.Time = __Time__;
            ____result.DefaultDropGroupID = __DefaultDropGroupID__;
            ____result.AdvancedPetPower_1 = __AdvancedPetPower_1__;
            ____result.AdvancedDropGroupID_1 = __AdvancedDropGroupID_1__;
            ____result.AdvancedPetPower_2 = __AdvancedPetPower_2__;
            ____result.AdvancedDropGroupID_2 = __AdvancedDropGroupID_2__;
            ____result.AdvancedPetPower_3 = __AdvancedPetPower_3__;
            ____result.AdvancedDropGroupID_3 = __AdvancedDropGroupID_3__;
            ____result.BattleMonsterResourceID_1 = __BattleMonsterResourceID_1__;
            ____result.MonsterScale_1 = __MonsterScale_1__;
            ____result.BattleMonsterResourceID_2 = __BattleMonsterResourceID_2__;
            ____result.MonsterScale_2 = __MonsterScale_2__;
            ____result.BattleMonsterResourceID_3 = __BattleMonsterResourceID_3__;
            ____result.MonsterScale_3 = __MonsterScale_3__;
            ____result.BattleMonsterResourceID_4 = __BattleMonsterResourceID_4__;
            ____result.MonsterScale_4 = __MonsterScale_4__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PetCollection_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.PetCollection_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.PetCollection_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(19);
            writer.Write(value.PetCollectionID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ViewType>().Serialize(ref writer, value.ViewType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_PetType>().Serialize(ref writer, value.PetType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.PetCollectionTextID, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_TapType>().Serialize(ref writer, value.TapType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_CollectionType>().Serialize(ref writer, value.CollectionType, options);
            writer.Write(value.Sort);
            writer.Write(value.CollectionPetCount);
            writer.Write(value.CollectionPetID_01);
            writer.Write(value.CollectionPetID_02);
            writer.Write(value.CollectionPetID_03);
            writer.Write(value.CollectionPetID_04);
            writer.Write(value.CollectionPetID_05);
            writer.Write(value.CollectionPetID_06);
            writer.Write(value.CollectionPetID_07);
            writer.Write(value.CollectionPetID_08);
            writer.Write(value.AbilityActionID_01);
            writer.Write(value.AbilityActionID_02);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ToolTipID, options);
        }

        public global::GameDB.PetCollection_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __PetCollectionID__ = default(uint);
            var __ViewType__ = default(global::GameDB.E_ViewType);
            var __PetType__ = default(global::GameDB.E_PetType);
            var __PetCollectionTextID__ = default(string);
            var __TapType__ = default(global::GameDB.E_TapType);
            var __CollectionType__ = default(global::GameDB.E_CollectionType);
            var __Sort__ = default(uint);
            var __CollectionPetCount__ = default(byte);
            var __CollectionPetID_01__ = default(uint);
            var __CollectionPetID_02__ = default(uint);
            var __CollectionPetID_03__ = default(uint);
            var __CollectionPetID_04__ = default(uint);
            var __CollectionPetID_05__ = default(uint);
            var __CollectionPetID_06__ = default(uint);
            var __CollectionPetID_07__ = default(uint);
            var __CollectionPetID_08__ = default(uint);
            var __AbilityActionID_01__ = default(uint);
            var __AbilityActionID_02__ = default(uint);
            var __ToolTipID__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __PetCollectionID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __ViewType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ViewType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __PetType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_PetType>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __PetCollectionTextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __TapType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_TapType>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __CollectionType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_CollectionType>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Sort__ = reader.ReadUInt32();
                        break;
                    case 7:
                        __CollectionPetCount__ = reader.ReadByte();
                        break;
                    case 8:
                        __CollectionPetID_01__ = reader.ReadUInt32();
                        break;
                    case 9:
                        __CollectionPetID_02__ = reader.ReadUInt32();
                        break;
                    case 10:
                        __CollectionPetID_03__ = reader.ReadUInt32();
                        break;
                    case 11:
                        __CollectionPetID_04__ = reader.ReadUInt32();
                        break;
                    case 12:
                        __CollectionPetID_05__ = reader.ReadUInt32();
                        break;
                    case 13:
                        __CollectionPetID_06__ = reader.ReadUInt32();
                        break;
                    case 14:
                        __CollectionPetID_07__ = reader.ReadUInt32();
                        break;
                    case 15:
                        __CollectionPetID_08__ = reader.ReadUInt32();
                        break;
                    case 16:
                        __AbilityActionID_01__ = reader.ReadUInt32();
                        break;
                    case 17:
                        __AbilityActionID_02__ = reader.ReadUInt32();
                        break;
                    case 18:
                        __ToolTipID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.PetCollection_Table();
            ____result.PetCollectionID = __PetCollectionID__;
            ____result.ViewType = __ViewType__;
            ____result.PetType = __PetType__;
            ____result.PetCollectionTextID = __PetCollectionTextID__;
            ____result.TapType = __TapType__;
            ____result.CollectionType = __CollectionType__;
            ____result.Sort = __Sort__;
            ____result.CollectionPetCount = __CollectionPetCount__;
            ____result.CollectionPetID_01 = __CollectionPetID_01__;
            ____result.CollectionPetID_02 = __CollectionPetID_02__;
            ____result.CollectionPetID_03 = __CollectionPetID_03__;
            ____result.CollectionPetID_04 = __CollectionPetID_04__;
            ____result.CollectionPetID_05 = __CollectionPetID_05__;
            ____result.CollectionPetID_06 = __CollectionPetID_06__;
            ____result.CollectionPetID_07 = __CollectionPetID_07__;
            ____result.CollectionPetID_08 = __CollectionPetID_08__;
            ____result.AbilityActionID_01 = __AbilityActionID_01__;
            ____result.AbilityActionID_02 = __AbilityActionID_02__;
            ____result.ToolTipID = __ToolTipID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PetCompose_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.PetCompose_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.PetCompose_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(10);
            writer.Write(value.PetComposeID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_PetType>().Serialize(ref writer, value.PetType, options);
            writer.Write(value.PetMaterialTier);
            writer.Write(value.PetMaterialCount);
            writer.Write(value.PetItemCount);
            writer.Write(value.HighTierRate);
            writer.Write(value.SameTierGroupID);
            writer.Write(value.HighTierGroupID);
            writer.Write(value.FailGetItemID);
            writer.Write(value.FailGetItemCount);
        }

        public global::GameDB.PetCompose_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __PetComposeID__ = default(uint);
            var __PetType__ = default(global::GameDB.E_PetType);
            var __PetMaterialTier__ = default(byte);
            var __PetMaterialCount__ = default(byte);
            var __PetItemCount__ = default(uint);
            var __HighTierRate__ = default(uint);
            var __SameTierGroupID__ = default(uint);
            var __HighTierGroupID__ = default(uint);
            var __FailGetItemID__ = default(uint);
            var __FailGetItemCount__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __PetComposeID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __PetType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_PetType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __PetMaterialTier__ = reader.ReadByte();
                        break;
                    case 3:
                        __PetMaterialCount__ = reader.ReadByte();
                        break;
                    case 4:
                        __PetItemCount__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __HighTierRate__ = reader.ReadUInt32();
                        break;
                    case 6:
                        __SameTierGroupID__ = reader.ReadUInt32();
                        break;
                    case 7:
                        __HighTierGroupID__ = reader.ReadUInt32();
                        break;
                    case 8:
                        __FailGetItemID__ = reader.ReadUInt32();
                        break;
                    case 9:
                        __FailGetItemCount__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.PetCompose_Table();
            ____result.PetComposeID = __PetComposeID__;
            ____result.PetType = __PetType__;
            ____result.PetMaterialTier = __PetMaterialTier__;
            ____result.PetMaterialCount = __PetMaterialCount__;
            ____result.PetItemCount = __PetItemCount__;
            ____result.HighTierRate = __HighTierRate__;
            ____result.SameTierGroupID = __SameTierGroupID__;
            ____result.HighTierGroupID = __HighTierGroupID__;
            ____result.FailGetItemID = __FailGetItemID__;
            ____result.FailGetItemCount = __FailGetItemCount__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PetGrowth_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.PetGrowth_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.PetGrowth_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(9);
            writer.Write(value.PetGrowthID);
            writer.Write(value.PetGrowthGroup);
            writer.Write(value.PetLevel);
            writer.Write(value.PetGrowthItem_01);
            writer.Write(value.PetGrowthItemCnt_01);
            writer.Write(value.PetGrowthItem_02);
            writer.Write(value.PetGrowthItemCnt_02);
            writer.Write(value.PetGrowthSeccesRate);
            writer.Write(value.PetExpCount);
        }

        public global::GameDB.PetGrowth_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __PetGrowthID__ = default(uint);
            var __PetGrowthGroup__ = default(uint);
            var __PetLevel__ = default(uint);
            var __PetGrowthItem_01__ = default(uint);
            var __PetGrowthItemCnt_01__ = default(uint);
            var __PetGrowthItem_02__ = default(uint);
            var __PetGrowthItemCnt_02__ = default(uint);
            var __PetGrowthSeccesRate__ = default(uint);
            var __PetExpCount__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __PetGrowthID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __PetGrowthGroup__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __PetLevel__ = reader.ReadUInt32();
                        break;
                    case 3:
                        __PetGrowthItem_01__ = reader.ReadUInt32();
                        break;
                    case 4:
                        __PetGrowthItemCnt_01__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __PetGrowthItem_02__ = reader.ReadUInt32();
                        break;
                    case 6:
                        __PetGrowthItemCnt_02__ = reader.ReadUInt32();
                        break;
                    case 7:
                        __PetGrowthSeccesRate__ = reader.ReadUInt32();
                        break;
                    case 8:
                        __PetExpCount__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.PetGrowth_Table();
            ____result.PetGrowthID = __PetGrowthID__;
            ____result.PetGrowthGroup = __PetGrowthGroup__;
            ____result.PetLevel = __PetLevel__;
            ____result.PetGrowthItem_01 = __PetGrowthItem_01__;
            ____result.PetGrowthItemCnt_01 = __PetGrowthItemCnt_01__;
            ____result.PetGrowthItem_02 = __PetGrowthItem_02__;
            ____result.PetGrowthItemCnt_02 = __PetGrowthItemCnt_02__;
            ____result.PetGrowthSeccesRate = __PetGrowthSeccesRate__;
            ____result.PetExpCount = __PetExpCount__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PetLevel_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.PetLevel_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.PetLevel_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(8);
            writer.Write(value.PetExpID);
            writer.Write(value.PetExpGroup);
            writer.Write(value.PetLevel);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_PetLevelUpType>().Serialize(ref writer, value.PetLevelUpType, options);
            writer.Write(value.PetExp);
            writer.Write(value.AdventureSeccesRate);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_RoundingType>().Serialize(ref writer, value.RoundingType, options);
            writer.Write(value.AbilityUpPer);
        }

        public global::GameDB.PetLevel_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __PetExpID__ = default(uint);
            var __PetExpGroup__ = default(uint);
            var __PetLevel__ = default(byte);
            var __PetLevelUpType__ = default(global::GameDB.E_PetLevelUpType);
            var __PetExp__ = default(uint);
            var __AdventureSeccesRate__ = default(uint);
            var __RoundingType__ = default(global::GameDB.E_RoundingType);
            var __AbilityUpPer__ = default(float);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __PetExpID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __PetExpGroup__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __PetLevel__ = reader.ReadByte();
                        break;
                    case 3:
                        __PetLevelUpType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_PetLevelUpType>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __PetExp__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __AdventureSeccesRate__ = reader.ReadUInt32();
                        break;
                    case 6:
                        __RoundingType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_RoundingType>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __AbilityUpPer__ = reader.ReadSingle();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.PetLevel_Table();
            ____result.PetExpID = __PetExpID__;
            ____result.PetExpGroup = __PetExpGroup__;
            ____result.PetLevel = __PetLevel__;
            ____result.PetLevelUpType = __PetLevelUpType__;
            ____result.PetExp = __PetExp__;
            ____result.AdventureSeccesRate = __AdventureSeccesRate__;
            ____result.RoundingType = __RoundingType__;
            ____result.AbilityUpPer = __AbilityUpPer__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PetList_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.PetList_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.PetList_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            writer.Write(value.PetListID);
            writer.Write(value.GroupID);
            writer.Write(value.GetPetID);
            writer.Write(value.GetPetRate);
        }

        public global::GameDB.PetList_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __PetListID__ = default(uint);
            var __GroupID__ = default(uint);
            var __GetPetID__ = default(uint);
            var __GetPetRate__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __PetListID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __GroupID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __GetPetID__ = reader.ReadUInt32();
                        break;
                    case 3:
                        __GetPetRate__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.PetList_Table();
            ____result.PetListID = __PetListID__;
            ____result.GroupID = __GroupID__;
            ____result.GetPetID = __GetPetID__;
            ____result.GetPetRate = __GetPetRate__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PKBuff_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.PKBuff_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.PKBuff_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(7);
            writer.Write(value.PKPenaltyID);
            writer.Write(value.MinTendencyCount);
            writer.Write(value.MaxTendencyCount);
            writer.Write(value.CharacterLevel);
            writer.Write(value.AbilityActionID_01);
            writer.Write(value.AbilityActionID_02);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_TendencyIconType>().Serialize(ref writer, value.TendencyIconType, options);
        }

        public global::GameDB.PKBuff_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __PKPenaltyID__ = default(uint);
            var __MinTendencyCount__ = default(int);
            var __MaxTendencyCount__ = default(int);
            var __CharacterLevel__ = default(uint);
            var __AbilityActionID_01__ = default(uint);
            var __AbilityActionID_02__ = default(uint);
            var __TendencyIconType__ = default(global::GameDB.E_TendencyIconType);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __PKPenaltyID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __MinTendencyCount__ = reader.ReadInt32();
                        break;
                    case 2:
                        __MaxTendencyCount__ = reader.ReadInt32();
                        break;
                    case 3:
                        __CharacterLevel__ = reader.ReadUInt32();
                        break;
                    case 4:
                        __AbilityActionID_01__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __AbilityActionID_02__ = reader.ReadUInt32();
                        break;
                    case 6:
                        __TendencyIconType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_TendencyIconType>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.PKBuff_Table();
            ____result.PKPenaltyID = __PKPenaltyID__;
            ____result.MinTendencyCount = __MinTendencyCount__;
            ____result.MaxTendencyCount = __MaxTendencyCount__;
            ____result.CharacterLevel = __CharacterLevel__;
            ____result.AbilityActionID_01 = __AbilityActionID_01__;
            ____result.AbilityActionID_02 = __AbilityActionID_02__;
            ____result.TendencyIconType = __TendencyIconType__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Portal_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Portal_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Portal_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(14);
            writer.Write(value.PortalID);
            writer.Write(value.StageID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_PortalType>().Serialize(ref writer, value.PortalType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_PKAreaChangeType>().Serialize(ref writer, value.PKAreaChangeType, options);
            writer.Write(value.MapNumber);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.PortalMiniName, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ItemTextID, options);
            writer.Write(value.ChaosChannelUseItemID);
            writer.Write(value.ChaosChannelUseItemCnt);
            writer.Write(value.UseItemID);
            writer.Write(value.UseItemCount);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Position, options);
            writer.Write(value.Radius);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.LocalMapPosition, options);
        }

        public global::GameDB.Portal_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __PortalID__ = default(uint);
            var __StageID__ = default(uint);
            var __PortalType__ = default(global::GameDB.E_PortalType);
            var __PKAreaChangeType__ = default(global::GameDB.E_PKAreaChangeType);
            var __MapNumber__ = default(byte);
            var __PortalMiniName__ = default(string);
            var __ItemTextID__ = default(string);
            var __ChaosChannelUseItemID__ = default(uint);
            var __ChaosChannelUseItemCnt__ = default(uint);
            var __UseItemID__ = default(uint);
            var __UseItemCount__ = default(uint);
            var __Position__ = default(string);
            var __Radius__ = default(float);
            var __LocalMapPosition__ = default(global::System.Collections.Generic.List<uint>);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __PortalID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __StageID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __PortalType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_PortalType>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __PKAreaChangeType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_PKAreaChangeType>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __MapNumber__ = reader.ReadByte();
                        break;
                    case 5:
                        __PortalMiniName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __ItemTextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __ChaosChannelUseItemID__ = reader.ReadUInt32();
                        break;
                    case 8:
                        __ChaosChannelUseItemCnt__ = reader.ReadUInt32();
                        break;
                    case 9:
                        __UseItemID__ = reader.ReadUInt32();
                        break;
                    case 10:
                        __UseItemCount__ = reader.ReadUInt32();
                        break;
                    case 11:
                        __Position__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __Radius__ = reader.ReadSingle();
                        break;
                    case 13:
                        __LocalMapPosition__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Portal_Table();
            ____result.PortalID = __PortalID__;
            ____result.StageID = __StageID__;
            ____result.PortalType = __PortalType__;
            ____result.PKAreaChangeType = __PKAreaChangeType__;
            ____result.MapNumber = __MapNumber__;
            ____result.PortalMiniName = __PortalMiniName__;
            ____result.ItemTextID = __ItemTextID__;
            ____result.ChaosChannelUseItemID = __ChaosChannelUseItemID__;
            ____result.ChaosChannelUseItemCnt = __ChaosChannelUseItemCnt__;
            ____result.UseItemID = __UseItemID__;
            ____result.UseItemCount = __UseItemCount__;
            ____result.Position = __Position__;
            ____result.Radius = __Radius__;
            ____result.LocalMapPosition = __LocalMapPosition__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Price_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Price_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Price_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            writer.Write(value.PriceID);
            writer.Write(value.GroupID);
            writer.Write(value.MinBuyCount);
            writer.Write(value.MaxBuyCount);
            writer.Write(value.PriceCount);
        }

        public global::GameDB.Price_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __PriceID__ = default(uint);
            var __GroupID__ = default(uint);
            var __MinBuyCount__ = default(uint);
            var __MaxBuyCount__ = default(uint);
            var __PriceCount__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __PriceID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __GroupID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __MinBuyCount__ = reader.ReadUInt32();
                        break;
                    case 3:
                        __MaxBuyCount__ = reader.ReadUInt32();
                        break;
                    case 4:
                        __PriceCount__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Price_Table();
            ____result.PriceID = __PriceID__;
            ____result.GroupID = __GroupID__;
            ____result.MinBuyCount = __MinBuyCount__;
            ____result.MaxBuyCount = __MaxBuyCount__;
            ____result.PriceCount = __PriceCount__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Quest_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Quest_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Quest_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(82);
            writer.Write(value.QuestID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.QuestTextID, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_QuestType>().Serialize(ref writer, value.QuestType, options);
            writer.Write(value.UIQuestConfirmTarget);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_UIQuestType>().Serialize(ref writer, value.UIQuestType, options);
            writer.Write(value.QuestSequence);
            writer.Write(value.QuestGroupID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_QuestGroupRewardOn>().Serialize(ref writer, value.QuestGroupRewardOn, options);
            writer.Write(value.QuestGroupOrder);
            writer.Write(value.ConditionLevel);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.ConditionQuestID1, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.ConditionQuestID2, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.ConditionQuestID3, options);
            writer.Write(value.NextQuestID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_CharacterType>().Serialize(ref writer, value.QuestCharacterType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_OpenDay>().Serialize(ref writer, value.OpenDay, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_QuestOpenType>().Serialize(ref writer, value.QuestOpenType, options);
            writer.Write(value.QuestOpenNPCID);
            writer.Write(value.QuestOpenNPCMap);
            writer.Write(value.QuestOpenItemID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_TaskQuestType>().Serialize(ref writer, value.TaskQuestType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_CompleteCheck>().Serialize(ref writer, value.CompleteCheck, options);
            writer.Write(value.TermsMonsterID);
            writer.Write(value.ItemGetMonsterID);
            writer.Write(value.ItemGetRate);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_DeliveryItemType>().Serialize(ref writer, value.DeliveryItemType, options);
            writer.Write(value.DeliveryItemID);
            writer.Write(value.TargetLevel);
            writer.Write(value.TargetTempleID);
            writer.Write(value.ItemGetObjectID);
            writer.Write(value.TalkNPCID);
            writer.Write(value.TalkNPCMap);
            writer.Write(value.MapMoveID);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.MapPos, options);
            writer.Write(value.MapPosRange);
            writer.Write(value.TargetCount);
            writer.Write(value.DialogueBeforeStartID);
            writer.Write(value.DialogueAfterStartID);
            writer.Write(value.DialogueTalkID);
            writer.Write(value.DialogueGuideID);
            writer.Write(value.DialogueEndID);
            writer.Write(value.UIQuestNext);
            writer.Write(value.UIChapter);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_UIChapterType>().Serialize(ref writer, value.UIChapterType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ChapterName, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ChapterIcon, options);
            writer.Write(value.QuestWarpPortalID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_AutoProgressType>().Serialize(ref writer, value.AutoProgressType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_AutoNoneInfoType>().Serialize(ref writer, value.AutoNoneInfoType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.InfoMsg, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_AutoCompleteType>().Serialize(ref writer, value.AutoCompleteType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_UICompleteHideType>().Serialize(ref writer, value.UICompleteHideType, options);
            writer.Write(value.QuestCompleteHideNpcID);
            writer.Write(value.QuestCompleteHideStageID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.QuestTermsText, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.QuestSimpleText, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_VideoType>().Serialize(ref writer, value.ChapterStartVideoType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ChapterStartVideo, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_VideoType>().Serialize(ref writer, value.ChapterEndVideoType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ChapterEndVideo, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_VideoType>().Serialize(ref writer, value.DialogueStartVideoType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.DialogueStartVideo, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_VideoType>().Serialize(ref writer, value.QuestCompletableVideoType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.QuestCompletableVideo, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_VideoType>().Serialize(ref writer, value.DialogueEndVideoType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.DialogueEndVideo, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_RewardExpType>().Serialize(ref writer, value.RewardExpType, options);
            writer.Write(value.RewardExp);
            writer.Write(value.RewardGoldCount);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.RewardItemID, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.RewardItemCount, options);
            writer.Write(value.RewardChangeID);
            writer.Write(value.RewardPetID);
            writer.Write(value.RewardAbilityID);
            writer.Write(value.RewardAbilityCount);
            writer.Write(value.TempleStageID);
            writer.Write(value.RandomRewardDropGroup);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.SelectRewardItemID, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.SelectRewardItemCount, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_UIShortCut>().Serialize(ref writer, value.UIShortCut, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.RewardCharacterID, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.RewardCharacterItemID, options);
        }

        public global::GameDB.Quest_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __QuestID__ = default(uint);
            var __QuestTextID__ = default(string);
            var __QuestType__ = default(global::GameDB.E_QuestType);
            var __UIQuestConfirmTarget__ = default(uint);
            var __UIQuestType__ = default(global::GameDB.E_UIQuestType);
            var __QuestSequence__ = default(uint);
            var __QuestGroupID__ = default(uint);
            var __QuestGroupRewardOn__ = default(global::GameDB.E_QuestGroupRewardOn);
            var __QuestGroupOrder__ = default(uint);
            var __ConditionLevel__ = default(byte);
            var __ConditionQuestID1__ = default(global::System.Collections.Generic.List<uint>);
            var __ConditionQuestID2__ = default(global::System.Collections.Generic.List<uint>);
            var __ConditionQuestID3__ = default(global::System.Collections.Generic.List<uint>);
            var __NextQuestID__ = default(uint);
            var __QuestCharacterType__ = default(global::GameDB.E_CharacterType);
            var __OpenDay__ = default(global::GameDB.E_OpenDay);
            var __QuestOpenType__ = default(global::GameDB.E_QuestOpenType);
            var __QuestOpenNPCID__ = default(uint);
            var __QuestOpenNPCMap__ = default(uint);
            var __QuestOpenItemID__ = default(uint);
            var __TaskQuestType__ = default(global::GameDB.E_TaskQuestType);
            var __CompleteCheck__ = default(global::GameDB.E_CompleteCheck);
            var __TermsMonsterID__ = default(uint);
            var __ItemGetMonsterID__ = default(uint);
            var __ItemGetRate__ = default(uint);
            var __DeliveryItemType__ = default(global::GameDB.E_DeliveryItemType);
            var __DeliveryItemID__ = default(uint);
            var __TargetLevel__ = default(byte);
            var __TargetTempleID__ = default(uint);
            var __ItemGetObjectID__ = default(uint);
            var __TalkNPCID__ = default(uint);
            var __TalkNPCMap__ = default(uint);
            var __MapMoveID__ = default(uint);
            var __MapPos__ = default(global::System.Collections.Generic.List<uint>);
            var __MapPosRange__ = default(uint);
            var __TargetCount__ = default(ulong);
            var __DialogueBeforeStartID__ = default(uint);
            var __DialogueAfterStartID__ = default(uint);
            var __DialogueTalkID__ = default(uint);
            var __DialogueGuideID__ = default(uint);
            var __DialogueEndID__ = default(uint);
            var __UIQuestNext__ = default(uint);
            var __UIChapter__ = default(uint);
            var __UIChapterType__ = default(global::GameDB.E_UIChapterType);
            var __ChapterName__ = default(string);
            var __ChapterIcon__ = default(string);
            var __QuestWarpPortalID__ = default(uint);
            var __AutoProgressType__ = default(global::GameDB.E_AutoProgressType);
            var __AutoNoneInfoType__ = default(global::GameDB.E_AutoNoneInfoType);
            var __InfoMsg__ = default(string);
            var __AutoCompleteType__ = default(global::GameDB.E_AutoCompleteType);
            var __UICompleteHideType__ = default(global::GameDB.E_UICompleteHideType);
            var __QuestCompleteHideNpcID__ = default(uint);
            var __QuestCompleteHideStageID__ = default(uint);
            var __QuestTermsText__ = default(string);
            var __QuestSimpleText__ = default(string);
            var __ChapterStartVideoType__ = default(global::GameDB.E_VideoType);
            var __ChapterStartVideo__ = default(string);
            var __ChapterEndVideoType__ = default(global::GameDB.E_VideoType);
            var __ChapterEndVideo__ = default(string);
            var __DialogueStartVideoType__ = default(global::GameDB.E_VideoType);
            var __DialogueStartVideo__ = default(string);
            var __QuestCompletableVideoType__ = default(global::GameDB.E_VideoType);
            var __QuestCompletableVideo__ = default(string);
            var __DialogueEndVideoType__ = default(global::GameDB.E_VideoType);
            var __DialogueEndVideo__ = default(string);
            var __RewardExpType__ = default(global::GameDB.E_RewardExpType);
            var __RewardExp__ = default(uint);
            var __RewardGoldCount__ = default(uint);
            var __RewardItemID__ = default(global::System.Collections.Generic.List<uint>);
            var __RewardItemCount__ = default(global::System.Collections.Generic.List<uint>);
            var __RewardChangeID__ = default(uint);
            var __RewardPetID__ = default(uint);
            var __RewardAbilityID__ = default(uint);
            var __RewardAbilityCount__ = default(uint);
            var __TempleStageID__ = default(uint);
            var __RandomRewardDropGroup__ = default(uint);
            var __SelectRewardItemID__ = default(global::System.Collections.Generic.List<uint>);
            var __SelectRewardItemCount__ = default(global::System.Collections.Generic.List<uint>);
            var __UIShortCut__ = default(global::GameDB.E_UIShortCut);
            var __RewardCharacterID__ = default(global::System.Collections.Generic.List<uint>);
            var __RewardCharacterItemID__ = default(global::System.Collections.Generic.List<uint>);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __QuestID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __QuestTextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __QuestType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_QuestType>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __UIQuestConfirmTarget__ = reader.ReadUInt32();
                        break;
                    case 4:
                        __UIQuestType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_UIQuestType>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __QuestSequence__ = reader.ReadUInt32();
                        break;
                    case 6:
                        __QuestGroupID__ = reader.ReadUInt32();
                        break;
                    case 7:
                        __QuestGroupRewardOn__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_QuestGroupRewardOn>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __QuestGroupOrder__ = reader.ReadUInt32();
                        break;
                    case 9:
                        __ConditionLevel__ = reader.ReadByte();
                        break;
                    case 10:
                        __ConditionQuestID1__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __ConditionQuestID2__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __ConditionQuestID3__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 13:
                        __NextQuestID__ = reader.ReadUInt32();
                        break;
                    case 14:
                        __QuestCharacterType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_CharacterType>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        __OpenDay__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_OpenDay>().Deserialize(ref reader, options);
                        break;
                    case 16:
                        __QuestOpenType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_QuestOpenType>().Deserialize(ref reader, options);
                        break;
                    case 17:
                        __QuestOpenNPCID__ = reader.ReadUInt32();
                        break;
                    case 18:
                        __QuestOpenNPCMap__ = reader.ReadUInt32();
                        break;
                    case 19:
                        __QuestOpenItemID__ = reader.ReadUInt32();
                        break;
                    case 20:
                        __TaskQuestType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_TaskQuestType>().Deserialize(ref reader, options);
                        break;
                    case 21:
                        __CompleteCheck__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_CompleteCheck>().Deserialize(ref reader, options);
                        break;
                    case 22:
                        __TermsMonsterID__ = reader.ReadUInt32();
                        break;
                    case 23:
                        __ItemGetMonsterID__ = reader.ReadUInt32();
                        break;
                    case 24:
                        __ItemGetRate__ = reader.ReadUInt32();
                        break;
                    case 25:
                        __DeliveryItemType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_DeliveryItemType>().Deserialize(ref reader, options);
                        break;
                    case 26:
                        __DeliveryItemID__ = reader.ReadUInt32();
                        break;
                    case 27:
                        __TargetLevel__ = reader.ReadByte();
                        break;
                    case 28:
                        __TargetTempleID__ = reader.ReadUInt32();
                        break;
                    case 29:
                        __ItemGetObjectID__ = reader.ReadUInt32();
                        break;
                    case 30:
                        __TalkNPCID__ = reader.ReadUInt32();
                        break;
                    case 31:
                        __TalkNPCMap__ = reader.ReadUInt32();
                        break;
                    case 32:
                        __MapMoveID__ = reader.ReadUInt32();
                        break;
                    case 33:
                        __MapPos__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 34:
                        __MapPosRange__ = reader.ReadUInt32();
                        break;
                    case 35:
                        __TargetCount__ = reader.ReadUInt64();
                        break;
                    case 36:
                        __DialogueBeforeStartID__ = reader.ReadUInt32();
                        break;
                    case 37:
                        __DialogueAfterStartID__ = reader.ReadUInt32();
                        break;
                    case 38:
                        __DialogueTalkID__ = reader.ReadUInt32();
                        break;
                    case 39:
                        __DialogueGuideID__ = reader.ReadUInt32();
                        break;
                    case 40:
                        __DialogueEndID__ = reader.ReadUInt32();
                        break;
                    case 41:
                        __UIQuestNext__ = reader.ReadUInt32();
                        break;
                    case 42:
                        __UIChapter__ = reader.ReadUInt32();
                        break;
                    case 43:
                        __UIChapterType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_UIChapterType>().Deserialize(ref reader, options);
                        break;
                    case 44:
                        __ChapterName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 45:
                        __ChapterIcon__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 46:
                        __QuestWarpPortalID__ = reader.ReadUInt32();
                        break;
                    case 47:
                        __AutoProgressType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_AutoProgressType>().Deserialize(ref reader, options);
                        break;
                    case 48:
                        __AutoNoneInfoType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_AutoNoneInfoType>().Deserialize(ref reader, options);
                        break;
                    case 49:
                        __InfoMsg__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 50:
                        __AutoCompleteType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_AutoCompleteType>().Deserialize(ref reader, options);
                        break;
                    case 51:
                        __UICompleteHideType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_UICompleteHideType>().Deserialize(ref reader, options);
                        break;
                    case 52:
                        __QuestCompleteHideNpcID__ = reader.ReadUInt32();
                        break;
                    case 53:
                        __QuestCompleteHideStageID__ = reader.ReadUInt32();
                        break;
                    case 54:
                        __QuestTermsText__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 55:
                        __QuestSimpleText__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 56:
                        __ChapterStartVideoType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_VideoType>().Deserialize(ref reader, options);
                        break;
                    case 57:
                        __ChapterStartVideo__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 58:
                        __ChapterEndVideoType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_VideoType>().Deserialize(ref reader, options);
                        break;
                    case 59:
                        __ChapterEndVideo__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 60:
                        __DialogueStartVideoType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_VideoType>().Deserialize(ref reader, options);
                        break;
                    case 61:
                        __DialogueStartVideo__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 62:
                        __QuestCompletableVideoType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_VideoType>().Deserialize(ref reader, options);
                        break;
                    case 63:
                        __QuestCompletableVideo__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 64:
                        __DialogueEndVideoType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_VideoType>().Deserialize(ref reader, options);
                        break;
                    case 65:
                        __DialogueEndVideo__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 66:
                        __RewardExpType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_RewardExpType>().Deserialize(ref reader, options);
                        break;
                    case 67:
                        __RewardExp__ = reader.ReadUInt32();
                        break;
                    case 68:
                        __RewardGoldCount__ = reader.ReadUInt32();
                        break;
                    case 69:
                        __RewardItemID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 70:
                        __RewardItemCount__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 71:
                        __RewardChangeID__ = reader.ReadUInt32();
                        break;
                    case 72:
                        __RewardPetID__ = reader.ReadUInt32();
                        break;
                    case 73:
                        __RewardAbilityID__ = reader.ReadUInt32();
                        break;
                    case 74:
                        __RewardAbilityCount__ = reader.ReadUInt32();
                        break;
                    case 75:
                        __TempleStageID__ = reader.ReadUInt32();
                        break;
                    case 76:
                        __RandomRewardDropGroup__ = reader.ReadUInt32();
                        break;
                    case 77:
                        __SelectRewardItemID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 78:
                        __SelectRewardItemCount__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 79:
                        __UIShortCut__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_UIShortCut>().Deserialize(ref reader, options);
                        break;
                    case 80:
                        __RewardCharacterID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 81:
                        __RewardCharacterItemID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Quest_Table();
            ____result.QuestID = __QuestID__;
            ____result.QuestTextID = __QuestTextID__;
            ____result.QuestType = __QuestType__;
            ____result.UIQuestConfirmTarget = __UIQuestConfirmTarget__;
            ____result.UIQuestType = __UIQuestType__;
            ____result.QuestSequence = __QuestSequence__;
            ____result.QuestGroupID = __QuestGroupID__;
            ____result.QuestGroupRewardOn = __QuestGroupRewardOn__;
            ____result.QuestGroupOrder = __QuestGroupOrder__;
            ____result.ConditionLevel = __ConditionLevel__;
            ____result.ConditionQuestID1 = __ConditionQuestID1__;
            ____result.ConditionQuestID2 = __ConditionQuestID2__;
            ____result.ConditionQuestID3 = __ConditionQuestID3__;
            ____result.NextQuestID = __NextQuestID__;
            ____result.QuestCharacterType = __QuestCharacterType__;
            ____result.OpenDay = __OpenDay__;
            ____result.QuestOpenType = __QuestOpenType__;
            ____result.QuestOpenNPCID = __QuestOpenNPCID__;
            ____result.QuestOpenNPCMap = __QuestOpenNPCMap__;
            ____result.QuestOpenItemID = __QuestOpenItemID__;
            ____result.TaskQuestType = __TaskQuestType__;
            ____result.CompleteCheck = __CompleteCheck__;
            ____result.TermsMonsterID = __TermsMonsterID__;
            ____result.ItemGetMonsterID = __ItemGetMonsterID__;
            ____result.ItemGetRate = __ItemGetRate__;
            ____result.DeliveryItemType = __DeliveryItemType__;
            ____result.DeliveryItemID = __DeliveryItemID__;
            ____result.TargetLevel = __TargetLevel__;
            ____result.TargetTempleID = __TargetTempleID__;
            ____result.ItemGetObjectID = __ItemGetObjectID__;
            ____result.TalkNPCID = __TalkNPCID__;
            ____result.TalkNPCMap = __TalkNPCMap__;
            ____result.MapMoveID = __MapMoveID__;
            ____result.MapPos = __MapPos__;
            ____result.MapPosRange = __MapPosRange__;
            ____result.TargetCount = __TargetCount__;
            ____result.DialogueBeforeStartID = __DialogueBeforeStartID__;
            ____result.DialogueAfterStartID = __DialogueAfterStartID__;
            ____result.DialogueTalkID = __DialogueTalkID__;
            ____result.DialogueGuideID = __DialogueGuideID__;
            ____result.DialogueEndID = __DialogueEndID__;
            ____result.UIQuestNext = __UIQuestNext__;
            ____result.UIChapter = __UIChapter__;
            ____result.UIChapterType = __UIChapterType__;
            ____result.ChapterName = __ChapterName__;
            ____result.ChapterIcon = __ChapterIcon__;
            ____result.QuestWarpPortalID = __QuestWarpPortalID__;
            ____result.AutoProgressType = __AutoProgressType__;
            ____result.AutoNoneInfoType = __AutoNoneInfoType__;
            ____result.InfoMsg = __InfoMsg__;
            ____result.AutoCompleteType = __AutoCompleteType__;
            ____result.UICompleteHideType = __UICompleteHideType__;
            ____result.QuestCompleteHideNpcID = __QuestCompleteHideNpcID__;
            ____result.QuestCompleteHideStageID = __QuestCompleteHideStageID__;
            ____result.QuestTermsText = __QuestTermsText__;
            ____result.QuestSimpleText = __QuestSimpleText__;
            ____result.ChapterStartVideoType = __ChapterStartVideoType__;
            ____result.ChapterStartVideo = __ChapterStartVideo__;
            ____result.ChapterEndVideoType = __ChapterEndVideoType__;
            ____result.ChapterEndVideo = __ChapterEndVideo__;
            ____result.DialogueStartVideoType = __DialogueStartVideoType__;
            ____result.DialogueStartVideo = __DialogueStartVideo__;
            ____result.QuestCompletableVideoType = __QuestCompletableVideoType__;
            ____result.QuestCompletableVideo = __QuestCompletableVideo__;
            ____result.DialogueEndVideoType = __DialogueEndVideoType__;
            ____result.DialogueEndVideo = __DialogueEndVideo__;
            ____result.RewardExpType = __RewardExpType__;
            ____result.RewardExp = __RewardExp__;
            ____result.RewardGoldCount = __RewardGoldCount__;
            ____result.RewardItemID = __RewardItemID__;
            ____result.RewardItemCount = __RewardItemCount__;
            ____result.RewardChangeID = __RewardChangeID__;
            ____result.RewardPetID = __RewardPetID__;
            ____result.RewardAbilityID = __RewardAbilityID__;
            ____result.RewardAbilityCount = __RewardAbilityCount__;
            ____result.TempleStageID = __TempleStageID__;
            ____result.RandomRewardDropGroup = __RandomRewardDropGroup__;
            ____result.SelectRewardItemID = __SelectRewardItemID__;
            ____result.SelectRewardItemCount = __SelectRewardItemCount__;
            ____result.UIShortCut = __UIShortCut__;
            ____result.RewardCharacterID = __RewardCharacterID__;
            ____result.RewardCharacterItemID = __RewardCharacterItemID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class QuestEvent_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.QuestEvent_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.QuestEvent_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(17);
            writer.Write(value.EventQuestID);
            writer.Write(value.GroupID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.EventQuestTextID, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_EventOpenDay>().Serialize(ref writer, value.EventOpenDay, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_EventCompleteCheck>().Serialize(ref writer, value.CompleteCheck, options);
            writer.Write(value.TermsMonsterID);
            writer.Write(value.TargetLevel);
            writer.Write(value.TargetTempleID);
            writer.Write(value.ItemGetObjectID);
            writer.Write(value.MapMoveID);
            writer.Write(value.TargetItemID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_MakeType>().Serialize(ref writer, value.TargetMakeType, options);
            writer.Write(value.TargetCount);
            writer.Write(value.RewardGoldCount);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.RewardItemID, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.RewardItemCount, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.QuestMissionRewardCount, options);
        }

        public global::GameDB.QuestEvent_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __EventQuestID__ = default(uint);
            var __GroupID__ = default(uint);
            var __EventQuestTextID__ = default(string);
            var __EventOpenDay__ = default(global::GameDB.E_EventOpenDay);
            var __CompleteCheck__ = default(global::GameDB.E_EventCompleteCheck);
            var __TermsMonsterID__ = default(uint);
            var __TargetLevel__ = default(byte);
            var __TargetTempleID__ = default(uint);
            var __ItemGetObjectID__ = default(uint);
            var __MapMoveID__ = default(uint);
            var __TargetItemID__ = default(uint);
            var __TargetMakeType__ = default(global::GameDB.E_MakeType);
            var __TargetCount__ = default(ulong);
            var __RewardGoldCount__ = default(uint);
            var __RewardItemID__ = default(global::System.Collections.Generic.List<uint>);
            var __RewardItemCount__ = default(global::System.Collections.Generic.List<uint>);
            var __QuestMissionRewardCount__ = default(global::System.Collections.Generic.List<uint>);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __EventQuestID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __GroupID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __EventQuestTextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __EventOpenDay__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_EventOpenDay>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __CompleteCheck__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_EventCompleteCheck>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __TermsMonsterID__ = reader.ReadUInt32();
                        break;
                    case 6:
                        __TargetLevel__ = reader.ReadByte();
                        break;
                    case 7:
                        __TargetTempleID__ = reader.ReadUInt32();
                        break;
                    case 8:
                        __ItemGetObjectID__ = reader.ReadUInt32();
                        break;
                    case 9:
                        __MapMoveID__ = reader.ReadUInt32();
                        break;
                    case 10:
                        __TargetItemID__ = reader.ReadUInt32();
                        break;
                    case 11:
                        __TargetMakeType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_MakeType>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __TargetCount__ = reader.ReadUInt64();
                        break;
                    case 13:
                        __RewardGoldCount__ = reader.ReadUInt32();
                        break;
                    case 14:
                        __RewardItemID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        __RewardItemCount__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 16:
                        __QuestMissionRewardCount__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.QuestEvent_Table();
            ____result.EventQuestID = __EventQuestID__;
            ____result.GroupID = __GroupID__;
            ____result.EventQuestTextID = __EventQuestTextID__;
            ____result.EventOpenDay = __EventOpenDay__;
            ____result.CompleteCheck = __CompleteCheck__;
            ____result.TermsMonsterID = __TermsMonsterID__;
            ____result.TargetLevel = __TargetLevel__;
            ____result.TargetTempleID = __TargetTempleID__;
            ____result.ItemGetObjectID = __ItemGetObjectID__;
            ____result.MapMoveID = __MapMoveID__;
            ____result.TargetItemID = __TargetItemID__;
            ____result.TargetMakeType = __TargetMakeType__;
            ____result.TargetCount = __TargetCount__;
            ____result.RewardGoldCount = __RewardGoldCount__;
            ____result.RewardItemID = __RewardItemID__;
            ____result.RewardItemCount = __RewardItemCount__;
            ____result.QuestMissionRewardCount = __QuestMissionRewardCount__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RankBuff_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.RankBuff_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.RankBuff_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(7);
            writer.Write(value.RankBuffID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_RankBuffType>().Serialize(ref writer, value.RankBuffType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_CharacterType>().Serialize(ref writer, value.CharacterType, options);
            writer.Write(value.MinRanking);
            writer.Write(value.MaxRanking);
            writer.Write(value.AbilityActionID_01);
            writer.Write(value.AbilityActionID_02);
        }

        public global::GameDB.RankBuff_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __RankBuffID__ = default(uint);
            var __RankBuffType__ = default(global::GameDB.E_RankBuffType);
            var __CharacterType__ = default(global::GameDB.E_CharacterType);
            var __MinRanking__ = default(uint);
            var __MaxRanking__ = default(uint);
            var __AbilityActionID_01__ = default(uint);
            var __AbilityActionID_02__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __RankBuffID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __RankBuffType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_RankBuffType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __CharacterType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_CharacterType>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __MinRanking__ = reader.ReadUInt32();
                        break;
                    case 4:
                        __MaxRanking__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __AbilityActionID_01__ = reader.ReadUInt32();
                        break;
                    case 6:
                        __AbilityActionID_02__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.RankBuff_Table();
            ____result.RankBuffID = __RankBuffID__;
            ____result.RankBuffType = __RankBuffType__;
            ____result.CharacterType = __CharacterType__;
            ____result.MinRanking = __MinRanking__;
            ____result.MaxRanking = __MaxRanking__;
            ____result.AbilityActionID_01 = __AbilityActionID_01__;
            ____result.AbilityActionID_02 = __AbilityActionID_02__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Resource_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Resource_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Resource_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(60);
            writer.Write(value.ResourceID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ResourceFile, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.LobbyFile, options);
            writer.Write(value.WalkSpeed);
            writer.Write(value.RunSpeed);
            writer.Write(value.Diameter);
            writer.Write(value.SizeX);
            writer.Write(value.SizeY);
            writer.Write(value.SizeZ);
            writer.Write(value.DieEffectID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.AttackAni_01, options);
            writer.Write(value.AttackEffectID_01);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.AttackAni_02, options);
            writer.Write(value.AttackEffectID_02);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.AttackAni_03, options);
            writer.Write(value.AttackEffectID_03);
            writer.Write(value.CriticalEffectID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.BuffAni_01, options);
            writer.Write(value.BuffEffectID_01);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.SkillAni_01, options);
            writer.Write(value.SkillEffectID_01);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.SkillAni_02, options);
            writer.Write(value.SkillEffectID_02);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.CastingAni, options);
            writer.Write(value.Casting_S_EffectID);
            writer.Write(value.Casting_I_EffectID);
            writer.Write(value.Casting_A_EffectID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.RushAni, options);
            writer.Write(value.Rush_S_EffectID);
            writer.Write(value.Rush_I_EffectID);
            writer.Write(value.Rush_A_EffectID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.LeapAni, options);
            writer.Write(value.Leap_S_EffectID);
            writer.Write(value.Leap_I_EffectID);
            writer.Write(value.Leap_A_EffectID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.PullAni, options);
            writer.Write(value.PullEffectID);
            writer.Write(value.MissileEffect_Base);
            writer.Write(value.MissileEffect_01);
            writer.Write(value.MissileEffect_02);
            writer.Write(value.MissileEffect_03);
            writer.Write(value.MissileEffect_04);
            writer.Write(value.HitEffect);
            writer.Write(value.LobbyEffectTID);
            writer.Write(value.AttackSoundID);
            writer.Write(value.CriticalSoundID);
            writer.Write(value.SkillSoundID);
            writer.Write(value.BuffSoundID);
            writer.Write(value.HitSoundID);
            writer.Write(value.DieSoundID);
            writer.Write(value.Casting_S_SoundID);
            writer.Write(value.Casting_I_SoundID);
            writer.Write(value.Casting_A_SoundID);
            writer.Write(value.Rush_S_SoundID);
            writer.Write(value.Rush_I_SoundID);
            writer.Write(value.Rush_A_SoundID);
            writer.Write(value.Leap_S_SoundID);
            writer.Write(value.Leap_I_SoundID);
            writer.Write(value.Leap_A_SoundID);
            writer.Write(value.PullSoundID);
        }

        public global::GameDB.Resource_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __ResourceID__ = default(uint);
            var __ResourceFile__ = default(string);
            var __LobbyFile__ = default(string);
            var __WalkSpeed__ = default(float);
            var __RunSpeed__ = default(float);
            var __Diameter__ = default(float);
            var __SizeX__ = default(float);
            var __SizeY__ = default(float);
            var __SizeZ__ = default(float);
            var __DieEffectID__ = default(uint);
            var __AttackAni_01__ = default(string);
            var __AttackEffectID_01__ = default(uint);
            var __AttackAni_02__ = default(string);
            var __AttackEffectID_02__ = default(uint);
            var __AttackAni_03__ = default(string);
            var __AttackEffectID_03__ = default(uint);
            var __CriticalEffectID__ = default(uint);
            var __BuffAni_01__ = default(string);
            var __BuffEffectID_01__ = default(uint);
            var __SkillAni_01__ = default(string);
            var __SkillEffectID_01__ = default(uint);
            var __SkillAni_02__ = default(string);
            var __SkillEffectID_02__ = default(uint);
            var __CastingAni__ = default(string);
            var __Casting_S_EffectID__ = default(uint);
            var __Casting_I_EffectID__ = default(uint);
            var __Casting_A_EffectID__ = default(uint);
            var __RushAni__ = default(string);
            var __Rush_S_EffectID__ = default(uint);
            var __Rush_I_EffectID__ = default(uint);
            var __Rush_A_EffectID__ = default(uint);
            var __LeapAni__ = default(string);
            var __Leap_S_EffectID__ = default(uint);
            var __Leap_I_EffectID__ = default(uint);
            var __Leap_A_EffectID__ = default(uint);
            var __PullAni__ = default(string);
            var __PullEffectID__ = default(uint);
            var __MissileEffect_Base__ = default(uint);
            var __MissileEffect_01__ = default(uint);
            var __MissileEffect_02__ = default(uint);
            var __MissileEffect_03__ = default(uint);
            var __MissileEffect_04__ = default(uint);
            var __HitEffect__ = default(uint);
            var __LobbyEffectTID__ = default(uint);
            var __AttackSoundID__ = default(uint);
            var __CriticalSoundID__ = default(uint);
            var __SkillSoundID__ = default(uint);
            var __BuffSoundID__ = default(uint);
            var __HitSoundID__ = default(uint);
            var __DieSoundID__ = default(uint);
            var __Casting_S_SoundID__ = default(uint);
            var __Casting_I_SoundID__ = default(uint);
            var __Casting_A_SoundID__ = default(uint);
            var __Rush_S_SoundID__ = default(uint);
            var __Rush_I_SoundID__ = default(uint);
            var __Rush_A_SoundID__ = default(uint);
            var __Leap_S_SoundID__ = default(uint);
            var __Leap_I_SoundID__ = default(uint);
            var __Leap_A_SoundID__ = default(uint);
            var __PullSoundID__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __ResourceID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __ResourceFile__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __LobbyFile__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __WalkSpeed__ = reader.ReadSingle();
                        break;
                    case 4:
                        __RunSpeed__ = reader.ReadSingle();
                        break;
                    case 5:
                        __Diameter__ = reader.ReadSingle();
                        break;
                    case 6:
                        __SizeX__ = reader.ReadSingle();
                        break;
                    case 7:
                        __SizeY__ = reader.ReadSingle();
                        break;
                    case 8:
                        __SizeZ__ = reader.ReadSingle();
                        break;
                    case 9:
                        __DieEffectID__ = reader.ReadUInt32();
                        break;
                    case 10:
                        __AttackAni_01__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __AttackEffectID_01__ = reader.ReadUInt32();
                        break;
                    case 12:
                        __AttackAni_02__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 13:
                        __AttackEffectID_02__ = reader.ReadUInt32();
                        break;
                    case 14:
                        __AttackAni_03__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        __AttackEffectID_03__ = reader.ReadUInt32();
                        break;
                    case 16:
                        __CriticalEffectID__ = reader.ReadUInt32();
                        break;
                    case 17:
                        __BuffAni_01__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 18:
                        __BuffEffectID_01__ = reader.ReadUInt32();
                        break;
                    case 19:
                        __SkillAni_01__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 20:
                        __SkillEffectID_01__ = reader.ReadUInt32();
                        break;
                    case 21:
                        __SkillAni_02__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 22:
                        __SkillEffectID_02__ = reader.ReadUInt32();
                        break;
                    case 23:
                        __CastingAni__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 24:
                        __Casting_S_EffectID__ = reader.ReadUInt32();
                        break;
                    case 25:
                        __Casting_I_EffectID__ = reader.ReadUInt32();
                        break;
                    case 26:
                        __Casting_A_EffectID__ = reader.ReadUInt32();
                        break;
                    case 27:
                        __RushAni__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 28:
                        __Rush_S_EffectID__ = reader.ReadUInt32();
                        break;
                    case 29:
                        __Rush_I_EffectID__ = reader.ReadUInt32();
                        break;
                    case 30:
                        __Rush_A_EffectID__ = reader.ReadUInt32();
                        break;
                    case 31:
                        __LeapAni__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 32:
                        __Leap_S_EffectID__ = reader.ReadUInt32();
                        break;
                    case 33:
                        __Leap_I_EffectID__ = reader.ReadUInt32();
                        break;
                    case 34:
                        __Leap_A_EffectID__ = reader.ReadUInt32();
                        break;
                    case 35:
                        __PullAni__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 36:
                        __PullEffectID__ = reader.ReadUInt32();
                        break;
                    case 37:
                        __MissileEffect_Base__ = reader.ReadUInt32();
                        break;
                    case 38:
                        __MissileEffect_01__ = reader.ReadUInt32();
                        break;
                    case 39:
                        __MissileEffect_02__ = reader.ReadUInt32();
                        break;
                    case 40:
                        __MissileEffect_03__ = reader.ReadUInt32();
                        break;
                    case 41:
                        __MissileEffect_04__ = reader.ReadUInt32();
                        break;
                    case 42:
                        __HitEffect__ = reader.ReadUInt32();
                        break;
                    case 43:
                        __LobbyEffectTID__ = reader.ReadUInt32();
                        break;
                    case 44:
                        __AttackSoundID__ = reader.ReadUInt32();
                        break;
                    case 45:
                        __CriticalSoundID__ = reader.ReadUInt32();
                        break;
                    case 46:
                        __SkillSoundID__ = reader.ReadUInt32();
                        break;
                    case 47:
                        __BuffSoundID__ = reader.ReadUInt32();
                        break;
                    case 48:
                        __HitSoundID__ = reader.ReadUInt32();
                        break;
                    case 49:
                        __DieSoundID__ = reader.ReadUInt32();
                        break;
                    case 50:
                        __Casting_S_SoundID__ = reader.ReadUInt32();
                        break;
                    case 51:
                        __Casting_I_SoundID__ = reader.ReadUInt32();
                        break;
                    case 52:
                        __Casting_A_SoundID__ = reader.ReadUInt32();
                        break;
                    case 53:
                        __Rush_S_SoundID__ = reader.ReadUInt32();
                        break;
                    case 54:
                        __Rush_I_SoundID__ = reader.ReadUInt32();
                        break;
                    case 55:
                        __Rush_A_SoundID__ = reader.ReadUInt32();
                        break;
                    case 56:
                        __Leap_S_SoundID__ = reader.ReadUInt32();
                        break;
                    case 57:
                        __Leap_I_SoundID__ = reader.ReadUInt32();
                        break;
                    case 58:
                        __Leap_A_SoundID__ = reader.ReadUInt32();
                        break;
                    case 59:
                        __PullSoundID__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Resource_Table();
            ____result.ResourceID = __ResourceID__;
            ____result.ResourceFile = __ResourceFile__;
            ____result.LobbyFile = __LobbyFile__;
            ____result.WalkSpeed = __WalkSpeed__;
            ____result.RunSpeed = __RunSpeed__;
            ____result.Diameter = __Diameter__;
            ____result.SizeX = __SizeX__;
            ____result.SizeY = __SizeY__;
            ____result.SizeZ = __SizeZ__;
            ____result.DieEffectID = __DieEffectID__;
            ____result.AttackAni_01 = __AttackAni_01__;
            ____result.AttackEffectID_01 = __AttackEffectID_01__;
            ____result.AttackAni_02 = __AttackAni_02__;
            ____result.AttackEffectID_02 = __AttackEffectID_02__;
            ____result.AttackAni_03 = __AttackAni_03__;
            ____result.AttackEffectID_03 = __AttackEffectID_03__;
            ____result.CriticalEffectID = __CriticalEffectID__;
            ____result.BuffAni_01 = __BuffAni_01__;
            ____result.BuffEffectID_01 = __BuffEffectID_01__;
            ____result.SkillAni_01 = __SkillAni_01__;
            ____result.SkillEffectID_01 = __SkillEffectID_01__;
            ____result.SkillAni_02 = __SkillAni_02__;
            ____result.SkillEffectID_02 = __SkillEffectID_02__;
            ____result.CastingAni = __CastingAni__;
            ____result.Casting_S_EffectID = __Casting_S_EffectID__;
            ____result.Casting_I_EffectID = __Casting_I_EffectID__;
            ____result.Casting_A_EffectID = __Casting_A_EffectID__;
            ____result.RushAni = __RushAni__;
            ____result.Rush_S_EffectID = __Rush_S_EffectID__;
            ____result.Rush_I_EffectID = __Rush_I_EffectID__;
            ____result.Rush_A_EffectID = __Rush_A_EffectID__;
            ____result.LeapAni = __LeapAni__;
            ____result.Leap_S_EffectID = __Leap_S_EffectID__;
            ____result.Leap_I_EffectID = __Leap_I_EffectID__;
            ____result.Leap_A_EffectID = __Leap_A_EffectID__;
            ____result.PullAni = __PullAni__;
            ____result.PullEffectID = __PullEffectID__;
            ____result.MissileEffect_Base = __MissileEffect_Base__;
            ____result.MissileEffect_01 = __MissileEffect_01__;
            ____result.MissileEffect_02 = __MissileEffect_02__;
            ____result.MissileEffect_03 = __MissileEffect_03__;
            ____result.MissileEffect_04 = __MissileEffect_04__;
            ____result.HitEffect = __HitEffect__;
            ____result.LobbyEffectTID = __LobbyEffectTID__;
            ____result.AttackSoundID = __AttackSoundID__;
            ____result.CriticalSoundID = __CriticalSoundID__;
            ____result.SkillSoundID = __SkillSoundID__;
            ____result.BuffSoundID = __BuffSoundID__;
            ____result.HitSoundID = __HitSoundID__;
            ____result.DieSoundID = __DieSoundID__;
            ____result.Casting_S_SoundID = __Casting_S_SoundID__;
            ____result.Casting_I_SoundID = __Casting_I_SoundID__;
            ____result.Casting_A_SoundID = __Casting_A_SoundID__;
            ____result.Rush_S_SoundID = __Rush_S_SoundID__;
            ____result.Rush_I_SoundID = __Rush_I_SoundID__;
            ____result.Rush_A_SoundID = __Rush_A_SoundID__;
            ____result.Leap_S_SoundID = __Leap_S_SoundID__;
            ____result.Leap_I_SoundID = __Leap_I_SoundID__;
            ____result.Leap_A_SoundID = __Leap_A_SoundID__;
            ____result.PullSoundID = __PullSoundID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Restoration_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Restoration_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Restoration_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(12);
            writer.Write(value.RestorationID);
            writer.Write(value.RestorationGroup);
            writer.Write(value.RestorationCheck);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_CategoryType>().Serialize(ref writer, value.CategoryType, options);
            writer.Write(value.HighTierRate);
            writer.Write(value.HighTierItemReward);
            writer.Write(value.ChangeHighTierGroupID);
            writer.Write(value.ChangeSameTierGroupID);
            writer.Write(value.PetHighTierGroupID);
            writer.Write(value.PetSameTierGroupID);
            writer.Write(value.FailReward);
            writer.Write(value.FailRewardCnt);
        }

        public global::GameDB.Restoration_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __RestorationID__ = default(uint);
            var __RestorationGroup__ = default(uint);
            var __RestorationCheck__ = default(uint);
            var __CategoryType__ = default(global::GameDB.E_CategoryType);
            var __HighTierRate__ = default(uint);
            var __HighTierItemReward__ = default(uint);
            var __ChangeHighTierGroupID__ = default(uint);
            var __ChangeSameTierGroupID__ = default(uint);
            var __PetHighTierGroupID__ = default(uint);
            var __PetSameTierGroupID__ = default(uint);
            var __FailReward__ = default(uint);
            var __FailRewardCnt__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __RestorationID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __RestorationGroup__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __RestorationCheck__ = reader.ReadUInt32();
                        break;
                    case 3:
                        __CategoryType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_CategoryType>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __HighTierRate__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __HighTierItemReward__ = reader.ReadUInt32();
                        break;
                    case 6:
                        __ChangeHighTierGroupID__ = reader.ReadUInt32();
                        break;
                    case 7:
                        __ChangeSameTierGroupID__ = reader.ReadUInt32();
                        break;
                    case 8:
                        __PetHighTierGroupID__ = reader.ReadUInt32();
                        break;
                    case 9:
                        __PetSameTierGroupID__ = reader.ReadUInt32();
                        break;
                    case 10:
                        __FailReward__ = reader.ReadUInt32();
                        break;
                    case 11:
                        __FailRewardCnt__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Restoration_Table();
            ____result.RestorationID = __RestorationID__;
            ____result.RestorationGroup = __RestorationGroup__;
            ____result.RestorationCheck = __RestorationCheck__;
            ____result.CategoryType = __CategoryType__;
            ____result.HighTierRate = __HighTierRate__;
            ____result.HighTierItemReward = __HighTierItemReward__;
            ____result.ChangeHighTierGroupID = __ChangeHighTierGroupID__;
            ____result.ChangeSameTierGroupID = __ChangeSameTierGroupID__;
            ____result.PetHighTierGroupID = __PetHighTierGroupID__;
            ____result.PetSameTierGroupID = __PetSameTierGroupID__;
            ____result.FailReward = __FailReward__;
            ____result.FailRewardCnt = __FailRewardCnt__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RuneComponent_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.RuneComponent_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.RuneComponent_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(9);
            writer.Write(value.RuneComponentID);
            writer.Write(value.ItemID);
            writer.Write(value.MainOptionID);
            writer.Write(value.FirstOptionID);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.SubOptionID_01, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.SubOptionID_02, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.SubOptionID_03, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.SubOptionID_04, options);
            writer.Write(value.RuneEnchant);
        }

        public global::GameDB.RuneComponent_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __RuneComponentID__ = default(uint);
            var __ItemID__ = default(uint);
            var __MainOptionID__ = default(uint);
            var __FirstOptionID__ = default(uint);
            var __SubOptionID_01__ = default(global::System.Collections.Generic.List<uint>);
            var __SubOptionID_02__ = default(global::System.Collections.Generic.List<uint>);
            var __SubOptionID_03__ = default(global::System.Collections.Generic.List<uint>);
            var __SubOptionID_04__ = default(global::System.Collections.Generic.List<uint>);
            var __RuneEnchant__ = default(byte);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __RuneComponentID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __ItemID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __MainOptionID__ = reader.ReadUInt32();
                        break;
                    case 3:
                        __FirstOptionID__ = reader.ReadUInt32();
                        break;
                    case 4:
                        __SubOptionID_01__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __SubOptionID_02__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __SubOptionID_03__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __SubOptionID_04__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __RuneEnchant__ = reader.ReadByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.RuneComponent_Table();
            ____result.RuneComponentID = __RuneComponentID__;
            ____result.ItemID = __ItemID__;
            ____result.MainOptionID = __MainOptionID__;
            ____result.FirstOptionID = __FirstOptionID__;
            ____result.SubOptionID_01 = __SubOptionID_01__;
            ____result.SubOptionID_02 = __SubOptionID_02__;
            ____result.SubOptionID_03 = __SubOptionID_03__;
            ____result.SubOptionID_04 = __SubOptionID_04__;
            ____result.RuneEnchant = __RuneEnchant__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RuneEnchant_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.RuneEnchant_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.RuneEnchant_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(10);
            writer.Write(value.RuneEnchantID);
            writer.Write(value.GroupID);
            writer.Write(value.EnchantStep);
            writer.Write(value.EnchantRate);
            writer.Write(value.EnchantItemCount);
            writer.Write(value.AbilityActionID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_GetSupOptionType>().Serialize(ref writer, value.GetSupOptionType, options);
            writer.Write(value.SupOptionCount);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_RuneGradeType>().Serialize(ref writer, value.CheckGradeType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_RuneGradeType>().Serialize(ref writer, value.UpGradeType, options);
        }

        public global::GameDB.RuneEnchant_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __RuneEnchantID__ = default(uint);
            var __GroupID__ = default(uint);
            var __EnchantStep__ = default(byte);
            var __EnchantRate__ = default(uint);
            var __EnchantItemCount__ = default(uint);
            var __AbilityActionID__ = default(uint);
            var __GetSupOptionType__ = default(global::GameDB.E_GetSupOptionType);
            var __SupOptionCount__ = default(byte);
            var __CheckGradeType__ = default(global::GameDB.E_RuneGradeType);
            var __UpGradeType__ = default(global::GameDB.E_RuneGradeType);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __RuneEnchantID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __GroupID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __EnchantStep__ = reader.ReadByte();
                        break;
                    case 3:
                        __EnchantRate__ = reader.ReadUInt32();
                        break;
                    case 4:
                        __EnchantItemCount__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __AbilityActionID__ = reader.ReadUInt32();
                        break;
                    case 6:
                        __GetSupOptionType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_GetSupOptionType>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __SupOptionCount__ = reader.ReadByte();
                        break;
                    case 8:
                        __CheckGradeType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_RuneGradeType>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __UpGradeType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_RuneGradeType>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.RuneEnchant_Table();
            ____result.RuneEnchantID = __RuneEnchantID__;
            ____result.GroupID = __GroupID__;
            ____result.EnchantStep = __EnchantStep__;
            ____result.EnchantRate = __EnchantRate__;
            ____result.EnchantItemCount = __EnchantItemCount__;
            ____result.AbilityActionID = __AbilityActionID__;
            ____result.GetSupOptionType = __GetSupOptionType__;
            ____result.SupOptionCount = __SupOptionCount__;
            ____result.CheckGradeType = __CheckGradeType__;
            ____result.UpGradeType = __UpGradeType__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RuneOption_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.RuneOption_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.RuneOption_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(8);
            writer.Write(value.RuneOptionID);
            writer.Write(value.GroupID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_RuneOptionType>().Serialize(ref writer, value.RuneOptionType, options);
            writer.Write(value.GetRate);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_AbilityType>().Serialize(ref writer, value.RuneAbilityType, options);
            writer.Write(value.AbilityActionID);
            writer.Write(value.RuneEnchantID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.TextID, options);
        }

        public global::GameDB.RuneOption_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __RuneOptionID__ = default(uint);
            var __GroupID__ = default(uint);
            var __RuneOptionType__ = default(global::GameDB.E_RuneOptionType);
            var __GetRate__ = default(uint);
            var __RuneAbilityType__ = default(global::GameDB.E_AbilityType);
            var __AbilityActionID__ = default(uint);
            var __RuneEnchantID__ = default(uint);
            var __TextID__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __RuneOptionID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __GroupID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __RuneOptionType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_RuneOptionType>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __GetRate__ = reader.ReadUInt32();
                        break;
                    case 4:
                        __RuneAbilityType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_AbilityType>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __AbilityActionID__ = reader.ReadUInt32();
                        break;
                    case 6:
                        __RuneEnchantID__ = reader.ReadUInt32();
                        break;
                    case 7:
                        __TextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.RuneOption_Table();
            ____result.RuneOptionID = __RuneOptionID__;
            ____result.GroupID = __GroupID__;
            ____result.RuneOptionType = __RuneOptionType__;
            ____result.GetRate = __GetRate__;
            ____result.RuneAbilityType = __RuneAbilityType__;
            ____result.AbilityActionID = __AbilityActionID__;
            ____result.RuneEnchantID = __RuneEnchantID__;
            ____result.TextID = __TextID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RuneSet_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.RuneSet_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.RuneSet_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            writer.Write(value.RuneSetID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_RuneSetType>().Serialize(ref writer, value.RuneSetType, options);
            writer.Write(value.SetCompleteCount);
            writer.Write(value.AbilityActionID);
            writer.Write(value.RuneItemId);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.SetTextID, options);
        }

        public global::GameDB.RuneSet_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __RuneSetID__ = default(uint);
            var __RuneSetType__ = default(global::GameDB.E_RuneSetType);
            var __SetCompleteCount__ = default(byte);
            var __AbilityActionID__ = default(uint);
            var __RuneItemId__ = default(uint);
            var __SetTextID__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __RuneSetID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __RuneSetType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_RuneSetType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __SetCompleteCount__ = reader.ReadByte();
                        break;
                    case 3:
                        __AbilityActionID__ = reader.ReadUInt32();
                        break;
                    case 4:
                        __RuneItemId__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __SetTextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.RuneSet_Table();
            ____result.RuneSetID = __RuneSetID__;
            ____result.RuneSetType = __RuneSetType__;
            ____result.SetCompleteCount = __SetCompleteCount__;
            ____result.AbilityActionID = __AbilityActionID__;
            ____result.RuneItemId = __RuneItemId__;
            ____result.SetTextID = __SetTextID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ScenarioAbility_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.ScenarioAbility_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.ScenarioAbility_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            writer.Write(value.ScenarioAbilityID);
            writer.Write(value.AbilityActionID);
            writer.Write(value.QuickAbilityTime);
            writer.Write(value.QuickAbilityCount);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.QuickAbilityIcon, options);
        }

        public global::GameDB.ScenarioAbility_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __ScenarioAbilityID__ = default(uint);
            var __AbilityActionID__ = default(uint);
            var __QuickAbilityTime__ = default(uint);
            var __QuickAbilityCount__ = default(uint);
            var __QuickAbilityIcon__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __ScenarioAbilityID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __AbilityActionID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __QuickAbilityTime__ = reader.ReadUInt32();
                        break;
                    case 3:
                        __QuickAbilityCount__ = reader.ReadUInt32();
                        break;
                    case 4:
                        __QuickAbilityIcon__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.ScenarioAbility_Table();
            ____result.ScenarioAbilityID = __ScenarioAbilityID__;
            ____result.AbilityActionID = __AbilityActionID__;
            ____result.QuickAbilityTime = __QuickAbilityTime__;
            ____result.QuickAbilityCount = __QuickAbilityCount__;
            ____result.QuickAbilityIcon = __QuickAbilityIcon__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ScenarioDirection_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.ScenarioDirection_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.ScenarioDirection_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(18);
            writer.Write(value.ScenarioDirectionID);
            writer.Write(value.DirectionGroup);
            writer.Write(value.Step);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ScenarioDirectionType>().Serialize(ref writer, value.ScenarioDirectionType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.DialogueNPCName, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.DialogueText, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ScenarioDialogueType>().Serialize(ref writer, value.ScenarioDialogueType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.DialogueResource, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Serialize(ref writer, value.DialogueAddResources, options);
            writer.Write(value.DialogueAddSound);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.DialogueBG, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Serialize(ref writer, value.DialogueParams, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.GuideImage, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.GuideText, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.GuideFailText, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ScenarioGuideType>().Serialize(ref writer, value.ScenarioGuideType, options);
            writer.Write(value.GuideDuration);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.SoundID, options);
        }

        public global::GameDB.ScenarioDirection_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __ScenarioDirectionID__ = default(uint);
            var __DirectionGroup__ = default(uint);
            var __Step__ = default(byte);
            var __ScenarioDirectionType__ = default(global::GameDB.E_ScenarioDirectionType);
            var __DialogueNPCName__ = default(string);
            var __DialogueText__ = default(string);
            var __ScenarioDialogueType__ = default(global::GameDB.E_ScenarioDialogueType);
            var __DialogueResource__ = default(string);
            var __DialogueAddResources__ = default(global::System.Collections.Generic.List<string>);
            var __DialogueAddSound__ = default(uint);
            var __DialogueBG__ = default(string);
            var __DialogueParams__ = default(global::System.Collections.Generic.List<string>);
            var __GuideImage__ = default(string);
            var __GuideText__ = default(string);
            var __GuideFailText__ = default(string);
            var __ScenarioGuideType__ = default(global::GameDB.E_ScenarioGuideType);
            var __GuideDuration__ = default(uint);
            var __SoundID__ = default(global::System.Collections.Generic.List<uint>);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __ScenarioDirectionID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __DirectionGroup__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __Step__ = reader.ReadByte();
                        break;
                    case 3:
                        __ScenarioDirectionType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ScenarioDirectionType>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __DialogueNPCName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __DialogueText__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __ScenarioDialogueType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ScenarioDialogueType>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __DialogueResource__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __DialogueAddResources__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __DialogueAddSound__ = reader.ReadUInt32();
                        break;
                    case 10:
                        __DialogueBG__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __DialogueParams__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __GuideImage__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 13:
                        __GuideText__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 14:
                        __GuideFailText__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        __ScenarioGuideType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ScenarioGuideType>().Deserialize(ref reader, options);
                        break;
                    case 16:
                        __GuideDuration__ = reader.ReadUInt32();
                        break;
                    case 17:
                        __SoundID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.ScenarioDirection_Table();
            ____result.ScenarioDirectionID = __ScenarioDirectionID__;
            ____result.DirectionGroup = __DirectionGroup__;
            ____result.Step = __Step__;
            ____result.ScenarioDirectionType = __ScenarioDirectionType__;
            ____result.DialogueNPCName = __DialogueNPCName__;
            ____result.DialogueText = __DialogueText__;
            ____result.ScenarioDialogueType = __ScenarioDialogueType__;
            ____result.DialogueResource = __DialogueResource__;
            ____result.DialogueAddResources = __DialogueAddResources__;
            ____result.DialogueAddSound = __DialogueAddSound__;
            ____result.DialogueBG = __DialogueBG__;
            ____result.DialogueParams = __DialogueParams__;
            ____result.GuideImage = __GuideImage__;
            ____result.GuideText = __GuideText__;
            ____result.GuideFailText = __GuideFailText__;
            ____result.ScenarioGuideType = __ScenarioGuideType__;
            ____result.GuideDuration = __GuideDuration__;
            ____result.SoundID = __SoundID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ScenarioMission_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.ScenarioMission_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.ScenarioMission_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(31);
            writer.Write(value.ScenarioMissionID);
            writer.Write(value.StageID);
            writer.Write(value.PortalID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Prefab, options);
            writer.Write(value.CharacterID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_SpecialButtonType>().Serialize(ref writer, value.SpecialButtonType, options);
            writer.Write(value.SpecialButtonTime);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.SpecialButtonIcon, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.SpecialButtonAni, options);
            writer.Write(value.SpecialButtonEffect);
            writer.Write(value.MissionNumber);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.MissionTitle, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.MissionDesc, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.MissionStory, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.MissionButtonText, options);
            writer.Write(value.StartDialogueID);
            writer.Write(value.EndDialogueID);
            writer.Write(value.FailDialogueID);
            writer.Write(value.PotionItem);
            writer.Write(value.PotionCount);
            writer.Write(value.PotionPer);
            writer.Write(value.QuickSkill1);
            writer.Write(value.QuickSkill2);
            writer.Write(value.QuickSkill3);
            writer.Write(value.QuickSkill4);
            writer.Write(value.QuickSkill5);
            writer.Write(value.QuickSkill6);
            writer.Write(value.QuickSkill7);
            writer.Write(value.QuickSkill8);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.RewardItem, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.RewardItemCount, options);
        }

        public global::GameDB.ScenarioMission_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __ScenarioMissionID__ = default(uint);
            var __StageID__ = default(uint);
            var __PortalID__ = default(uint);
            var __Prefab__ = default(string);
            var __CharacterID__ = default(uint);
            var __SpecialButtonType__ = default(global::GameDB.E_SpecialButtonType);
            var __SpecialButtonTime__ = default(uint);
            var __SpecialButtonIcon__ = default(string);
            var __SpecialButtonAni__ = default(string);
            var __SpecialButtonEffect__ = default(uint);
            var __MissionNumber__ = default(byte);
            var __MissionTitle__ = default(string);
            var __MissionDesc__ = default(string);
            var __MissionStory__ = default(string);
            var __MissionButtonText__ = default(string);
            var __StartDialogueID__ = default(uint);
            var __EndDialogueID__ = default(uint);
            var __FailDialogueID__ = default(uint);
            var __PotionItem__ = default(uint);
            var __PotionCount__ = default(uint);
            var __PotionPer__ = default(uint);
            var __QuickSkill1__ = default(uint);
            var __QuickSkill2__ = default(uint);
            var __QuickSkill3__ = default(uint);
            var __QuickSkill4__ = default(uint);
            var __QuickSkill5__ = default(uint);
            var __QuickSkill6__ = default(uint);
            var __QuickSkill7__ = default(uint);
            var __QuickSkill8__ = default(uint);
            var __RewardItem__ = default(global::System.Collections.Generic.List<uint>);
            var __RewardItemCount__ = default(global::System.Collections.Generic.List<uint>);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __ScenarioMissionID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __StageID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __PortalID__ = reader.ReadUInt32();
                        break;
                    case 3:
                        __Prefab__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __CharacterID__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __SpecialButtonType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_SpecialButtonType>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __SpecialButtonTime__ = reader.ReadUInt32();
                        break;
                    case 7:
                        __SpecialButtonIcon__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __SpecialButtonAni__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __SpecialButtonEffect__ = reader.ReadUInt32();
                        break;
                    case 10:
                        __MissionNumber__ = reader.ReadByte();
                        break;
                    case 11:
                        __MissionTitle__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __MissionDesc__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 13:
                        __MissionStory__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 14:
                        __MissionButtonText__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        __StartDialogueID__ = reader.ReadUInt32();
                        break;
                    case 16:
                        __EndDialogueID__ = reader.ReadUInt32();
                        break;
                    case 17:
                        __FailDialogueID__ = reader.ReadUInt32();
                        break;
                    case 18:
                        __PotionItem__ = reader.ReadUInt32();
                        break;
                    case 19:
                        __PotionCount__ = reader.ReadUInt32();
                        break;
                    case 20:
                        __PotionPer__ = reader.ReadUInt32();
                        break;
                    case 21:
                        __QuickSkill1__ = reader.ReadUInt32();
                        break;
                    case 22:
                        __QuickSkill2__ = reader.ReadUInt32();
                        break;
                    case 23:
                        __QuickSkill3__ = reader.ReadUInt32();
                        break;
                    case 24:
                        __QuickSkill4__ = reader.ReadUInt32();
                        break;
                    case 25:
                        __QuickSkill5__ = reader.ReadUInt32();
                        break;
                    case 26:
                        __QuickSkill6__ = reader.ReadUInt32();
                        break;
                    case 27:
                        __QuickSkill7__ = reader.ReadUInt32();
                        break;
                    case 28:
                        __QuickSkill8__ = reader.ReadUInt32();
                        break;
                    case 29:
                        __RewardItem__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 30:
                        __RewardItemCount__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.ScenarioMission_Table();
            ____result.ScenarioMissionID = __ScenarioMissionID__;
            ____result.StageID = __StageID__;
            ____result.PortalID = __PortalID__;
            ____result.Prefab = __Prefab__;
            ____result.CharacterID = __CharacterID__;
            ____result.SpecialButtonType = __SpecialButtonType__;
            ____result.SpecialButtonTime = __SpecialButtonTime__;
            ____result.SpecialButtonIcon = __SpecialButtonIcon__;
            ____result.SpecialButtonAni = __SpecialButtonAni__;
            ____result.SpecialButtonEffect = __SpecialButtonEffect__;
            ____result.MissionNumber = __MissionNumber__;
            ____result.MissionTitle = __MissionTitle__;
            ____result.MissionDesc = __MissionDesc__;
            ____result.MissionStory = __MissionStory__;
            ____result.MissionButtonText = __MissionButtonText__;
            ____result.StartDialogueID = __StartDialogueID__;
            ____result.EndDialogueID = __EndDialogueID__;
            ____result.FailDialogueID = __FailDialogueID__;
            ____result.PotionItem = __PotionItem__;
            ____result.PotionCount = __PotionCount__;
            ____result.PotionPer = __PotionPer__;
            ____result.QuickSkill1 = __QuickSkill1__;
            ____result.QuickSkill2 = __QuickSkill2__;
            ____result.QuickSkill3 = __QuickSkill3__;
            ____result.QuickSkill4 = __QuickSkill4__;
            ____result.QuickSkill5 = __QuickSkill5__;
            ____result.QuickSkill6 = __QuickSkill6__;
            ____result.QuickSkill7 = __QuickSkill7__;
            ____result.QuickSkill8 = __QuickSkill8__;
            ____result.RewardItem = __RewardItem__;
            ____result.RewardItemCount = __RewardItemCount__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ShopList_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.ShopList_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.ShopList_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(8);
            writer.Write(value.ShopListID);
            writer.Write(value.GroupID);
            writer.Write(value.ListGroupID);
            writer.Write(value.GetRate);
            writer.Write(value.MileageItemID);
            writer.Write(value.MileageCount);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.SpecialShopTextID, options);
            writer.Write(value.UITipNo);
        }

        public global::GameDB.ShopList_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __ShopListID__ = default(uint);
            var __GroupID__ = default(uint);
            var __ListGroupID__ = default(uint);
            var __GetRate__ = default(uint);
            var __MileageItemID__ = default(uint);
            var __MileageCount__ = default(uint);
            var __SpecialShopTextID__ = default(string);
            var __UITipNo__ = default(byte);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __ShopListID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __GroupID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __ListGroupID__ = reader.ReadUInt32();
                        break;
                    case 3:
                        __GetRate__ = reader.ReadUInt32();
                        break;
                    case 4:
                        __MileageItemID__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __MileageCount__ = reader.ReadUInt32();
                        break;
                    case 6:
                        __SpecialShopTextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __UITipNo__ = reader.ReadByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.ShopList_Table();
            ____result.ShopListID = __ShopListID__;
            ____result.GroupID = __GroupID__;
            ____result.ListGroupID = __ListGroupID__;
            ____result.GetRate = __GetRate__;
            ____result.MileageItemID = __MileageItemID__;
            ____result.MileageCount = __MileageCount__;
            ____result.SpecialShopTextID = __SpecialShopTextID__;
            ____result.UITipNo = __UITipNo__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Skill_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Skill_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Skill_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(79);
            writer.Write(value.SkillID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.SkillTextID, options);
            writer.Write(value.GroupID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_UnitType>().Serialize(ref writer, value.UnitType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_CharacterType>().Serialize(ref writer, value.CharacterType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_WeaponType>().Serialize(ref writer, value.WeaponType, options);
            writer.Write(value.SkillSort);
            writer.Write(value.OpenLevel);
            writer.Write(value.OpenItemID);
            writer.Write(value.OpenGrade);
            writer.Write(value.OpenGradeCount);
            writer.Write(value.SubSkillID);
            writer.Write(value.ChangeSkillID);
            writer.Write(value.Grade);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_QuickSlotType>().Serialize(ref writer, value.QuickSlotType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_QuickSlotAutoType>().Serialize(ref writer, value.QuickSlotAutoType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_PreconditionType>().Serialize(ref writer, value.PreconditionType, options);
            writer.Write(value.PreconditionCheck);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_SkillType>().Serialize(ref writer, value.SkillType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_SkillAniType>().Serialize(ref writer, value.SkillAniType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_SkillEventType>().Serialize(ref writer, value.SkillEventType, options);
            writer.Write(value.TargetRenew);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_TargetPosType>().Serialize(ref writer, value.TargetPosType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_TargetType>().Serialize(ref writer, value.TargetType, options);
            writer.Write(value.Distance);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_CastingType>().Serialize(ref writer, value.CastingType, options);
            writer.Write(value.CastingTime);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_CastingDeleteType>().Serialize(ref writer, value.CastingDeleteType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_MissileType>().Serialize(ref writer, value.MissileType, options);
            writer.Write(value.MissileCnt);
            writer.Write(value.MissileDelayTime);
            writer.Write(value.MissileSpeed);
            writer.Write(value.MissileDistance);
            writer.Write(value.MissileRange);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_RangeType>().Serialize(ref writer, value.RangeType, options);
            writer.Write(value.RangeAngle);
            writer.Write(value.Range);
            writer.Write(value.TargetCnt);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_DamageType>().Serialize(ref writer, value.DamageType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_AttackType>().Serialize(ref writer, value.AttackType, options);
            writer.Write(value.DamageRate);
            writer.Write(value.AddDamage);
            writer.Write(value.AttackCount);
            writer.Write(value.AttributeDamage);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_UnitAttributeType>().Serialize(ref writer, value.DefenAttributeType, options);
            writer.Write(value.DefenAttributeLv);
            writer.Write(value.HealRate);
            writer.Write(value.AddHeal);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_PosMoveType>().Serialize(ref writer, value.PosMoveType, options);
            writer.Write(value.PosMoveDistance);
            writer.Write(value.PosMoveSpeed);
            writer.Write(value.SummonID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_CallType>().Serialize(ref writer, value.CallType, options);
            writer.Write(value.SummonDistance);
            writer.Write(value.CoolTime);
            writer.Write(value.GlobalCoolTime);
            writer.Write(value.SkillUseCount);
            writer.Write(value.UseMPCount);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_MonAI_Type>().Serialize(ref writer, value.MonAI_Type, options);
            writer.Write(value.MonAI_Condition);
            writer.Write(value.MonAI_DelayTime);
            writer.Write(value.MonAI_CoolTime);
            writer.Write(value.MonAI_Order);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_HitAniType>().Serialize(ref writer, value.HitAniType, options);
            writer.Write(value.SkillEffectID);
            writer.Write(value.RangeEffectID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_MissileEffectType>().Serialize(ref writer, value.MissileEffectType, options);
            writer.Write(value.ActuationEffectID);
            writer.Write(value.HitEffectID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_HitPositionType>().Serialize(ref writer, value.HitPositionType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.IconID, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ToolTipID, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.DetailTipID, options);
            writer.Write(value.AbilityActionID_01);
            writer.Write(value.AbilityActionID_02);
            writer.Write(value.AbilityActionID_03);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_AutoSlot>().Serialize(ref writer, value.AutoSlot, options);
            writer.Write(value.AutoSort);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_TownUseType>().Serialize(ref writer, value.TownUseType, options);
        }

        public global::GameDB.Skill_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __SkillID__ = default(uint);
            var __SkillTextID__ = default(string);
            var __GroupID__ = default(uint);
            var __UnitType__ = default(global::GameDB.E_UnitType);
            var __CharacterType__ = default(global::GameDB.E_CharacterType);
            var __WeaponType__ = default(global::GameDB.E_WeaponType);
            var __SkillSort__ = default(byte);
            var __OpenLevel__ = default(byte);
            var __OpenItemID__ = default(uint);
            var __OpenGrade__ = default(byte);
            var __OpenGradeCount__ = default(byte);
            var __SubSkillID__ = default(uint);
            var __ChangeSkillID__ = default(uint);
            var __Grade__ = default(byte);
            var __QuickSlotType__ = default(global::GameDB.E_QuickSlotType);
            var __QuickSlotAutoType__ = default(global::GameDB.E_QuickSlotAutoType);
            var __PreconditionType__ = default(global::GameDB.E_PreconditionType);
            var __PreconditionCheck__ = default(float);
            var __SkillType__ = default(global::GameDB.E_SkillType);
            var __SkillAniType__ = default(global::GameDB.E_SkillAniType);
            var __SkillEventType__ = default(global::GameDB.E_SkillEventType);
            var __TargetRenew__ = default(bool);
            var __TargetPosType__ = default(global::GameDB.E_TargetPosType);
            var __TargetType__ = default(global::GameDB.E_TargetType);
            var __Distance__ = default(float);
            var __CastingType__ = default(global::GameDB.E_CastingType);
            var __CastingTime__ = default(float);
            var __CastingDeleteType__ = default(global::GameDB.E_CastingDeleteType);
            var __MissileType__ = default(global::GameDB.E_MissileType);
            var __MissileCnt__ = default(byte);
            var __MissileDelayTime__ = default(float);
            var __MissileSpeed__ = default(float);
            var __MissileDistance__ = default(float);
            var __MissileRange__ = default(float);
            var __RangeType__ = default(global::GameDB.E_RangeType);
            var __RangeAngle__ = default(uint);
            var __Range__ = default(float);
            var __TargetCnt__ = default(byte);
            var __DamageType__ = default(global::GameDB.E_DamageType);
            var __AttackType__ = default(global::GameDB.E_AttackType);
            var __DamageRate__ = default(float);
            var __AddDamage__ = default(int);
            var __AttackCount__ = default(byte);
            var __AttributeDamage__ = default(int);
            var __DefenAttributeType__ = default(global::GameDB.E_UnitAttributeType);
            var __DefenAttributeLv__ = default(byte);
            var __HealRate__ = default(float);
            var __AddHeal__ = default(int);
            var __PosMoveType__ = default(global::GameDB.E_PosMoveType);
            var __PosMoveDistance__ = default(float);
            var __PosMoveSpeed__ = default(float);
            var __SummonID__ = default(uint);
            var __CallType__ = default(global::GameDB.E_CallType);
            var __SummonDistance__ = default(float);
            var __CoolTime__ = default(float);
            var __GlobalCoolTime__ = default(float);
            var __SkillUseCount__ = default(byte);
            var __UseMPCount__ = default(uint);
            var __MonAI_Type__ = default(global::GameDB.E_MonAI_Type);
            var __MonAI_Condition__ = default(uint);
            var __MonAI_DelayTime__ = default(uint);
            var __MonAI_CoolTime__ = default(uint);
            var __MonAI_Order__ = default(byte);
            var __HitAniType__ = default(global::GameDB.E_HitAniType);
            var __SkillEffectID__ = default(uint);
            var __RangeEffectID__ = default(uint);
            var __MissileEffectType__ = default(global::GameDB.E_MissileEffectType);
            var __ActuationEffectID__ = default(uint);
            var __HitEffectID__ = default(uint);
            var __HitPositionType__ = default(global::GameDB.E_HitPositionType);
            var __IconID__ = default(string);
            var __ToolTipID__ = default(string);
            var __DetailTipID__ = default(string);
            var __AbilityActionID_01__ = default(uint);
            var __AbilityActionID_02__ = default(uint);
            var __AbilityActionID_03__ = default(uint);
            var __AutoSlot__ = default(global::GameDB.E_AutoSlot);
            var __AutoSort__ = default(uint);
            var __TownUseType__ = default(global::GameDB.E_TownUseType);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __SkillID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __SkillTextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __GroupID__ = reader.ReadUInt32();
                        break;
                    case 3:
                        __UnitType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_UnitType>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __CharacterType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_CharacterType>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __WeaponType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_WeaponType>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __SkillSort__ = reader.ReadByte();
                        break;
                    case 7:
                        __OpenLevel__ = reader.ReadByte();
                        break;
                    case 8:
                        __OpenItemID__ = reader.ReadUInt32();
                        break;
                    case 9:
                        __OpenGrade__ = reader.ReadByte();
                        break;
                    case 10:
                        __OpenGradeCount__ = reader.ReadByte();
                        break;
                    case 11:
                        __SubSkillID__ = reader.ReadUInt32();
                        break;
                    case 12:
                        __ChangeSkillID__ = reader.ReadUInt32();
                        break;
                    case 13:
                        __Grade__ = reader.ReadByte();
                        break;
                    case 14:
                        __QuickSlotType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_QuickSlotType>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        __QuickSlotAutoType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_QuickSlotAutoType>().Deserialize(ref reader, options);
                        break;
                    case 16:
                        __PreconditionType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_PreconditionType>().Deserialize(ref reader, options);
                        break;
                    case 17:
                        __PreconditionCheck__ = reader.ReadSingle();
                        break;
                    case 18:
                        __SkillType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_SkillType>().Deserialize(ref reader, options);
                        break;
                    case 19:
                        __SkillAniType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_SkillAniType>().Deserialize(ref reader, options);
                        break;
                    case 20:
                        __SkillEventType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_SkillEventType>().Deserialize(ref reader, options);
                        break;
                    case 21:
                        __TargetRenew__ = reader.ReadBoolean();
                        break;
                    case 22:
                        __TargetPosType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_TargetPosType>().Deserialize(ref reader, options);
                        break;
                    case 23:
                        __TargetType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_TargetType>().Deserialize(ref reader, options);
                        break;
                    case 24:
                        __Distance__ = reader.ReadSingle();
                        break;
                    case 25:
                        __CastingType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_CastingType>().Deserialize(ref reader, options);
                        break;
                    case 26:
                        __CastingTime__ = reader.ReadSingle();
                        break;
                    case 27:
                        __CastingDeleteType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_CastingDeleteType>().Deserialize(ref reader, options);
                        break;
                    case 28:
                        __MissileType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_MissileType>().Deserialize(ref reader, options);
                        break;
                    case 29:
                        __MissileCnt__ = reader.ReadByte();
                        break;
                    case 30:
                        __MissileDelayTime__ = reader.ReadSingle();
                        break;
                    case 31:
                        __MissileSpeed__ = reader.ReadSingle();
                        break;
                    case 32:
                        __MissileDistance__ = reader.ReadSingle();
                        break;
                    case 33:
                        __MissileRange__ = reader.ReadSingle();
                        break;
                    case 34:
                        __RangeType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_RangeType>().Deserialize(ref reader, options);
                        break;
                    case 35:
                        __RangeAngle__ = reader.ReadUInt32();
                        break;
                    case 36:
                        __Range__ = reader.ReadSingle();
                        break;
                    case 37:
                        __TargetCnt__ = reader.ReadByte();
                        break;
                    case 38:
                        __DamageType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_DamageType>().Deserialize(ref reader, options);
                        break;
                    case 39:
                        __AttackType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_AttackType>().Deserialize(ref reader, options);
                        break;
                    case 40:
                        __DamageRate__ = reader.ReadSingle();
                        break;
                    case 41:
                        __AddDamage__ = reader.ReadInt32();
                        break;
                    case 42:
                        __AttackCount__ = reader.ReadByte();
                        break;
                    case 43:
                        __AttributeDamage__ = reader.ReadInt32();
                        break;
                    case 44:
                        __DefenAttributeType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_UnitAttributeType>().Deserialize(ref reader, options);
                        break;
                    case 45:
                        __DefenAttributeLv__ = reader.ReadByte();
                        break;
                    case 46:
                        __HealRate__ = reader.ReadSingle();
                        break;
                    case 47:
                        __AddHeal__ = reader.ReadInt32();
                        break;
                    case 48:
                        __PosMoveType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_PosMoveType>().Deserialize(ref reader, options);
                        break;
                    case 49:
                        __PosMoveDistance__ = reader.ReadSingle();
                        break;
                    case 50:
                        __PosMoveSpeed__ = reader.ReadSingle();
                        break;
                    case 51:
                        __SummonID__ = reader.ReadUInt32();
                        break;
                    case 52:
                        __CallType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_CallType>().Deserialize(ref reader, options);
                        break;
                    case 53:
                        __SummonDistance__ = reader.ReadSingle();
                        break;
                    case 54:
                        __CoolTime__ = reader.ReadSingle();
                        break;
                    case 55:
                        __GlobalCoolTime__ = reader.ReadSingle();
                        break;
                    case 56:
                        __SkillUseCount__ = reader.ReadByte();
                        break;
                    case 57:
                        __UseMPCount__ = reader.ReadUInt32();
                        break;
                    case 58:
                        __MonAI_Type__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_MonAI_Type>().Deserialize(ref reader, options);
                        break;
                    case 59:
                        __MonAI_Condition__ = reader.ReadUInt32();
                        break;
                    case 60:
                        __MonAI_DelayTime__ = reader.ReadUInt32();
                        break;
                    case 61:
                        __MonAI_CoolTime__ = reader.ReadUInt32();
                        break;
                    case 62:
                        __MonAI_Order__ = reader.ReadByte();
                        break;
                    case 63:
                        __HitAniType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_HitAniType>().Deserialize(ref reader, options);
                        break;
                    case 64:
                        __SkillEffectID__ = reader.ReadUInt32();
                        break;
                    case 65:
                        __RangeEffectID__ = reader.ReadUInt32();
                        break;
                    case 66:
                        __MissileEffectType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_MissileEffectType>().Deserialize(ref reader, options);
                        break;
                    case 67:
                        __ActuationEffectID__ = reader.ReadUInt32();
                        break;
                    case 68:
                        __HitEffectID__ = reader.ReadUInt32();
                        break;
                    case 69:
                        __HitPositionType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_HitPositionType>().Deserialize(ref reader, options);
                        break;
                    case 70:
                        __IconID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 71:
                        __ToolTipID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 72:
                        __DetailTipID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 73:
                        __AbilityActionID_01__ = reader.ReadUInt32();
                        break;
                    case 74:
                        __AbilityActionID_02__ = reader.ReadUInt32();
                        break;
                    case 75:
                        __AbilityActionID_03__ = reader.ReadUInt32();
                        break;
                    case 76:
                        __AutoSlot__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_AutoSlot>().Deserialize(ref reader, options);
                        break;
                    case 77:
                        __AutoSort__ = reader.ReadUInt32();
                        break;
                    case 78:
                        __TownUseType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_TownUseType>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Skill_Table();
            ____result.SkillID = __SkillID__;
            ____result.SkillTextID = __SkillTextID__;
            ____result.GroupID = __GroupID__;
            ____result.UnitType = __UnitType__;
            ____result.CharacterType = __CharacterType__;
            ____result.WeaponType = __WeaponType__;
            ____result.SkillSort = __SkillSort__;
            ____result.OpenLevel = __OpenLevel__;
            ____result.OpenItemID = __OpenItemID__;
            ____result.OpenGrade = __OpenGrade__;
            ____result.OpenGradeCount = __OpenGradeCount__;
            ____result.SubSkillID = __SubSkillID__;
            ____result.ChangeSkillID = __ChangeSkillID__;
            ____result.Grade = __Grade__;
            ____result.QuickSlotType = __QuickSlotType__;
            ____result.QuickSlotAutoType = __QuickSlotAutoType__;
            ____result.PreconditionType = __PreconditionType__;
            ____result.PreconditionCheck = __PreconditionCheck__;
            ____result.SkillType = __SkillType__;
            ____result.SkillAniType = __SkillAniType__;
            ____result.SkillEventType = __SkillEventType__;
            ____result.TargetRenew = __TargetRenew__;
            ____result.TargetPosType = __TargetPosType__;
            ____result.TargetType = __TargetType__;
            ____result.Distance = __Distance__;
            ____result.CastingType = __CastingType__;
            ____result.CastingTime = __CastingTime__;
            ____result.CastingDeleteType = __CastingDeleteType__;
            ____result.MissileType = __MissileType__;
            ____result.MissileCnt = __MissileCnt__;
            ____result.MissileDelayTime = __MissileDelayTime__;
            ____result.MissileSpeed = __MissileSpeed__;
            ____result.MissileDistance = __MissileDistance__;
            ____result.MissileRange = __MissileRange__;
            ____result.RangeType = __RangeType__;
            ____result.RangeAngle = __RangeAngle__;
            ____result.Range = __Range__;
            ____result.TargetCnt = __TargetCnt__;
            ____result.DamageType = __DamageType__;
            ____result.AttackType = __AttackType__;
            ____result.DamageRate = __DamageRate__;
            ____result.AddDamage = __AddDamage__;
            ____result.AttackCount = __AttackCount__;
            ____result.AttributeDamage = __AttributeDamage__;
            ____result.DefenAttributeType = __DefenAttributeType__;
            ____result.DefenAttributeLv = __DefenAttributeLv__;
            ____result.HealRate = __HealRate__;
            ____result.AddHeal = __AddHeal__;
            ____result.PosMoveType = __PosMoveType__;
            ____result.PosMoveDistance = __PosMoveDistance__;
            ____result.PosMoveSpeed = __PosMoveSpeed__;
            ____result.SummonID = __SummonID__;
            ____result.CallType = __CallType__;
            ____result.SummonDistance = __SummonDistance__;
            ____result.CoolTime = __CoolTime__;
            ____result.GlobalCoolTime = __GlobalCoolTime__;
            ____result.SkillUseCount = __SkillUseCount__;
            ____result.UseMPCount = __UseMPCount__;
            ____result.MonAI_Type = __MonAI_Type__;
            ____result.MonAI_Condition = __MonAI_Condition__;
            ____result.MonAI_DelayTime = __MonAI_DelayTime__;
            ____result.MonAI_CoolTime = __MonAI_CoolTime__;
            ____result.MonAI_Order = __MonAI_Order__;
            ____result.HitAniType = __HitAniType__;
            ____result.SkillEffectID = __SkillEffectID__;
            ____result.RangeEffectID = __RangeEffectID__;
            ____result.MissileEffectType = __MissileEffectType__;
            ____result.ActuationEffectID = __ActuationEffectID__;
            ____result.HitEffectID = __HitEffectID__;
            ____result.HitPositionType = __HitPositionType__;
            ____result.IconID = __IconID__;
            ____result.ToolTipID = __ToolTipID__;
            ____result.DetailTipID = __DetailTipID__;
            ____result.AbilityActionID_01 = __AbilityActionID_01__;
            ____result.AbilityActionID_02 = __AbilityActionID_02__;
            ____result.AbilityActionID_03 = __AbilityActionID_03__;
            ____result.AutoSlot = __AutoSlot__;
            ____result.AutoSort = __AutoSort__;
            ____result.TownUseType = __TownUseType__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SmeltOptionRate_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.SmeltOptionRate_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.SmeltOptionRate_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            writer.Write(value.SmeltOptionRateID);
            writer.Write(value.SmeltOptionRateGroupID);
            writer.Write(value.Rate);
            writer.Write(value.SmeltScrollOptionGroupID);
        }

        public global::GameDB.SmeltOptionRate_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __SmeltOptionRateID__ = default(uint);
            var __SmeltOptionRateGroupID__ = default(uint);
            var __Rate__ = default(uint);
            var __SmeltScrollOptionGroupID__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __SmeltOptionRateID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __SmeltOptionRateGroupID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __Rate__ = reader.ReadUInt32();
                        break;
                    case 3:
                        __SmeltScrollOptionGroupID__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.SmeltOptionRate_Table();
            ____result.SmeltOptionRateID = __SmeltOptionRateID__;
            ____result.SmeltOptionRateGroupID = __SmeltOptionRateGroupID__;
            ____result.Rate = __Rate__;
            ____result.SmeltScrollOptionGroupID = __SmeltScrollOptionGroupID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SmeltScroll_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.SmeltScroll_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.SmeltScroll_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(9);
            writer.Write(value.SmeltScrollID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ItemType>().Serialize(ref writer, value.SmeltScrollType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ItemType>().Serialize(ref writer, value.ItemType, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.SmeltItemID, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.SmeltItemCnt, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.SmeltMaterialItemID, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.SmeltMaterialItemCnt, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.AddOptionRate, options);
            writer.Write(value.SmeltOptionRateGroupID);
        }

        public global::GameDB.SmeltScroll_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __SmeltScrollID__ = default(uint);
            var __SmeltScrollType__ = default(global::GameDB.E_ItemType);
            var __ItemType__ = default(global::GameDB.E_ItemType);
            var __SmeltItemID__ = default(global::System.Collections.Generic.List<uint>);
            var __SmeltItemCnt__ = default(global::System.Collections.Generic.List<uint>);
            var __SmeltMaterialItemID__ = default(global::System.Collections.Generic.List<uint>);
            var __SmeltMaterialItemCnt__ = default(global::System.Collections.Generic.List<uint>);
            var __AddOptionRate__ = default(global::System.Collections.Generic.List<uint>);
            var __SmeltOptionRateGroupID__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __SmeltScrollID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __SmeltScrollType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ItemType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __ItemType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ItemType>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __SmeltItemID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __SmeltItemCnt__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __SmeltMaterialItemID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __SmeltMaterialItemCnt__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __AddOptionRate__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __SmeltOptionRateGroupID__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.SmeltScroll_Table();
            ____result.SmeltScrollID = __SmeltScrollID__;
            ____result.SmeltScrollType = __SmeltScrollType__;
            ____result.ItemType = __ItemType__;
            ____result.SmeltItemID = __SmeltItemID__;
            ____result.SmeltItemCnt = __SmeltItemCnt__;
            ____result.SmeltMaterialItemID = __SmeltMaterialItemID__;
            ____result.SmeltMaterialItemCnt = __SmeltMaterialItemCnt__;
            ____result.AddOptionRate = __AddOptionRate__;
            ____result.SmeltOptionRateGroupID = __SmeltOptionRateGroupID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SmeltScrollOption_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.SmeltScrollOption_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.SmeltScrollOption_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            writer.Write(value.SmeltScrollOptionID);
            writer.Write(value.GroupID);
            writer.Write(value.LowSmeltScrollGetRate);
            writer.Write(value.MidSmeltScrollGetRate);
            writer.Write(value.HighSmeltScrollGetRate);
            writer.Write(value.AbilityActionID);
        }

        public global::GameDB.SmeltScrollOption_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __SmeltScrollOptionID__ = default(uint);
            var __GroupID__ = default(uint);
            var __LowSmeltScrollGetRate__ = default(uint);
            var __MidSmeltScrollGetRate__ = default(uint);
            var __HighSmeltScrollGetRate__ = default(uint);
            var __AbilityActionID__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __SmeltScrollOptionID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __GroupID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __LowSmeltScrollGetRate__ = reader.ReadUInt32();
                        break;
                    case 3:
                        __MidSmeltScrollGetRate__ = reader.ReadUInt32();
                        break;
                    case 4:
                        __HighSmeltScrollGetRate__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __AbilityActionID__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.SmeltScrollOption_Table();
            ____result.SmeltScrollOptionID = __SmeltScrollOptionID__;
            ____result.GroupID = __GroupID__;
            ____result.LowSmeltScrollGetRate = __LowSmeltScrollGetRate__;
            ____result.MidSmeltScrollGetRate = __MidSmeltScrollGetRate__;
            ____result.HighSmeltScrollGetRate = __HighSmeltScrollGetRate__;
            ____result.AbilityActionID = __AbilityActionID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Sound_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Sound_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Sound_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            writer.Write(value.SoundID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.SoundFile, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_SoundType>().Serialize(ref writer, value.SoundType, options);
            writer.Write(value.SoundVolume);
        }

        public global::GameDB.Sound_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __SoundID__ = default(uint);
            var __SoundFile__ = default(string);
            var __SoundType__ = default(global::GameDB.E_SoundType);
            var __SoundVolume__ = default(float);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __SoundID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __SoundFile__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __SoundType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_SoundType>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __SoundVolume__ = reader.ReadSingle();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Sound_Table();
            ____result.SoundID = __SoundID__;
            ____result.SoundFile = __SoundFile__;
            ____result.SoundType = __SoundType__;
            ____result.SoundVolume = __SoundVolume__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SpecialShop_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.SpecialShop_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.SpecialShop_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(57);
            writer.Write(value.SpecialShopID);
            writer.Write(value.GroupID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_UnusedType>().Serialize(ref writer, value.UnusedType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_BuyOpenType>().Serialize(ref writer, value.BuyOpenType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ViewType>().Serialize(ref writer, value.ViewType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_MiniGoodsType>().Serialize(ref writer, value.MiniGoodsType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ShopTextID, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.IconID, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_SizeType>().Serialize(ref writer, value.SizeType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_CashType>().Serialize(ref writer, value.CashType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_SpecialShopType>().Serialize(ref writer, value.SpecialShopType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_SpecialSubTapType>().Serialize(ref writer, value.SpecialSubTapType, options);
            writer.Write(value.PositionNumber);
            writer.Write(value.RecommendGoods);
            writer.Write(value.SpecialShopCondition);
            writer.Write(value.ChangeCollectionCondition);
            writer.Write(value.PetCollectionCondition);
            writer.Write(value.WPvPGrade);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_BuyKindType>().Serialize(ref writer, value.BuyKindType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_GoodsListGetType>().Serialize(ref writer, value.GoodsListGetType, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.ShopListID, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.ShopListCount, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::GameDB.E_BonusType>>().Serialize(ref writer, value.BonusType, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.BonusItemID, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.BonusItemCnt, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<byte>>().Serialize(ref writer, value.BonusBuyCnt, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_StateType>().Serialize(ref writer, value.StateType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_GoodsKindType>().Serialize(ref writer, value.GoodsKindType, options);
            writer.Write(value.GoodsItemID);
            writer.Write(value.GoodsChangeID);
            writer.Write(value.GoodsPetID);
            writer.Write(value.GoodsCount);
            writer.Write(value.FlatProductListID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_FlatProductType>().Serialize(ref writer, value.FlatProductType, options);
            writer.Write(value.FlatProductPeriod);
            writer.Write(value.LastGiveListID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_PriceType>().Serialize(ref writer, value.PriceType, options);
            writer.Write(value.BuyItemID);
            writer.Write(value.BuyItemCount);
            writer.Write(value.OriganalBuyCount);
            writer.Write(value.PriceGroupID);
            writer.Write(value.RubyCount);
            writer.Write(value.BuyCharLevel);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ServerType>().Serialize(ref writer, value.ServerType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_BuyLimitType>().Serialize(ref writer, value.BuyLimitType, options);
            writer.Write(value.BuyLimitCount);
            writer.Write(value.BuyStartTime);
            writer.Write(value.BuyFinishTime);
            writer.Write(value.BuyMaxCount);
            writer.Write(value.DiamondCount);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.GoogleID, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.IOSStoreID, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.OneStoreID, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.TooltipImageCode, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.TooltipID, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.DescriptionID, options);
            writer.Write(value.RedNotice);
        }

        public global::GameDB.SpecialShop_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __SpecialShopID__ = default(uint);
            var __GroupID__ = default(uint);
            var __UnusedType__ = default(global::GameDB.E_UnusedType);
            var __BuyOpenType__ = default(global::GameDB.E_BuyOpenType);
            var __ViewType__ = default(global::GameDB.E_ViewType);
            var __MiniGoodsType__ = default(global::GameDB.E_MiniGoodsType);
            var __ShopTextID__ = default(string);
            var __IconID__ = default(string);
            var __SizeType__ = default(global::GameDB.E_SizeType);
            var __CashType__ = default(global::GameDB.E_CashType);
            var __SpecialShopType__ = default(global::GameDB.E_SpecialShopType);
            var __SpecialSubTapType__ = default(global::GameDB.E_SpecialSubTapType);
            var __PositionNumber__ = default(uint);
            var __RecommendGoods__ = default(byte);
            var __SpecialShopCondition__ = default(uint);
            var __ChangeCollectionCondition__ = default(uint);
            var __PetCollectionCondition__ = default(uint);
            var __WPvPGrade__ = default(byte);
            var __BuyKindType__ = default(global::GameDB.E_BuyKindType);
            var __GoodsListGetType__ = default(global::GameDB.E_GoodsListGetType);
            var __ShopListID__ = default(global::System.Collections.Generic.List<uint>);
            var __ShopListCount__ = default(global::System.Collections.Generic.List<uint>);
            var __BonusType__ = default(global::System.Collections.Generic.List<global::GameDB.E_BonusType>);
            var __BonusItemID__ = default(global::System.Collections.Generic.List<uint>);
            var __BonusItemCnt__ = default(global::System.Collections.Generic.List<uint>);
            var __BonusBuyCnt__ = default(global::System.Collections.Generic.List<byte>);
            var __StateType__ = default(global::GameDB.E_StateType);
            var __GoodsKindType__ = default(global::GameDB.E_GoodsKindType);
            var __GoodsItemID__ = default(uint);
            var __GoodsChangeID__ = default(uint);
            var __GoodsPetID__ = default(uint);
            var __GoodsCount__ = default(uint);
            var __FlatProductListID__ = default(uint);
            var __FlatProductType__ = default(global::GameDB.E_FlatProductType);
            var __FlatProductPeriod__ = default(uint);
            var __LastGiveListID__ = default(uint);
            var __PriceType__ = default(global::GameDB.E_PriceType);
            var __BuyItemID__ = default(uint);
            var __BuyItemCount__ = default(uint);
            var __OriganalBuyCount__ = default(uint);
            var __PriceGroupID__ = default(uint);
            var __RubyCount__ = default(uint);
            var __BuyCharLevel__ = default(byte);
            var __ServerType__ = default(global::GameDB.E_ServerType);
            var __BuyLimitType__ = default(global::GameDB.E_BuyLimitType);
            var __BuyLimitCount__ = default(uint);
            var __BuyStartTime__ = default(ulong);
            var __BuyFinishTime__ = default(ulong);
            var __BuyMaxCount__ = default(uint);
            var __DiamondCount__ = default(uint);
            var __GoogleID__ = default(string);
            var __IOSStoreID__ = default(string);
            var __OneStoreID__ = default(string);
            var __TooltipImageCode__ = default(string);
            var __TooltipID__ = default(string);
            var __DescriptionID__ = default(string);
            var __RedNotice__ = default(byte);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __SpecialShopID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __GroupID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __UnusedType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_UnusedType>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __BuyOpenType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_BuyOpenType>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __ViewType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ViewType>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __MiniGoodsType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_MiniGoodsType>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __ShopTextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __IconID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __SizeType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_SizeType>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __CashType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_CashType>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __SpecialShopType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_SpecialShopType>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __SpecialSubTapType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_SpecialSubTapType>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __PositionNumber__ = reader.ReadUInt32();
                        break;
                    case 13:
                        __RecommendGoods__ = reader.ReadByte();
                        break;
                    case 14:
                        __SpecialShopCondition__ = reader.ReadUInt32();
                        break;
                    case 15:
                        __ChangeCollectionCondition__ = reader.ReadUInt32();
                        break;
                    case 16:
                        __PetCollectionCondition__ = reader.ReadUInt32();
                        break;
                    case 17:
                        __WPvPGrade__ = reader.ReadByte();
                        break;
                    case 18:
                        __BuyKindType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_BuyKindType>().Deserialize(ref reader, options);
                        break;
                    case 19:
                        __GoodsListGetType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_GoodsListGetType>().Deserialize(ref reader, options);
                        break;
                    case 20:
                        __ShopListID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 21:
                        __ShopListCount__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 22:
                        __BonusType__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::GameDB.E_BonusType>>().Deserialize(ref reader, options);
                        break;
                    case 23:
                        __BonusItemID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 24:
                        __BonusItemCnt__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 25:
                        __BonusBuyCnt__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<byte>>().Deserialize(ref reader, options);
                        break;
                    case 26:
                        __StateType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_StateType>().Deserialize(ref reader, options);
                        break;
                    case 27:
                        __GoodsKindType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_GoodsKindType>().Deserialize(ref reader, options);
                        break;
                    case 28:
                        __GoodsItemID__ = reader.ReadUInt32();
                        break;
                    case 29:
                        __GoodsChangeID__ = reader.ReadUInt32();
                        break;
                    case 30:
                        __GoodsPetID__ = reader.ReadUInt32();
                        break;
                    case 31:
                        __GoodsCount__ = reader.ReadUInt32();
                        break;
                    case 32:
                        __FlatProductListID__ = reader.ReadUInt32();
                        break;
                    case 33:
                        __FlatProductType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_FlatProductType>().Deserialize(ref reader, options);
                        break;
                    case 34:
                        __FlatProductPeriod__ = reader.ReadUInt32();
                        break;
                    case 35:
                        __LastGiveListID__ = reader.ReadUInt32();
                        break;
                    case 36:
                        __PriceType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_PriceType>().Deserialize(ref reader, options);
                        break;
                    case 37:
                        __BuyItemID__ = reader.ReadUInt32();
                        break;
                    case 38:
                        __BuyItemCount__ = reader.ReadUInt32();
                        break;
                    case 39:
                        __OriganalBuyCount__ = reader.ReadUInt32();
                        break;
                    case 40:
                        __PriceGroupID__ = reader.ReadUInt32();
                        break;
                    case 41:
                        __RubyCount__ = reader.ReadUInt32();
                        break;
                    case 42:
                        __BuyCharLevel__ = reader.ReadByte();
                        break;
                    case 43:
                        __ServerType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ServerType>().Deserialize(ref reader, options);
                        break;
                    case 44:
                        __BuyLimitType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_BuyLimitType>().Deserialize(ref reader, options);
                        break;
                    case 45:
                        __BuyLimitCount__ = reader.ReadUInt32();
                        break;
                    case 46:
                        __BuyStartTime__ = reader.ReadUInt64();
                        break;
                    case 47:
                        __BuyFinishTime__ = reader.ReadUInt64();
                        break;
                    case 48:
                        __BuyMaxCount__ = reader.ReadUInt32();
                        break;
                    case 49:
                        __DiamondCount__ = reader.ReadUInt32();
                        break;
                    case 50:
                        __GoogleID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 51:
                        __IOSStoreID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 52:
                        __OneStoreID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 53:
                        __TooltipImageCode__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 54:
                        __TooltipID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 55:
                        __DescriptionID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 56:
                        __RedNotice__ = reader.ReadByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.SpecialShop_Table();
            ____result.SpecialShopID = __SpecialShopID__;
            ____result.GroupID = __GroupID__;
            ____result.UnusedType = __UnusedType__;
            ____result.BuyOpenType = __BuyOpenType__;
            ____result.ViewType = __ViewType__;
            ____result.MiniGoodsType = __MiniGoodsType__;
            ____result.ShopTextID = __ShopTextID__;
            ____result.IconID = __IconID__;
            ____result.SizeType = __SizeType__;
            ____result.CashType = __CashType__;
            ____result.SpecialShopType = __SpecialShopType__;
            ____result.SpecialSubTapType = __SpecialSubTapType__;
            ____result.PositionNumber = __PositionNumber__;
            ____result.RecommendGoods = __RecommendGoods__;
            ____result.SpecialShopCondition = __SpecialShopCondition__;
            ____result.ChangeCollectionCondition = __ChangeCollectionCondition__;
            ____result.PetCollectionCondition = __PetCollectionCondition__;
            ____result.WPvPGrade = __WPvPGrade__;
            ____result.BuyKindType = __BuyKindType__;
            ____result.GoodsListGetType = __GoodsListGetType__;
            ____result.ShopListID = __ShopListID__;
            ____result.ShopListCount = __ShopListCount__;
            ____result.BonusType = __BonusType__;
            ____result.BonusItemID = __BonusItemID__;
            ____result.BonusItemCnt = __BonusItemCnt__;
            ____result.BonusBuyCnt = __BonusBuyCnt__;
            ____result.StateType = __StateType__;
            ____result.GoodsKindType = __GoodsKindType__;
            ____result.GoodsItemID = __GoodsItemID__;
            ____result.GoodsChangeID = __GoodsChangeID__;
            ____result.GoodsPetID = __GoodsPetID__;
            ____result.GoodsCount = __GoodsCount__;
            ____result.FlatProductListID = __FlatProductListID__;
            ____result.FlatProductType = __FlatProductType__;
            ____result.FlatProductPeriod = __FlatProductPeriod__;
            ____result.LastGiveListID = __LastGiveListID__;
            ____result.PriceType = __PriceType__;
            ____result.BuyItemID = __BuyItemID__;
            ____result.BuyItemCount = __BuyItemCount__;
            ____result.OriganalBuyCount = __OriganalBuyCount__;
            ____result.PriceGroupID = __PriceGroupID__;
            ____result.RubyCount = __RubyCount__;
            ____result.BuyCharLevel = __BuyCharLevel__;
            ____result.ServerType = __ServerType__;
            ____result.BuyLimitType = __BuyLimitType__;
            ____result.BuyLimitCount = __BuyLimitCount__;
            ____result.BuyStartTime = __BuyStartTime__;
            ____result.BuyFinishTime = __BuyFinishTime__;
            ____result.BuyMaxCount = __BuyMaxCount__;
            ____result.DiamondCount = __DiamondCount__;
            ____result.GoogleID = __GoogleID__;
            ____result.IOSStoreID = __IOSStoreID__;
            ____result.OneStoreID = __OneStoreID__;
            ____result.TooltipImageCode = __TooltipImageCode__;
            ____result.TooltipID = __TooltipID__;
            ____result.DescriptionID = __DescriptionID__;
            ____result.RedNotice = __RedNotice__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Stage_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Stage_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Stage_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(71);
            writer.Write(value.StageID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_UnusedType>().Serialize(ref writer, value.UnusedType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.StageTextID, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.StageDescID, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ResourceFileName, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.MinmapFileName, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.MapFileName, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.IconFileName, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_StageType>().Serialize(ref writer, value.StageType, options);
            writer.Write(value.StageLevel);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_StageOpenType>().Serialize(ref writer, value.StageOpenType, options);
            writer.Write(value.OpenGuildLevel);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ChannelPrivate>().Serialize(ref writer, value.ChannelPrivate, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ChannelChange>().Serialize(ref writer, value.ChannelChange, options);
            writer.Write(value.InMinLevel);
            writer.Write(value.InMaxLevel);
            writer.Write(value.ClearQuest);
            writer.Write(value.OpenUseItemID);
            writer.Write(value.OpenUseItemCount);
            writer.Write(value.OpenClearGimmickID);
            writer.Write(value.StageGuildOpen);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_StageEnterType>().Serialize(ref writer, value.StageEnterType, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.EnterUseItemID, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.EnterUseItemCount, options);
            writer.Write(value.LinkTempleID);
            writer.Write(value.InBuffID);
            writer.Write(value.InCharacterCount);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.NotConsumeBuffIDs, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.QuickSlot, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.GiveItemID, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.GiveItemCount, options);
            writer.Write(value.StageDropGroupID);
            writer.Write(value.Ch_Exp_Penalt);
            writer.Write(value.Ch_Gold_Penalt);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_StageClearType>().Serialize(ref writer, value.StageClearType, options);
            writer.Write(value.FirstClearReward);
            writer.Write(value.ClearLimitTime);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.ClearRewardID, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.ClearRewardCount, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.FailRewardID, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.FailRewardCount, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_SummonBossType>().Serialize(ref writer, value.SummonBossType, options);
            writer.Write(value.SummonBossID);
            writer.Write(value.SummonCount);
            writer.Write(value.SummonItemCount);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_AutoUseType>().Serialize(ref writer, value.AutoUseType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_TeleportType>().Serialize(ref writer, value.TeleportType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_PKUseType>().Serialize(ref writer, value.PKUseType, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<byte>>().Serialize(ref writer, value.PKChannelNum, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<byte>>().Serialize(ref writer, value.FieldBossSpawnChannelNum, options);
            writer.Write(value.BossSpawnRate);
            writer.Write(value.BossSpawnTime);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<byte>>().Serialize(ref writer, value.LuckyMonSpawnChannelNum, options);
            writer.Write(value.LuckyMonSpawnRate);
            writer.Write(value.LuckyMonSpawnTime);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_TendencyDownType>().Serialize(ref writer, value.TendencyDownType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_DeathPenaltyType>().Serialize(ref writer, value.DeathPenaltyType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_StageSaveType>().Serialize(ref writer, value.StageSaveType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_RoamingType>().Serialize(ref writer, value.RoamingType, options);
            writer.Write(value.DeathPortal);
            writer.Write(value.BGMID);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Serialize(ref writer, value.WorldMapPosition, options);
            writer.Write(value.StageSizeX);
            writer.Write(value.StageSizeY);
            writer.Write(value.DefaultPortal);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.BoundsMin, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.BoundsMax, options);
            writer.Write(value.SightGridDistance);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_CollisionType>().Serialize(ref writer, value.CollisionType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_RidingType>().Serialize(ref writer, value.RidingType, options);
            writer.Write(value.BossViewPosY);
        }

        public global::GameDB.Stage_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __StageID__ = default(uint);
            var __UnusedType__ = default(global::GameDB.E_UnusedType);
            var __StageTextID__ = default(string);
            var __StageDescID__ = default(string);
            var __ResourceFileName__ = default(string);
            var __MinmapFileName__ = default(string);
            var __MapFileName__ = default(string);
            var __IconFileName__ = default(string);
            var __StageType__ = default(global::GameDB.E_StageType);
            var __StageLevel__ = default(byte);
            var __StageOpenType__ = default(global::GameDB.E_StageOpenType);
            var __OpenGuildLevel__ = default(byte);
            var __ChannelPrivate__ = default(global::GameDB.E_ChannelPrivate);
            var __ChannelChange__ = default(global::GameDB.E_ChannelChange);
            var __InMinLevel__ = default(byte);
            var __InMaxLevel__ = default(byte);
            var __ClearQuest__ = default(uint);
            var __OpenUseItemID__ = default(uint);
            var __OpenUseItemCount__ = default(uint);
            var __OpenClearGimmickID__ = default(uint);
            var __StageGuildOpen__ = default(byte);
            var __StageEnterType__ = default(global::GameDB.E_StageEnterType);
            var __EnterUseItemID__ = default(global::System.Collections.Generic.List<uint>);
            var __EnterUseItemCount__ = default(global::System.Collections.Generic.List<uint>);
            var __LinkTempleID__ = default(uint);
            var __InBuffID__ = default(uint);
            var __InCharacterCount__ = default(uint);
            var __NotConsumeBuffIDs__ = default(global::System.Collections.Generic.List<uint>);
            var __QuickSlot__ = default(global::System.Collections.Generic.List<uint>);
            var __GiveItemID__ = default(global::System.Collections.Generic.List<uint>);
            var __GiveItemCount__ = default(global::System.Collections.Generic.List<uint>);
            var __StageDropGroupID__ = default(uint);
            var __Ch_Exp_Penalt__ = default(uint);
            var __Ch_Gold_Penalt__ = default(uint);
            var __StageClearType__ = default(global::GameDB.E_StageClearType);
            var __FirstClearReward__ = default(uint);
            var __ClearLimitTime__ = default(uint);
            var __ClearRewardID__ = default(global::System.Collections.Generic.List<uint>);
            var __ClearRewardCount__ = default(global::System.Collections.Generic.List<uint>);
            var __FailRewardID__ = default(global::System.Collections.Generic.List<uint>);
            var __FailRewardCount__ = default(global::System.Collections.Generic.List<uint>);
            var __SummonBossType__ = default(global::GameDB.E_SummonBossType);
            var __SummonBossID__ = default(uint);
            var __SummonCount__ = default(uint);
            var __SummonItemCount__ = default(uint);
            var __AutoUseType__ = default(global::GameDB.E_AutoUseType);
            var __TeleportType__ = default(global::GameDB.E_TeleportType);
            var __PKUseType__ = default(global::GameDB.E_PKUseType);
            var __PKChannelNum__ = default(global::System.Collections.Generic.List<byte>);
            var __FieldBossSpawnChannelNum__ = default(global::System.Collections.Generic.List<byte>);
            var __BossSpawnRate__ = default(uint);
            var __BossSpawnTime__ = default(uint);
            var __LuckyMonSpawnChannelNum__ = default(global::System.Collections.Generic.List<byte>);
            var __LuckyMonSpawnRate__ = default(uint);
            var __LuckyMonSpawnTime__ = default(uint);
            var __TendencyDownType__ = default(global::GameDB.E_TendencyDownType);
            var __DeathPenaltyType__ = default(global::GameDB.E_DeathPenaltyType);
            var __StageSaveType__ = default(global::GameDB.E_StageSaveType);
            var __RoamingType__ = default(global::GameDB.E_RoamingType);
            var __DeathPortal__ = default(uint);
            var __BGMID__ = default(uint);
            var __WorldMapPosition__ = default(global::System.Collections.Generic.List<int>);
            var __StageSizeX__ = default(uint);
            var __StageSizeY__ = default(uint);
            var __DefaultPortal__ = default(uint);
            var __BoundsMin__ = default(string);
            var __BoundsMax__ = default(string);
            var __SightGridDistance__ = default(uint);
            var __CollisionType__ = default(global::GameDB.E_CollisionType);
            var __RidingType__ = default(global::GameDB.E_RidingType);
            var __BossViewPosY__ = default(float);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __StageID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __UnusedType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_UnusedType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __StageTextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __StageDescID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __ResourceFileName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __MinmapFileName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __MapFileName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __IconFileName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __StageType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_StageType>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __StageLevel__ = reader.ReadByte();
                        break;
                    case 10:
                        __StageOpenType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_StageOpenType>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __OpenGuildLevel__ = reader.ReadByte();
                        break;
                    case 12:
                        __ChannelPrivate__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ChannelPrivate>().Deserialize(ref reader, options);
                        break;
                    case 13:
                        __ChannelChange__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ChannelChange>().Deserialize(ref reader, options);
                        break;
                    case 14:
                        __InMinLevel__ = reader.ReadByte();
                        break;
                    case 15:
                        __InMaxLevel__ = reader.ReadByte();
                        break;
                    case 16:
                        __ClearQuest__ = reader.ReadUInt32();
                        break;
                    case 17:
                        __OpenUseItemID__ = reader.ReadUInt32();
                        break;
                    case 18:
                        __OpenUseItemCount__ = reader.ReadUInt32();
                        break;
                    case 19:
                        __OpenClearGimmickID__ = reader.ReadUInt32();
                        break;
                    case 20:
                        __StageGuildOpen__ = reader.ReadByte();
                        break;
                    case 21:
                        __StageEnterType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_StageEnterType>().Deserialize(ref reader, options);
                        break;
                    case 22:
                        __EnterUseItemID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 23:
                        __EnterUseItemCount__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 24:
                        __LinkTempleID__ = reader.ReadUInt32();
                        break;
                    case 25:
                        __InBuffID__ = reader.ReadUInt32();
                        break;
                    case 26:
                        __InCharacterCount__ = reader.ReadUInt32();
                        break;
                    case 27:
                        __NotConsumeBuffIDs__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 28:
                        __QuickSlot__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 29:
                        __GiveItemID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 30:
                        __GiveItemCount__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 31:
                        __StageDropGroupID__ = reader.ReadUInt32();
                        break;
                    case 32:
                        __Ch_Exp_Penalt__ = reader.ReadUInt32();
                        break;
                    case 33:
                        __Ch_Gold_Penalt__ = reader.ReadUInt32();
                        break;
                    case 34:
                        __StageClearType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_StageClearType>().Deserialize(ref reader, options);
                        break;
                    case 35:
                        __FirstClearReward__ = reader.ReadUInt32();
                        break;
                    case 36:
                        __ClearLimitTime__ = reader.ReadUInt32();
                        break;
                    case 37:
                        __ClearRewardID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 38:
                        __ClearRewardCount__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 39:
                        __FailRewardID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 40:
                        __FailRewardCount__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 41:
                        __SummonBossType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_SummonBossType>().Deserialize(ref reader, options);
                        break;
                    case 42:
                        __SummonBossID__ = reader.ReadUInt32();
                        break;
                    case 43:
                        __SummonCount__ = reader.ReadUInt32();
                        break;
                    case 44:
                        __SummonItemCount__ = reader.ReadUInt32();
                        break;
                    case 45:
                        __AutoUseType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_AutoUseType>().Deserialize(ref reader, options);
                        break;
                    case 46:
                        __TeleportType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_TeleportType>().Deserialize(ref reader, options);
                        break;
                    case 47:
                        __PKUseType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_PKUseType>().Deserialize(ref reader, options);
                        break;
                    case 48:
                        __PKChannelNum__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<byte>>().Deserialize(ref reader, options);
                        break;
                    case 49:
                        __FieldBossSpawnChannelNum__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<byte>>().Deserialize(ref reader, options);
                        break;
                    case 50:
                        __BossSpawnRate__ = reader.ReadUInt32();
                        break;
                    case 51:
                        __BossSpawnTime__ = reader.ReadUInt32();
                        break;
                    case 52:
                        __LuckyMonSpawnChannelNum__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<byte>>().Deserialize(ref reader, options);
                        break;
                    case 53:
                        __LuckyMonSpawnRate__ = reader.ReadUInt32();
                        break;
                    case 54:
                        __LuckyMonSpawnTime__ = reader.ReadUInt32();
                        break;
                    case 55:
                        __TendencyDownType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_TendencyDownType>().Deserialize(ref reader, options);
                        break;
                    case 56:
                        __DeathPenaltyType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_DeathPenaltyType>().Deserialize(ref reader, options);
                        break;
                    case 57:
                        __StageSaveType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_StageSaveType>().Deserialize(ref reader, options);
                        break;
                    case 58:
                        __RoamingType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_RoamingType>().Deserialize(ref reader, options);
                        break;
                    case 59:
                        __DeathPortal__ = reader.ReadUInt32();
                        break;
                    case 60:
                        __BGMID__ = reader.ReadUInt32();
                        break;
                    case 61:
                        __WorldMapPosition__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Deserialize(ref reader, options);
                        break;
                    case 62:
                        __StageSizeX__ = reader.ReadUInt32();
                        break;
                    case 63:
                        __StageSizeY__ = reader.ReadUInt32();
                        break;
                    case 64:
                        __DefaultPortal__ = reader.ReadUInt32();
                        break;
                    case 65:
                        __BoundsMin__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 66:
                        __BoundsMax__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 67:
                        __SightGridDistance__ = reader.ReadUInt32();
                        break;
                    case 68:
                        __CollisionType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_CollisionType>().Deserialize(ref reader, options);
                        break;
                    case 69:
                        __RidingType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_RidingType>().Deserialize(ref reader, options);
                        break;
                    case 70:
                        __BossViewPosY__ = reader.ReadSingle();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Stage_Table();
            ____result.StageID = __StageID__;
            ____result.UnusedType = __UnusedType__;
            ____result.StageTextID = __StageTextID__;
            ____result.StageDescID = __StageDescID__;
            ____result.ResourceFileName = __ResourceFileName__;
            ____result.MinmapFileName = __MinmapFileName__;
            ____result.MapFileName = __MapFileName__;
            ____result.IconFileName = __IconFileName__;
            ____result.StageType = __StageType__;
            ____result.StageLevel = __StageLevel__;
            ____result.StageOpenType = __StageOpenType__;
            ____result.OpenGuildLevel = __OpenGuildLevel__;
            ____result.ChannelPrivate = __ChannelPrivate__;
            ____result.ChannelChange = __ChannelChange__;
            ____result.InMinLevel = __InMinLevel__;
            ____result.InMaxLevel = __InMaxLevel__;
            ____result.ClearQuest = __ClearQuest__;
            ____result.OpenUseItemID = __OpenUseItemID__;
            ____result.OpenUseItemCount = __OpenUseItemCount__;
            ____result.OpenClearGimmickID = __OpenClearGimmickID__;
            ____result.StageGuildOpen = __StageGuildOpen__;
            ____result.StageEnterType = __StageEnterType__;
            ____result.EnterUseItemID = __EnterUseItemID__;
            ____result.EnterUseItemCount = __EnterUseItemCount__;
            ____result.LinkTempleID = __LinkTempleID__;
            ____result.InBuffID = __InBuffID__;
            ____result.InCharacterCount = __InCharacterCount__;
            ____result.NotConsumeBuffIDs = __NotConsumeBuffIDs__;
            ____result.QuickSlot = __QuickSlot__;
            ____result.GiveItemID = __GiveItemID__;
            ____result.GiveItemCount = __GiveItemCount__;
            ____result.StageDropGroupID = __StageDropGroupID__;
            ____result.Ch_Exp_Penalt = __Ch_Exp_Penalt__;
            ____result.Ch_Gold_Penalt = __Ch_Gold_Penalt__;
            ____result.StageClearType = __StageClearType__;
            ____result.FirstClearReward = __FirstClearReward__;
            ____result.ClearLimitTime = __ClearLimitTime__;
            ____result.ClearRewardID = __ClearRewardID__;
            ____result.ClearRewardCount = __ClearRewardCount__;
            ____result.FailRewardID = __FailRewardID__;
            ____result.FailRewardCount = __FailRewardCount__;
            ____result.SummonBossType = __SummonBossType__;
            ____result.SummonBossID = __SummonBossID__;
            ____result.SummonCount = __SummonCount__;
            ____result.SummonItemCount = __SummonItemCount__;
            ____result.AutoUseType = __AutoUseType__;
            ____result.TeleportType = __TeleportType__;
            ____result.PKUseType = __PKUseType__;
            ____result.PKChannelNum = __PKChannelNum__;
            ____result.FieldBossSpawnChannelNum = __FieldBossSpawnChannelNum__;
            ____result.BossSpawnRate = __BossSpawnRate__;
            ____result.BossSpawnTime = __BossSpawnTime__;
            ____result.LuckyMonSpawnChannelNum = __LuckyMonSpawnChannelNum__;
            ____result.LuckyMonSpawnRate = __LuckyMonSpawnRate__;
            ____result.LuckyMonSpawnTime = __LuckyMonSpawnTime__;
            ____result.TendencyDownType = __TendencyDownType__;
            ____result.DeathPenaltyType = __DeathPenaltyType__;
            ____result.StageSaveType = __StageSaveType__;
            ____result.RoamingType = __RoamingType__;
            ____result.DeathPortal = __DeathPortal__;
            ____result.BGMID = __BGMID__;
            ____result.WorldMapPosition = __WorldMapPosition__;
            ____result.StageSizeX = __StageSizeX__;
            ____result.StageSizeY = __StageSizeY__;
            ____result.DefaultPortal = __DefaultPortal__;
            ____result.BoundsMin = __BoundsMin__;
            ____result.BoundsMax = __BoundsMax__;
            ____result.SightGridDistance = __SightGridDistance__;
            ____result.CollisionType = __CollisionType__;
            ____result.RidingType = __RidingType__;
            ____result.BossViewPosY = __BossViewPosY__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class StageDrop_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.StageDrop_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.StageDrop_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(7);
            writer.Write(value.StageDropID);
            writer.Write(value.DropGroupID);
            writer.Write(value.NormalBlessRate);
            writer.Write(value.NormalPowerRate);
            writer.Write(value.BossBlessRate);
            writer.Write(value.BossPowerRate);
            writer.Write(value.DropListGroupID);
        }

        public global::GameDB.StageDrop_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __StageDropID__ = default(uint);
            var __DropGroupID__ = default(uint);
            var __NormalBlessRate__ = default(uint);
            var __NormalPowerRate__ = default(uint);
            var __BossBlessRate__ = default(uint);
            var __BossPowerRate__ = default(uint);
            var __DropListGroupID__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __StageDropID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __DropGroupID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __NormalBlessRate__ = reader.ReadUInt32();
                        break;
                    case 3:
                        __NormalPowerRate__ = reader.ReadUInt32();
                        break;
                    case 4:
                        __BossBlessRate__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __BossPowerRate__ = reader.ReadUInt32();
                        break;
                    case 6:
                        __DropListGroupID__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.StageDrop_Table();
            ____result.StageDropID = __StageDropID__;
            ____result.DropGroupID = __DropGroupID__;
            ____result.NormalBlessRate = __NormalBlessRate__;
            ____result.NormalPowerRate = __NormalPowerRate__;
            ____result.BossBlessRate = __BossBlessRate__;
            ____result.BossPowerRate = __BossPowerRate__;
            ____result.DropListGroupID = __DropListGroupID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class StageDropList_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.StageDropList_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.StageDropList_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(16);
            writer.Write(value.StageDropListID);
            writer.Write(value.ListGroupID);
            writer.Write(value.DropRate);
            writer.Write(value.BossDropRate);
            writer.Write(value.DropItemID);
            writer.Write(value.DropItemCount);
            writer.Write(value.BossDropItemCount);
            writer.Write(value.Down50Per);
            writer.Write(value.Down40Per);
            writer.Write(value.Down30Per);
            writer.Write(value.Down20Per);
            writer.Write(value.Down10Per);
            writer.Write(value.DropSignRate);
            writer.Write(value.DropLimitCount);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_AutoStorageType>().Serialize(ref writer, value.ViewCheck, options);
            writer.Write(value.ViewNo);
        }

        public global::GameDB.StageDropList_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __StageDropListID__ = default(uint);
            var __ListGroupID__ = default(uint);
            var __DropRate__ = default(uint);
            var __BossDropRate__ = default(uint);
            var __DropItemID__ = default(uint);
            var __DropItemCount__ = default(uint);
            var __BossDropItemCount__ = default(uint);
            var __Down50Per__ = default(uint);
            var __Down40Per__ = default(uint);
            var __Down30Per__ = default(uint);
            var __Down20Per__ = default(uint);
            var __Down10Per__ = default(uint);
            var __DropSignRate__ = default(uint);
            var __DropLimitCount__ = default(uint);
            var __ViewCheck__ = default(global::GameDB.E_AutoStorageType);
            var __ViewNo__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __StageDropListID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __ListGroupID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __DropRate__ = reader.ReadUInt32();
                        break;
                    case 3:
                        __BossDropRate__ = reader.ReadUInt32();
                        break;
                    case 4:
                        __DropItemID__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __DropItemCount__ = reader.ReadUInt32();
                        break;
                    case 6:
                        __BossDropItemCount__ = reader.ReadUInt32();
                        break;
                    case 7:
                        __Down50Per__ = reader.ReadUInt32();
                        break;
                    case 8:
                        __Down40Per__ = reader.ReadUInt32();
                        break;
                    case 9:
                        __Down30Per__ = reader.ReadUInt32();
                        break;
                    case 10:
                        __Down20Per__ = reader.ReadUInt32();
                        break;
                    case 11:
                        __Down10Per__ = reader.ReadUInt32();
                        break;
                    case 12:
                        __DropSignRate__ = reader.ReadUInt32();
                        break;
                    case 13:
                        __DropLimitCount__ = reader.ReadUInt32();
                        break;
                    case 14:
                        __ViewCheck__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_AutoStorageType>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        __ViewNo__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.StageDropList_Table();
            ____result.StageDropListID = __StageDropListID__;
            ____result.ListGroupID = __ListGroupID__;
            ____result.DropRate = __DropRate__;
            ____result.BossDropRate = __BossDropRate__;
            ____result.DropItemID = __DropItemID__;
            ____result.DropItemCount = __DropItemCount__;
            ____result.BossDropItemCount = __BossDropItemCount__;
            ____result.Down50Per = __Down50Per__;
            ____result.Down40Per = __Down40Per__;
            ____result.Down30Per = __Down30Per__;
            ____result.Down20Per = __Down20Per__;
            ____result.Down10Per = __Down10Per__;
            ____result.DropSignRate = __DropSignRate__;
            ____result.DropLimitCount = __DropLimitCount__;
            ____result.ViewCheck = __ViewCheck__;
            ____result.ViewNo = __ViewNo__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class StartingItem_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.StartingItem_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.StartingItem_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(7);
            writer.Write(value.StartingItemID);
            writer.Write(value.CharacterID);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.ItemID, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.ItemCnt, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.ChangeID, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.PetID, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.SkillID, options);
        }

        public global::GameDB.StartingItem_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __StartingItemID__ = default(uint);
            var __CharacterID__ = default(uint);
            var __ItemID__ = default(global::System.Collections.Generic.List<uint>);
            var __ItemCnt__ = default(global::System.Collections.Generic.List<uint>);
            var __ChangeID__ = default(global::System.Collections.Generic.List<uint>);
            var __PetID__ = default(global::System.Collections.Generic.List<uint>);
            var __SkillID__ = default(global::System.Collections.Generic.List<uint>);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __StartingItemID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __CharacterID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __ItemID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __ItemCnt__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __ChangeID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __PetID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __SkillID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.StartingItem_Table();
            ____result.StartingItemID = __StartingItemID__;
            ____result.CharacterID = __CharacterID__;
            ____result.ItemID = __ItemID__;
            ____result.ItemCnt = __ItemCnt__;
            ____result.ChangeID = __ChangeID__;
            ____result.PetID = __PetID__;
            ____result.SkillID = __SkillID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Summon_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Summon_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Summon_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(20);
            writer.Write(value.SummonID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_SummonType>().Serialize(ref writer, value.SummonType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_ActiveType>().Serialize(ref writer, value.ActiveType, options);
            writer.Write(value.SummonTime);
            writer.Write(value.SummonCnt);
            writer.Write(value.OverlapCnt);
            writer.Write(value.StartTime);
            writer.Write(value.PeriodTime);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_DeathType>().Serialize(ref writer, value.DeathType, options);
            writer.Write(value.MaxHPRate);
            writer.Write(value.ShortAttackRate);
            writer.Write(value.LongAttackRate);
            writer.Write(value.MagicAttackRate);
            writer.Write(value.DefenseRate);
            writer.Write(value.MagicDefenseRate);
            writer.Write(value.RunSpeedRate);
            writer.Write(value.HPRecoveryRate);
            writer.Write(value.HPRecoveryTime);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.MonsterID, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.MonsterCount, options);
        }

        public global::GameDB.Summon_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __SummonID__ = default(uint);
            var __SummonType__ = default(global::GameDB.E_SummonType);
            var __ActiveType__ = default(global::GameDB.E_ActiveType);
            var __SummonTime__ = default(uint);
            var __SummonCnt__ = default(byte);
            var __OverlapCnt__ = default(byte);
            var __StartTime__ = default(float);
            var __PeriodTime__ = default(float);
            var __DeathType__ = default(global::GameDB.E_DeathType);
            var __MaxHPRate__ = default(float);
            var __ShortAttackRate__ = default(float);
            var __LongAttackRate__ = default(float);
            var __MagicAttackRate__ = default(float);
            var __DefenseRate__ = default(float);
            var __MagicDefenseRate__ = default(float);
            var __RunSpeedRate__ = default(float);
            var __HPRecoveryRate__ = default(float);
            var __HPRecoveryTime__ = default(uint);
            var __MonsterID__ = default(global::System.Collections.Generic.List<uint>);
            var __MonsterCount__ = default(global::System.Collections.Generic.List<uint>);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __SummonID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __SummonType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_SummonType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __ActiveType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_ActiveType>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __SummonTime__ = reader.ReadUInt32();
                        break;
                    case 4:
                        __SummonCnt__ = reader.ReadByte();
                        break;
                    case 5:
                        __OverlapCnt__ = reader.ReadByte();
                        break;
                    case 6:
                        __StartTime__ = reader.ReadSingle();
                        break;
                    case 7:
                        __PeriodTime__ = reader.ReadSingle();
                        break;
                    case 8:
                        __DeathType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_DeathType>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __MaxHPRate__ = reader.ReadSingle();
                        break;
                    case 10:
                        __ShortAttackRate__ = reader.ReadSingle();
                        break;
                    case 11:
                        __LongAttackRate__ = reader.ReadSingle();
                        break;
                    case 12:
                        __MagicAttackRate__ = reader.ReadSingle();
                        break;
                    case 13:
                        __DefenseRate__ = reader.ReadSingle();
                        break;
                    case 14:
                        __MagicDefenseRate__ = reader.ReadSingle();
                        break;
                    case 15:
                        __RunSpeedRate__ = reader.ReadSingle();
                        break;
                    case 16:
                        __HPRecoveryRate__ = reader.ReadSingle();
                        break;
                    case 17:
                        __HPRecoveryTime__ = reader.ReadUInt32();
                        break;
                    case 18:
                        __MonsterID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 19:
                        __MonsterCount__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Summon_Table();
            ____result.SummonID = __SummonID__;
            ____result.SummonType = __SummonType__;
            ____result.ActiveType = __ActiveType__;
            ____result.SummonTime = __SummonTime__;
            ____result.SummonCnt = __SummonCnt__;
            ____result.OverlapCnt = __OverlapCnt__;
            ____result.StartTime = __StartTime__;
            ____result.PeriodTime = __PeriodTime__;
            ____result.DeathType = __DeathType__;
            ____result.MaxHPRate = __MaxHPRate__;
            ____result.ShortAttackRate = __ShortAttackRate__;
            ____result.LongAttackRate = __LongAttackRate__;
            ____result.MagicAttackRate = __MagicAttackRate__;
            ____result.DefenseRate = __DefenseRate__;
            ____result.MagicDefenseRate = __MagicDefenseRate__;
            ____result.RunSpeedRate = __RunSpeedRate__;
            ____result.HPRecoveryRate = __HPRecoveryRate__;
            ____result.HPRecoveryTime = __HPRecoveryTime__;
            ____result.MonsterID = __MonsterID__;
            ____result.MonsterCount = __MonsterCount__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Survery_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Survery_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Survery_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            writer.Write(value.SurveryID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.QText, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Serialize(ref writer, value.QAText, options);
        }

        public global::GameDB.Survery_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __SurveryID__ = default(uint);
            var __QText__ = default(string);
            var __QAText__ = default(global::System.Collections.Generic.List<string>);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __SurveryID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __QText__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __QAText__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Survery_Table();
            ____result.SurveryID = __SurveryID__;
            ____result.QText = __QText__;
            ____result.QAText = __QAText__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Temple_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Temple_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Temple_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(26);
            writer.Write(value.TempleID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_TempleType>().Serialize(ref writer, value.TempleType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.TempleAreaName, options);
            writer.Write(value.TempleOrderUI);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_HiddenUI>().Serialize(ref writer, value.HiddenUI, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_RegistrationUI>().Serialize(ref writer, value.RegistrationUI, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_Replay>().Serialize(ref writer, value.Replay, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ResourcePrefab, options);
            writer.Write(value.ResourcePrefabFX1);
            writer.Write(value.ResourcePrefabFX2);
            writer.Write(value.ResourcePrefabFX3);
            writer.Write(value.ResourcePrefabFX4);
            writer.Write(value.Scale);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_CollisionType>().Serialize(ref writer, value.CollisionType, options);
            writer.Write(value.CollisionRadius);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_NameViewType>().Serialize(ref writer, value.NameViewType, options);
            writer.Write(value.NameViewRadius);
            writer.Write(value.NameViewFontSize);
            writer.Write(value.NameViewTime);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Icon, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.QuestRewardIcon, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ToolTipID, options);
            writer.Write(value.EntrancePortalID);
            writer.Write(value.ExitPortalID);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Serialize(ref writer, value.GachaGroupID, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.GuideLocale, options);
        }

        public global::GameDB.Temple_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __TempleID__ = default(uint);
            var __TempleType__ = default(global::GameDB.E_TempleType);
            var __TempleAreaName__ = default(string);
            var __TempleOrderUI__ = default(uint);
            var __HiddenUI__ = default(global::GameDB.E_HiddenUI);
            var __RegistrationUI__ = default(global::GameDB.E_RegistrationUI);
            var __Replay__ = default(global::GameDB.E_Replay);
            var __ResourcePrefab__ = default(string);
            var __ResourcePrefabFX1__ = default(uint);
            var __ResourcePrefabFX2__ = default(uint);
            var __ResourcePrefabFX3__ = default(uint);
            var __ResourcePrefabFX4__ = default(uint);
            var __Scale__ = default(uint);
            var __CollisionType__ = default(global::GameDB.E_CollisionType);
            var __CollisionRadius__ = default(float);
            var __NameViewType__ = default(global::GameDB.E_NameViewType);
            var __NameViewRadius__ = default(float);
            var __NameViewFontSize__ = default(uint);
            var __NameViewTime__ = default(uint);
            var __Icon__ = default(string);
            var __QuestRewardIcon__ = default(string);
            var __ToolTipID__ = default(string);
            var __EntrancePortalID__ = default(uint);
            var __ExitPortalID__ = default(uint);
            var __GachaGroupID__ = default(global::System.Collections.Generic.List<uint>);
            var __GuideLocale__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __TempleID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __TempleType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_TempleType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __TempleAreaName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __TempleOrderUI__ = reader.ReadUInt32();
                        break;
                    case 4:
                        __HiddenUI__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_HiddenUI>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __RegistrationUI__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_RegistrationUI>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Replay__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_Replay>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __ResourcePrefab__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __ResourcePrefabFX1__ = reader.ReadUInt32();
                        break;
                    case 9:
                        __ResourcePrefabFX2__ = reader.ReadUInt32();
                        break;
                    case 10:
                        __ResourcePrefabFX3__ = reader.ReadUInt32();
                        break;
                    case 11:
                        __ResourcePrefabFX4__ = reader.ReadUInt32();
                        break;
                    case 12:
                        __Scale__ = reader.ReadUInt32();
                        break;
                    case 13:
                        __CollisionType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_CollisionType>().Deserialize(ref reader, options);
                        break;
                    case 14:
                        __CollisionRadius__ = reader.ReadSingle();
                        break;
                    case 15:
                        __NameViewType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_NameViewType>().Deserialize(ref reader, options);
                        break;
                    case 16:
                        __NameViewRadius__ = reader.ReadSingle();
                        break;
                    case 17:
                        __NameViewFontSize__ = reader.ReadUInt32();
                        break;
                    case 18:
                        __NameViewTime__ = reader.ReadUInt32();
                        break;
                    case 19:
                        __Icon__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 20:
                        __QuestRewardIcon__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 21:
                        __ToolTipID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 22:
                        __EntrancePortalID__ = reader.ReadUInt32();
                        break;
                    case 23:
                        __ExitPortalID__ = reader.ReadUInt32();
                        break;
                    case 24:
                        __GachaGroupID__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<uint>>().Deserialize(ref reader, options);
                        break;
                    case 25:
                        __GuideLocale__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Temple_Table();
            ____result.TempleID = __TempleID__;
            ____result.TempleType = __TempleType__;
            ____result.TempleAreaName = __TempleAreaName__;
            ____result.TempleOrderUI = __TempleOrderUI__;
            ____result.HiddenUI = __HiddenUI__;
            ____result.RegistrationUI = __RegistrationUI__;
            ____result.Replay = __Replay__;
            ____result.ResourcePrefab = __ResourcePrefab__;
            ____result.ResourcePrefabFX1 = __ResourcePrefabFX1__;
            ____result.ResourcePrefabFX2 = __ResourcePrefabFX2__;
            ____result.ResourcePrefabFX3 = __ResourcePrefabFX3__;
            ____result.ResourcePrefabFX4 = __ResourcePrefabFX4__;
            ____result.Scale = __Scale__;
            ____result.CollisionType = __CollisionType__;
            ____result.CollisionRadius = __CollisionRadius__;
            ____result.NameViewType = __NameViewType__;
            ____result.NameViewRadius = __NameViewRadius__;
            ____result.NameViewFontSize = __NameViewFontSize__;
            ____result.NameViewTime = __NameViewTime__;
            ____result.Icon = __Icon__;
            ____result.QuestRewardIcon = __QuestRewardIcon__;
            ____result.ToolTipID = __ToolTipID__;
            ____result.EntrancePortalID = __EntrancePortalID__;
            ____result.ExitPortalID = __ExitPortalID__;
            ____result.GachaGroupID = __GachaGroupID__;
            ____result.GuideLocale = __GuideLocale__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class TempleObject_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.TempleObject_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.TempleObject_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(13);
            writer.Write(value.TempleObjectID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.TempleObjectTextID, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ResourcePrefab, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.FieldGimmickId, options);
            writer.Write(value.TempleStageID);
            writer.Write(value.NeedItemID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ItemPrefab, options);
            writer.Write(value.ItemScale);
            writer.Write(value.Scale);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_NameViewType>().Serialize(ref writer, value.NameViewType, options);
            writer.Write(value.NameViewRadius);
            writer.Write(value.HideOnOpen);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ErrorLocale, options);
        }

        public global::GameDB.TempleObject_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __TempleObjectID__ = default(uint);
            var __TempleObjectTextID__ = default(string);
            var __ResourcePrefab__ = default(string);
            var __FieldGimmickId__ = default(string);
            var __TempleStageID__ = default(uint);
            var __NeedItemID__ = default(uint);
            var __ItemPrefab__ = default(string);
            var __ItemScale__ = default(uint);
            var __Scale__ = default(uint);
            var __NameViewType__ = default(global::GameDB.E_NameViewType);
            var __NameViewRadius__ = default(float);
            var __HideOnOpen__ = default(byte);
            var __ErrorLocale__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __TempleObjectID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __TempleObjectTextID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __ResourcePrefab__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __FieldGimmickId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __TempleStageID__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __NeedItemID__ = reader.ReadUInt32();
                        break;
                    case 6:
                        __ItemPrefab__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __ItemScale__ = reader.ReadUInt32();
                        break;
                    case 8:
                        __Scale__ = reader.ReadUInt32();
                        break;
                    case 9:
                        __NameViewType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_NameViewType>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __NameViewRadius__ = reader.ReadSingle();
                        break;
                    case 11:
                        __HideOnOpen__ = reader.ReadByte();
                        break;
                    case 12:
                        __ErrorLocale__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.TempleObject_Table();
            ____result.TempleObjectID = __TempleObjectID__;
            ____result.TempleObjectTextID = __TempleObjectTextID__;
            ____result.ResourcePrefab = __ResourcePrefab__;
            ____result.FieldGimmickId = __FieldGimmickId__;
            ____result.TempleStageID = __TempleStageID__;
            ____result.NeedItemID = __NeedItemID__;
            ____result.ItemPrefab = __ItemPrefab__;
            ____result.ItemScale = __ItemScale__;
            ____result.Scale = __Scale__;
            ____result.NameViewType = __NameViewType__;
            ____result.NameViewRadius = __NameViewRadius__;
            ____result.HideOnOpen = __HideOnOpen__;
            ____result.ErrorLocale = __ErrorLocale__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Tutorial_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.Tutorial_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.Tutorial_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(14);
            writer.Write(value.TutorialID);
            writer.Write(value.QuestID);
            writer.Write(value.Step);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_UnitAttributeType>().Serialize(ref writer, value.AttributeType, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_TutorialType>().Serialize(ref writer, value.TutorialType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.NpcNameText, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.GuideResource, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.DialogueResource, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Text, options);
            writer.Write(value.SoundID);
            writer.Write(value.SkipSoundID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.SkipText, options);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_GuideType>().Serialize(ref writer, value.GuideType, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Serialize(ref writer, value.GuideParams, options);
        }

        public global::GameDB.Tutorial_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __TutorialID__ = default(uint);
            var __QuestID__ = default(uint);
            var __Step__ = default(byte);
            var __AttributeType__ = default(global::GameDB.E_UnitAttributeType);
            var __TutorialType__ = default(global::GameDB.E_TutorialType);
            var __NpcNameText__ = default(string);
            var __GuideResource__ = default(string);
            var __DialogueResource__ = default(string);
            var __Text__ = default(string);
            var __SoundID__ = default(uint);
            var __SkipSoundID__ = default(uint);
            var __SkipText__ = default(string);
            var __GuideType__ = default(global::GameDB.E_GuideType);
            var __GuideParams__ = default(global::System.Collections.Generic.List<string>);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __TutorialID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __QuestID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __Step__ = reader.ReadByte();
                        break;
                    case 3:
                        __AttributeType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_UnitAttributeType>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __TutorialType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_TutorialType>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __NpcNameText__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __GuideResource__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __DialogueResource__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __Text__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __SoundID__ = reader.ReadUInt32();
                        break;
                    case 10:
                        __SkipSoundID__ = reader.ReadUInt32();
                        break;
                    case 11:
                        __SkipText__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __GuideType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_GuideType>().Deserialize(ref reader, options);
                        break;
                    case 13:
                        __GuideParams__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.Tutorial_Table();
            ____result.TutorialID = __TutorialID__;
            ____result.QuestID = __QuestID__;
            ____result.Step = __Step__;
            ____result.AttributeType = __AttributeType__;
            ____result.TutorialType = __TutorialType__;
            ____result.NpcNameText = __NpcNameText__;
            ____result.GuideResource = __GuideResource__;
            ____result.DialogueResource = __DialogueResource__;
            ____result.Text = __Text__;
            ____result.SoundID = __SoundID__;
            ____result.SkipSoundID = __SkipSoundID__;
            ____result.SkipText = __SkipText__;
            ____result.GuideType = __GuideType__;
            ____result.GuideParams = __GuideParams__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UIResource_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.UIResource_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.UIResource_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(14);
            writer.Write(value.ID);
            formatterResolver.GetFormatterWithVerify<global::GameDB.E_UIType>().Serialize(ref writer, value.UIType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.TextColor, options);
            writer.Write(value.Tier);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.TierText, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.BgImg, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.BgEffect, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.MakeMileageGaugeBar, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.MileageIconEffect, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.MileageBarEffect, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.GachaCardEffect, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.DropEffect, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.EffEnchantFront, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.EffEnchantBG, options);
        }

        public global::GameDB.UIResource_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __ID__ = default(byte);
            var __UIType__ = default(global::GameDB.E_UIType);
            var __TextColor__ = default(string);
            var __Tier__ = default(byte);
            var __TierText__ = default(string);
            var __BgImg__ = default(string);
            var __BgEffect__ = default(string);
            var __MakeMileageGaugeBar__ = default(string);
            var __MileageIconEffect__ = default(string);
            var __MileageBarEffect__ = default(string);
            var __GachaCardEffect__ = default(string);
            var __DropEffect__ = default(string);
            var __EffEnchantFront__ = default(string);
            var __EffEnchantBG__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __ID__ = reader.ReadByte();
                        break;
                    case 1:
                        __UIType__ = formatterResolver.GetFormatterWithVerify<global::GameDB.E_UIType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __TextColor__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Tier__ = reader.ReadByte();
                        break;
                    case 4:
                        __TierText__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __BgImg__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __BgEffect__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __MakeMileageGaugeBar__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __MileageIconEffect__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __MileageBarEffect__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __GachaCardEffect__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __DropEffect__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __EffEnchantFront__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 13:
                        __EffEnchantBG__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.UIResource_Table();
            ____result.ID = __ID__;
            ____result.UIType = __UIType__;
            ____result.TextColor = __TextColor__;
            ____result.Tier = __Tier__;
            ____result.TierText = __TierText__;
            ____result.BgImg = __BgImg__;
            ____result.BgEffect = __BgEffect__;
            ____result.MakeMileageGaugeBar = __MakeMileageGaugeBar__;
            ____result.MileageIconEffect = __MileageIconEffect__;
            ____result.MileageBarEffect = __MileageBarEffect__;
            ____result.GachaCardEffect = __GachaCardEffect__;
            ____result.DropEffect = __DropEffect__;
            ____result.EffEnchantFront = __EffEnchantFront__;
            ____result.EffEnchantBG = __EffEnchantBG__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UpgradeList_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.UpgradeList_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.UpgradeList_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            writer.Write(value.UpgradeListID);
            writer.Write(value.GroupID);
            writer.Write(value.UpgradeItemID);
        }

        public global::GameDB.UpgradeList_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __UpgradeListID__ = default(uint);
            var __GroupID__ = default(uint);
            var __UpgradeItemID__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __UpgradeListID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __GroupID__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __UpgradeItemID__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.UpgradeList_Table();
            ____result.UpgradeListID = __UpgradeListID__;
            ____result.GroupID = __GroupID__;
            ____result.UpgradeItemID = __UpgradeItemID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class WeightPenalty_TableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameDB.WeightPenalty_Table>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameDB.WeightPenalty_Table value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(8);
            writer.Write(value.WeightPenaltyID);
            writer.Write(value.CharacterWeighRate);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.WeightPenaltyColor, options);
            writer.Write(value.SlotMaxCheck);
            writer.Write(value.NotPenaltyRanking);
            writer.Write(value.AbilityActionID_01);
            writer.Write(value.AbilityActionID_02);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.SimplePenaltyTip, options);
        }

        public global::GameDB.WeightPenalty_Table Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __WeightPenaltyID__ = default(uint);
            var __CharacterWeighRate__ = default(uint);
            var __WeightPenaltyColor__ = default(string);
            var __SlotMaxCheck__ = default(byte);
            var __NotPenaltyRanking__ = default(uint);
            var __AbilityActionID_01__ = default(uint);
            var __AbilityActionID_02__ = default(uint);
            var __SimplePenaltyTip__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __WeightPenaltyID__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __CharacterWeighRate__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __WeightPenaltyColor__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __SlotMaxCheck__ = reader.ReadByte();
                        break;
                    case 4:
                        __NotPenaltyRanking__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __AbilityActionID_01__ = reader.ReadUInt32();
                        break;
                    case 6:
                        __AbilityActionID_02__ = reader.ReadUInt32();
                        break;
                    case 7:
                        __SimplePenaltyTip__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameDB.WeightPenalty_Table();
            ____result.WeightPenaltyID = __WeightPenaltyID__;
            ____result.CharacterWeighRate = __CharacterWeighRate__;
            ____result.WeightPenaltyColor = __WeightPenaltyColor__;
            ____result.SlotMaxCheck = __SlotMaxCheck__;
            ____result.NotPenaltyRanking = __NotPenaltyRanking__;
            ____result.AbilityActionID_01 = __AbilityActionID_01__;
            ____result.AbilityActionID_02 = __AbilityActionID_02__;
            ____result.SimplePenaltyTip = __SimplePenaltyTip__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

